{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = props => {\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const status = useSelector(state => state.status);\n\n  const _useState = useState(rosterStatus),\n        _useState2 = _slicedToArray(_useState, 2),\n        rosterStatusColor = _useState2[0],\n        setRosterStatusColor = _useState2[1];\n\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  useEffect(() => {\n    setRosterStatusColor(rosterStatus);\n  }, [rosterStatus]);\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n\n  const onPresence = presence => {\n    $(presence).each(function () {\n      let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n      let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n\n      console.log(\"presence\", presence);\n\n      if (!presence_type) {\n        let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n        if (!show) {\n          // Mark contact as offline\n          changeRosterStatus(\"chat\");\n          console.log(\"presence_type2\", presence_type);\n        } else {\n          switch (show) {\n            case \"chat\":\n              changeRosterStatus(\"chat\"); // Mark contact as online\n\n              console.log(from + \"contact as online\");\n              break;\n\n            case \"away\":\n              changeRosterStatus(\"away\");\n              console.log(from + \"contact as away\");\n              break;\n\n            case \"dnd\":\n              changeRosterStatus(\"dnd\");\n              console.log(from + \"contact as dnd\");\n              break;\n\n            case \"xa\":\n              changeRosterStatus(\"xa\");\n              console.log(from + \"contact as xa\");\n              break;\n\n            default:\n              changeRosterStatus(\"chat\");\n          }\n        }\n      }\n\n      if (from.split(\"/\", 1)[0] === props.item.jid) {\n        if (from !== connection.jid) {\n          if (presence_type !== \"error\") {\n            if (presence_type === \"unavailable\") {\n              // Mark contact as offline\n              changeRosterStatus(\"offline\");\n              console.log(\"presence_type2\", presence_type);\n              console.log(from + \"contact as unavailable\");\n            } else {\n              console.log(\"presence_type3\", presence_type);\n\n              if (show === \"chat\") {} else if (show === \"away\") {// etc...\n              } else if (show === \"dnd\") {\n                // etc...\n                changeRosterStatus(\"dnd\");\n                console.log(from + \"contact as dnd\");\n              } else if (show === \"xa\") {// etc...\n              }\n            }\n          }\n        } else {\n          console.log(\"equal to my jid\");\n        }\n      }\n    });\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    \"data-id\": props.item.jid,\n    className: rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","$","ContactItem","props","rosterStatus","state","status","rosterStatusColor","setRosterStatusColor","dispatch","showMainPage","connection","handleRosterClick","contact","console","log","type","onPresence","presence","each","presence_type","attr","from","show","find","text","changeRosterStatus","split","item","jid","addHandler","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = (props) => {\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const status = useSelector(state => state.status);\n    const [rosterStatusColor, setRosterStatusColor] = useState(rosterStatus);\n    const dispatch = useDispatch();\n    const showMainPage = useSelector(state => state.showMainPage);\n    const connection = useSelector(state => state.connection);\n\n    useEffect(() => {\n        setRosterStatusColor(rosterStatus)\n    }, [rosterStatus]);\n\n    const handleRosterClick = (contact) => {\n        console.log(contact)\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n\n        $(presence).each(function () {\n\n            let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n            let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n            console.log(\"presence\", presence)\n            if (!presence_type) {\n                let show = $(presence)\n                    .find(\"show\")\n                    .text(); // this is what gives away, dnd, etc.\n                if (!show) {\n                    // Mark contact as offline\n                    changeRosterStatus(\"chat\");\n                    console.log(\"presence_type2\", presence_type);\n                } else {\n                    switch (show) {\n                        case \"chat\" :\n                            changeRosterStatus(\"chat\");\n                            // Mark contact as online\n                            console.log(from + \"contact as online\");\n                            break;\n                        case \"away\" :\n                            changeRosterStatus(\"away\");\n                            console.log(from + \"contact as away\");\n                            break;\n                        case \"dnd\":\n                            changeRosterStatus(\"dnd\");\n                            console.log(from + \"contact as dnd\");\n                            break;\n                        case \"xa\":\n                            changeRosterStatus(\"xa\");\n                            console.log(from + \"contact as xa\");\n                            break;\n                        default :\n                            changeRosterStatus(\"chat\");\n\n                    }\n                }\n\n            }\n            if (from.split(\"/\", 1)[0] === props.item.jid) {\n                if (from !== connection.jid) {\n\n                    if (presence_type !== \"error\") {\n                        if (presence_type === \"unavailable\") {\n                            // Mark contact as offline\n                            changeRosterStatus(\"offline\");\n                            console.log(\"presence_type2\", presence_type)\n\n                            console.log(from + \"contact as unavailable\");\n\n                        } else {\n                            console.log(\"presence_type3\", presence_type)\n\n\n                            if (show === \"chat\") {\n\n\n                            } else if (show === \"away\") {\n                                // etc...\n\n\n                            } else if (show === \"dnd\") {\n                                // etc...\n                                changeRosterStatus(\"dnd\");\n                                console.log(from + \"contact as dnd\");\n\n                            } else if (show === \"xa\") {\n                                // etc...\n\n\n                            }\n                        }\n                    }\n                } else {\n                    console.log(\"equal to my jid\")\n                }\n            }\n\n        })\n\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n    /*---------------------------------*/\n    //change each roster status.\n    const changeRosterStatus = (rosterStatus) => {\n        dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n    }\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div\n                onClick={() => handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n\n                    <span data-id={props.item.jid}\n                          className={rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor}></span>\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n    );\n\n\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}