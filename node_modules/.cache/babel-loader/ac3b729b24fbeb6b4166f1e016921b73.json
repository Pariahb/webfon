{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useDebugValue, useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ChatInput from \"../chat-input\";\nimport { scrollToBottom } from \"../../helper/functions\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const historyMessages = useSelector(state => state.chatLog);\n  const newMessage = useSelector(state => state.newMessage);\n  const strophe = useSelector(state => state.strophe);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const connection = useSelector(state => state.connection);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        recMessages = _useState2[0],\n        setRecMessages = _useState2[1];\n\n  const _useState3 = useState({\n    txt: ''\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        messageText = _useState4[0],\n        changeMessageText = _useState4[1];\n\n  const _useState5 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        lastActivity = _useState6[0],\n        setLastActivity = _useState6[1];\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n\n  const _useState7 = useState({\n    item: []\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        messageList = _useState8[0],\n        setMessageList = _useState8[1];\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let mySentMessages,\n        myRecMessages,\n        recHistory = [],\n        sentHistory = [];\n    connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n      with: selectedContact,\n      onMessage: function (message) {\n        console.log(\"mam\");\n        $(message).each(function () {\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            myRecMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            recHistory = messageList.item;\n            recHistory.push(myRecMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: recHistory\n            }));\n          } else if ($(this).find(\"forwarded message\").attr(\"to\").split(\"/\", 1)[0] === selectedContact) {\n            mySentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            sentHistory = messageList.item;\n            sentHistory.push(mySentMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: sentHistory\n            }));\n          }\n        });\n        dispatch({\n          historyMessages: sentHistory,\n          type: \"FETCH_HISTORY_MESSAGES\"\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        scrollToBottom();\n      }\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [historyMessages]);\n  /*----------------RECENT ACTIVITY------------------*/\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  useEffect(() => {\n    console.log('*****************************************');\n    setMessageList(_objectSpread({}, messageList, {\n      item: historyMessages\n    }));\n  }, [newMessage]);\n  useEffect(() => {\n    changeMessageText('');\n  }, [historyMessages]);\n\n  const onInputChange = event => {\n    changeMessageText(_objectSpread({}, messageText, {\n      txt: event.target.value\n    }));\n  };\n\n  const renderList = () => {\n    return historyMessages.length > 0 ? historyMessages.map((item, i) => {\n      return React.createElement(MessagePopUp, {\n        key: i,\n        sentMsg: item.text,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      });\n    }) : null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, renderList())), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(ChatInput, {\n    messageText: messageText,\n    onInputChange: onInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  })));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useDebugValue","useEffect","useState","MessagePopUp","$","useDispatch","useSelector","ChatInput","scrollToBottom","ChatBox","selectedContact","state","historyMessages","chatLog","newMessage","strophe","rosterStatus","$iq","connection","item","recMessages","setRecMessages","txt","messageText","changeMessageText","from","time","lastActivity","setLastActivity","dispatch","contacts","messageList","setMessageList","getLog","mySentMessages","myRecMessages","recHistory","sentHistory","mam","query","jid","split","with","onMessage","message","console","log","each","find","attr","text","stamp","type","push","onComplete","response","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","to","id","c","xmlns","sendIQ","addHandler","onInputChange","event","target","value","renderList","length","map","i","Math","floor"],"mappings":"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","sourcesContent":["import React, {useDebugValue, useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ChatInput from \"../chat-input\";\nimport {scrollToBottom} from \"../../helper/functions\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const historyMessages = useSelector(state => state.chatLog);\n    const newMessage = useSelector(state => state.newMessage);\n    const strophe = useSelector(state => state.strophe);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const connection = useSelector(state => state.connection);\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState({txt: ''});\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const dispatch = useDispatch();\n    const contacts = useSelector(state => state.contacts);\n\n    const [messageList, setMessageList] = useState({item: []});\n\n\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n    const getLog = () => {\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [];\n\n        connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = messageList.item;\n                        recHistory.push(myRecMessages);\n                        setMessageList({...messageList, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = messageList.item;\n                        sentHistory.push(mySentMessages);\n                        setMessageList({...messageList, item: sentHistory});\n                    }\n\n\n                });\n\n                dispatch({historyMessages: sentHistory, type: \"FETCH_HISTORY_MESSAGES\"});\n\n                return true;\n            },\n            onComplete: function (response) {\n                scrollToBottom();\n\n            }\n        });\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n\n    }, [historyMessages])\n\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    useEffect(() => {\n        console.log('*****************************************')\n        setMessageList({\n            ...messageList,\n            item: historyMessages\n        })\n\n    }, [newMessage]);\n    useEffect(() => {\n        changeMessageText('')\n    }, [historyMessages]);\n    const onInputChange = (event) => {\n        changeMessageText({\n            ...messageText,\n            txt: event.target.value\n        })\n    };\n    const renderList = () => {\n        return (\n            historyMessages.length > 0 ? historyMessages.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.text}\n                        type={item.type}\n                    />\n                );\n            }) : null\n        )\n    };\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n\n                    {\n                        renderList()\n                    }\n                </div>\n\n            </div>\n\n            <div className=\"textbox\">\n                <ChatInput messageText={messageText} onInputChange={onInputChange}/>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}