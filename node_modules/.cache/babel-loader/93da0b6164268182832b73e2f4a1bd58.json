{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection); // const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        historyMessages = _useState2[0],\n        setHistoryMessages = _useState2[1];\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        allMessages = _useState4[0],\n        setAllMessages = _useState4[1];\n\n  const _useState5 = useState({\n    item: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        recMessages = _useState6[0],\n        setRecMessages = _useState6[1];\n\n  const _useState7 = useState({\n    item: []\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        sentMessages = _useState8[0],\n        setSentMessages = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messageText = _useState10[0],\n        changeMessageText = _useState10[1];\n\n  const _useState11 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState12 = _slicedToArray(_useState11, 2),\n        lastActivity = _useState12[0],\n        setLastActivity = _useState12[1];\n\n  const scrollToBottom = () => {\n    let chatDiv = document.querySelector(\".all-messages\");\n    chatDiv.scrollTo(0, chatDiv.scrollHeight);\n    console.log(\"hi\");\n  };\n\n  useEffect(() => {\n    getLog();\n    console.log(\"connection.mam\", connection.mam);\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let mySentMessages,\n        myRecMessages,\n        recHistory = [],\n        sentHistory = [],\n        archiveIq = $iq({\n      type: \"set\",\n      id: \"archive1\"\n    }).c(\"query\", {\n      xmlns: \"urn:xmpp:mam:2\"\n    });\n    connection.mam.query(connection.jid, {\n      with: selectedContact,\n      onMessage: function (message) {\n        console.log(\"mam\");\n        $(message).each(function () {\n          // console.log(\"$(message)\", $(message).find(\"forwarded message\")\n          //     .attr(\"from\").split(\"/\", 1)[0]);\n          // console.log(\"selectedContact\", selectedContact);\n          // console.log(\"connection.jid\", connection.jid.split(\"/\", 1)[0]);\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            myRecMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            recHistory = historyMessages.item;\n            recHistory.push(myRecMessages);\n            setHistoryMessages(_objectSpread({}, historyMessages, {\n              item: recHistory\n            }));\n          } else if ($(this).find(\"forwarded message\").attr(\"to\").split(\"/\", 1)[0] === selectedContact) {\n            mySentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            sentHistory = historyMessages.item;\n            sentHistory.push(mySentMessages);\n            setHistoryMessages(_objectSpread({}, historyMessages, {\n              item: sentHistory\n            }));\n          }\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        // setHistoryMessages(history)\n        scrollToBottom();\n        console.log(\"historyMessages\", historyMessages);\n      }\n    });\n  };\n\n  const handleChangeMsg = event => {\n    changeMessageText(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    console.log(\"selectedContact\", selectedContact);\n    let txtJID = selectedContact,\n        txtMsg = messageText,\n        message;\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      console.log(\"txtMsg\", txtMsg);\n      sendMessage(message);\n      console.log(\"type\", typeof allMessages);\n    }\n    connection.addHandler(onMessage, null, \"message\", null, null, null);\n    scrollToBottom();\n  }; //Sending message to contact\n\n\n  const sendMessage = msg => {\n    let reply = $msg({\n      to: msg.to,\n      from: connection.jid,\n      type: \"chat\",\n      id: \"message-1\"\n    }).c(\"body\").t(msg.message);\n    connection.send(reply.tree());\n    let sentArray = allMessages.item;\n    sentArray.push(msg);\n    setAllMessages(_objectSpread({}, allMessages, {\n      item: sentArray\n    }));\n    console.log(\"allmessages\", allMessages);\n  };\n\n  const listMessages = () => {\n    return allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n      return React.createElement(MessagePopUp, {\n        key: i,\n        sentMsg: item.message,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      });\n    });\n  };\n\n  const onMessage = msg => {\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    console.log(\"onmsg\");\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      let recArray = allMessages.item;\n      console.log(\"recArray1\", recArray);\n      recArray.push(message);\n      console.log(\"recArray2\", recArray);\n      setAllMessages(_objectSpread({}, allMessages, {\n        item: recArray\n      }));\n      console.log(\"setAllMessages\", allMessages);\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------------RECENT ACTIVITY------------------*/\n\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, historyMessages.item.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, listMessages())), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: messageText,\n    onChange: handleChangeMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useEffect","useState","MessagePopUp","$","useSelector","ChatBox","selectedContact","state","rosterStatus","$iq","$msg","connection","item","historyMessages","setHistoryMessages","allMessages","setAllMessages","recMessages","setRecMessages","sentMessages","setSentMessages","messageText","changeMessageText","from","time","lastActivity","setLastActivity","scrollToBottom","chatDiv","document","querySelector","scrollTo","scrollHeight","console","log","getLog","mam","mySentMessages","myRecMessages","recHistory","sentHistory","archiveIq","type","id","c","xmlns","query","jid","with","onMessage","message","each","find","attr","split","text","stamp","push","onComplete","response","handleChangeMsg","event","target","value","handleSubmit","txtJID","txtMsg","undefined","alert","to","Date","sendMessage","addHandler","msg","reply","t","send","tree","sentArray","listMessages","length","map","i","getAttribute","elems","getElementsByTagName","innerHTML","recArray","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","sendIQ","Math","floor"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAO,aAAP;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAMC,eAAe,GAAGF,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACD,eAAhB,CAAnC;AACA,QAAME,YAAY,GAAGJ,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACC,YAAhB,CAAhC;AACA,QAAMC,GAAG,GAAGL,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACE,GAAhB,CAAvB;AACA,QAAMC,IAAI,GAAGN,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACG,IAAhB,CAAxB;AACA,QAAMC,UAAU,GAAGP,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACI,UAAhB,CAA9B,CALkB,CAMlB;;AANkB,oBAO4BV,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAD,CAPpC;AAAA;AAAA,QAOXC,eAPW;AAAA,QAOMC,kBAPN;;AAAA,qBAQoBb,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAD,CAR5B;AAAA;AAAA,QAQXG,WARW;AAAA,QAQEC,cARF;;AAAA,qBASoBf,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAD,CAT5B;AAAA;AAAA,QASXK,WATW;AAAA,QASEC,cATF;;AAAA,qBAUsBjB,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE;AAAP,GAAD,CAV9B;AAAA;AAAA,QAUXO,YAVW;AAAA,QAUGC,eAVH;;AAAA,qBAWuBnB,QAAQ,CAAC,EAAD,CAX/B;AAAA;AAAA,QAWXoB,WAXW;AAAA,QAWEC,iBAXF;;AAAA,sBAYsBrB,QAAQ,CAAC;AAACsB,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,IAAI,EAAE;AAAjB,GAAD,CAZ9B;AAAA;AAAA,QAYXC,YAZW;AAAA,QAYGC,eAZH;;AAclB,QAAMC,cAAc,GAAG,MAAM;AACzB,QAAIC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAd;AACAF,IAAAA,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoBH,OAAO,CAACI,YAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,GAJD;;AAKAlC,EAAAA,SAAS,CAAC,MAAM;AACZmC,IAAAA,MAAM;AACNF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BvB,UAAU,CAACyB,GAAzC;AACH,GAHQ,EAGN,CAAC9B,eAAD,CAHM,CAAT;;AAKA,QAAM6B,MAAM,GAAG,MAAM;AAEjB,QAAIE,cAAJ;AAAA,QACIC,aADJ;AAAA,QAEIC,UAAU,GAAG,EAFjB;AAAA,QAGIC,WAAW,GAAG,EAHlB;AAAA,QAIIC,SAAS,GAAGhC,GAAG,CAAC;AACZiC,MAAAA,IAAI,EAAE,KADM;AAEZC,MAAAA,EAAE,EAAE;AAFQ,KAAD,CAAH,CAITC,CAJS,CAIP,OAJO,EAIE;AACVC,MAAAA,KAAK,EAAE;AADG,KAJF,CAJhB;AAYAlC,IAAAA,UAAU,CAACyB,GAAX,CAAeU,KAAf,CAAqBnC,UAAU,CAACoC,GAAhC,EAAqC;AACjCC,MAAAA,IAAI,EAAE1C,eAD2B;AAEjC2C,MAAAA,SAAS,EAAE,UAAUC,OAAV,EAAmB;AAC1BjB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA/B,QAAAA,CAAC,CAAC+C,OAAD,CAAD,CAAWC,IAAX,CAAgB,YAAY;AACxB;AACA;AACA;AACA;AAEA,cACIhD,CAAC,CAAC,IAAD,CAAD,CACKiD,IADL,CACU,mBADV,EAEKC,IAFL,CAEU,MAFV,EAGKC,KAHL,CAGW,GAHX,EAGgB,CAHhB,EAGmB,CAHnB,MAG0BhD,eAJ9B,EAKE;AACEgC,YAAAA,aAAa,GAAG;AACZiB,cAAAA,IAAI,EAAEpD,CAAC,CAAC,IAAD,CAAD,CACDiD,IADC,CACI,wBADJ,EAEDG,IAFC,EADM;AAIZC,cAAAA,KAAK,EAAErD,CAAC,CAAC,IAAD,CAAD,CACFiD,IADE,CACG,OADH,EAEFC,IAFE,CAEG,OAFH,CAJK;AAOZX,cAAAA,IAAI,EAAE;AAPM,aAAhB;AASAH,YAAAA,UAAU,GAAG1B,eAAe,CAACD,IAA7B;AACA2B,YAAAA,UAAU,CAACkB,IAAX,CAAgBnB,aAAhB;AACAxB,YAAAA,kBAAkB,mBAAKD,eAAL;AAAsBD,cAAAA,IAAI,EAAE2B;AAA5B,eAAlB;AACH,WAlBD,MAkBO,IACHpC,CAAC,CAAC,IAAD,CAAD,CACKiD,IADL,CACU,mBADV,EAEKC,IAFL,CAEU,IAFV,EAGKC,KAHL,CAGW,GAHX,EAGgB,CAHhB,EAGmB,CAHnB,MAG0BhD,eAJvB,EAKL;AACE+B,YAAAA,cAAc,GAAG;AACbkB,cAAAA,IAAI,EAAEpD,CAAC,CAAC,IAAD,CAAD,CACDiD,IADC,CACI,wBADJ,EAEDG,IAFC,EADO;AAIbC,cAAAA,KAAK,EAAErD,CAAC,CAAC,IAAD,CAAD,CACFiD,IADE,CACG,OADH,EAEFC,IAFE,CAEG,OAFH,CAJM;AAObX,cAAAA,IAAI,EAAE;AAPO,aAAjB;AASAF,YAAAA,WAAW,GAAG3B,eAAe,CAACD,IAA9B;AACA4B,YAAAA,WAAW,CAACiB,IAAZ,CAAiBpB,cAAjB;AACAvB,YAAAA,kBAAkB,mBAAKD,eAAL;AAAsBD,cAAAA,IAAI,EAAE4B;AAA5B,eAAlB;AACH;AACJ,SA3CD;AA4CA,eAAO,IAAP;AACH,OAjDgC;AAkDjCkB,MAAAA,UAAU,EAAE,UAAUC,QAAV,EAAoB;AAC5B;AACAhC,QAAAA,cAAc;AACdM,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BrB,eAA/B;AAEH;AAvDgC,KAArC;AAyDH,GAvED;;AAyEA,QAAM+C,eAAe,GAAIC,KAAD,IAAW;AAC/BvC,IAAAA,iBAAiB,CAACuC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACvB/B,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B5B,eAA/B;AACA,QAAI2D,MAAM,GAAG3D,eAAb;AAAA,QACI4D,MAAM,GAAG7C,WADb;AAAA,QAEI6B,OAFJ;AAIA,QAAIgB,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,EAAvC,EACIE,KAAK,CAAC,sCAAD,CAAL,CADJ,KAEK;AACDlB,MAAAA,OAAO,GAAG;AACNmB,QAAAA,EAAE,EAAEJ,MADE;AAENf,QAAAA,OAAO,EAAEgB,MAFH;AAGN1C,QAAAA,IAAI,EAAE,IAAI8C,IAAJ,EAHA;AAIN5B,QAAAA,IAAI,EAAE;AAJA,OAAV;AAMAT,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBgC,MAAtB;AACAK,MAAAA,WAAW,CAACrB,OAAD,CAAX;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,OAAQnB,WAA5B;AAEH;AACDJ,IAAAA,UAAU,CAAC6D,UAAX,CACIvB,SADJ,EAEI,IAFJ,EAGI,SAHJ,EAII,IAJJ,EAKI,IALJ,EAMI,IANJ;AAQAtB,IAAAA,cAAc;AACjB,GA7BD,CArGkB,CAoIlB;;;AACA,QAAM4C,WAAW,GAAIE,GAAD,IAAS;AACzB,QAAIC,KAAK,GAAGhE,IAAI,CAAC;AACb2D,MAAAA,EAAE,EAAEI,GAAG,CAACJ,EADK;AAEb9C,MAAAA,IAAI,EAAEZ,UAAU,CAACoC,GAFJ;AAGbL,MAAAA,IAAI,EAAE,MAHO;AAIbC,MAAAA,EAAE,EAAE;AAJS,KAAD,CAAJ,CAMPC,CANO,CAML,MANK,EAOP+B,CAPO,CAOLF,GAAG,CAACvB,OAPC,CAAZ;AAQAvC,IAAAA,UAAU,CAACiE,IAAX,CAAgBF,KAAK,CAACG,IAAN,EAAhB;AAEA,QAAIC,SAAS,GAAG/D,WAAW,CAACH,IAA5B;AACAkE,IAAAA,SAAS,CAACrB,IAAV,CAAegB,GAAf;AACAzD,IAAAA,cAAc,mBACPD,WADO;AAEVH,MAAAA,IAAI,EAAEkE;AAFI,OAAd;AAIA7C,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BnB,WAA3B;AAEH,GAnBD;;AAqBA,QAAMgE,YAAY,GAAG,MAAM;AAEvB,WACIhE,WAAW,CAACH,IAAZ,CAAiBoE,MAAjB,KAA4B,CAA5B,GAAgC,EAAhC,GAAqCjE,WAAW,CAACH,IAAZ,CAAiBqE,GAAjB,CAAqB,CAACrE,IAAD,EAAOsE,CAAP,KAAa;AACnE,aACI,oBAAC,YAAD;AACI,QAAA,GAAG,EAAEA,CADT;AAEI,QAAA,OAAO,EAAEtE,IAAI,CAACsC,OAFlB;AAGI,QAAA,IAAI,EAAEtC,IAAI,CAAC8B,IAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KARoC,CADzC;AAWH,GAbD;;AAcA,QAAMO,SAAS,GAAIwB,GAAD,IAAS;AACvB,QAAIlD,IAAI,GAAGkD,GAAG,CAACU,YAAJ,CAAiB,MAAjB,CAAX;AACA,QAAIzC,IAAI,GAAG+B,GAAG,CAACU,YAAJ,CAAiB,MAAjB,CAAX;AACA,QAAIC,KAAK,GAAGX,GAAG,CAACY,oBAAJ,CAAyB,MAAzB,CAAZ;;AACA,QAAI3C,IAAI,KAAK,OAAb,EAAsB;AAClB0B,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AACH;;AAEDnC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,QAAIQ,IAAI,KAAK,MAAb,EAAqB;AACjB,UAAIQ,OAAO,GAAG;AACV3B,QAAAA,IAAI,EAAEA,IADI;AAEV2B,QAAAA,OAAO,EAAEkC,KAAK,CAAC,CAAD,CAAL,CAASE,SAFR;AAGV9D,QAAAA,IAAI,EAAE,IAAI8C,IAAJ,EAHI;AAIV5B,QAAAA,IAAI,EAAE;AAJI,OAAd;AAOA,UAAI6C,QAAQ,GAAGxE,WAAW,CAACH,IAA3B;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqD,QAAzB;AAEAA,MAAAA,QAAQ,CAAC9B,IAAT,CAAcP,OAAd;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqD,QAAzB;AAEAvE,MAAAA,cAAc,mBACPD,WADO;AAEVH,QAAAA,IAAI,EAAE2E;AAFI,SAAd;AAIAtD,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BnB,WAA9B;AAGH;;AACD,WAAO,IAAP,CAhCuB,CAgCV;AAChB,GAjCD;AAmCA;;;AACA,QAAMyE,cAAc,GAAIC,EAAD,IAAQ;AAE3B,QAAIlE,IAAI,GAAGpB,CAAC,CAACsF,EAAD,CAAD,CAAMpC,IAAN,CAAW,MAAX,CAAX,CAF2B,CAEI;;AAC/B,QAAIqC,eAAJ;AACA,QAAIC,SAAS,GAAGxF,CAAC,CAACsF,EAAD,CAAD,CAAMpC,IAAN,CAAW,MAAX,CAAhB;AACAlD,IAAAA,CAAC,CAACsF,EAAD,CAAD,CAAMrC,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAyB,YAAY;AAEjC,UAAIwC,SAAS,KAAK,QAAlB,EAA4B;AACxB,YAAIC,gBAAgB,GAAGzF,CAAC,CAACsF,EAAD,CAAD,CAAMrC,IAAN,CAAW,OAAX,EAAoBC,IAApB,CAAyB,SAAzB,CAAvB;AACAqC,QAAAA,eAAe,GAAG;AACdnE,UAAAA,IAAI,EAAEA,IADQ;AAEdC,UAAAA,IAAI,EAAEoE,gBAFQ;AAGdlD,UAAAA,IAAI,EAAEiD,SAHQ;AAIdE,UAAAA,YAAY,EAAE;AAJA,SAAlB;AAMAnE,QAAAA,eAAe,mBACRD,YADQ;AACMF,UAAAA,IAAI,EAAEmE,eAAe,CAACnE,IAD5B;AAEXC,UAAAA,IAAI,EAAEkE,eAAe,CAAClE,IAFX;AAGXkB,UAAAA,IAAI,EAAEgD,eAAe,CAAChD,IAHX;AAIXmD,UAAAA,YAAY,EAAEH,eAAe,CAACG;AAJnB,WAAf;AAMH;;AACD,UAAIF,SAAS,KAAK,OAAlB,EAA2B;AACvB,YAAIE,YAAY,GAAG1F,CAAC,CAACsF,EAAD,CAAD,CAAMrC,IAAN,CAAW,MAAX,EAAmBG,IAAnB,EAAnB;AACAmC,QAAAA,eAAe,GAAG;AACdnE,UAAAA,IAAI,EAAEA,IADQ;AAEdC,UAAAA,IAAI,EAAE,IAFQ;AAGdkB,UAAAA,IAAI,EAAEiD,SAHQ;AAIdE,UAAAA,YAAY,EAAEA;AAJA,SAAlB;AAMAnE,QAAAA,eAAe,mBACRD,YADQ;AAEXF,UAAAA,IAAI,EAAEmE,eAAe,CAACnE,IAFX;AAGXC,UAAAA,IAAI,EAAEkE,eAAe,CAAClE,IAHX;AAIXkB,UAAAA,IAAI,EAAEgD,eAAe,CAAChD,IAJX;AAKXmD,UAAAA,YAAY,EAAEH,eAAe,CAACG;AALnB,WAAf;AAQH;AAEJ,KAnCD;AAoCA,WAAO,IAAP;AAEH,GA3CD;;AA4CA,QAAMC,eAAe,GAAG,MAAM;AAC1B,UAAML,EAAE,GAAGhF,GAAG,CAAC;AACXiC,MAAAA,IAAI,EAAE,KADK;AAEXnB,MAAAA,IAAI,EAAEZ,UAAU,CAACoC,GAFN;AAGXsB,MAAAA,EAAE,EAAE/D,eAHO;AAIXqC,MAAAA,EAAE,EAAE;AAJO,KAAD,CAAH,CAKRC,CALQ,CAKN,OALM,EAKG;AAACC,MAAAA,KAAK,EAAE;AAAR,KALH,CAAX;AAMAlC,IAAAA,UAAU,CAACoF,MAAX,CAAkBN,EAAlB;AACA9E,IAAAA,UAAU,CAAC6D,UAAX,CAAsBgB,cAAtB,EAAsC,IAAtC,EAA4C,IAA5C,EAAkD,IAAlD,EAAwD,IAAxD,EAA8D,IAA9D;AACH,GATD;;AAUAxF,EAAAA,SAAS,CAAC,MAAM;AACZ8F,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACxF,eAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACZ8F,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACtF,YAAD,CAFM,CAAT;AAIA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBF,eAAvB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAImB,YAAY,CAACiB,IAAb,KAAsB,OAAtB,GAAgC,oBAAhC,GAAuDjB,YAAY,CAACD,IAAb,KAAsB,GAAtB,GAA4B,QAA5B,GACrDC,YAAY,CAACD,IAAb,GAAoB,EAApB,GAAyB,eAAeC,YAAY,CAACD,IAA5B,GAAmC,cAA5D,GACIwE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,EAA/B,IAAqC,EAArC,GAA0C,eAAewE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,EAA/B,CAAf,GAAoD,cAA9F,GACIwE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,IAA/B,IAAuC,EAAvC,GAA4C,eAAewE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,IAA/B,CAAf,GAAsD,YAAlG,GACIwE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,KAA/B,IAAwC,CAAxC,GAA4C,eAAewE,IAAI,CAACC,KAAL,CAAWxE,YAAY,CAACD,IAAb,GAAoB,KAA/B,CAAf,GAAuD,WAAnG,GAAiH,2BAJnI,CAFJ,CADJ,EAeI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,eAAe,CAACD,IAAhB,CAAqBqE,GAArB,CAAyB,CAACrE,IAAD,EAAOsE,CAAP,KAAa;AACnC,WACI,oBAAC,YAAD;AACI,MAAA,GAAG,EAAEA,CADT;AAEI,MAAA,OAAO,EAAEtE,IAAI,CAAC2C,IAFlB;AAGI,MAAA,IAAI,EAAE3C,IAAI,CAAC8B,IAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH,GARA,CADL,CADJ,EAYI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKqC,YAAY,EADjB,CAZJ,CAfJ,EAgCI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,SAAS,EAAC,cAHd;AAII,IAAA,WAAW,EAAC,iBAJhB;AAKI,IAAA,IAAI,EAAC,GALT;AAMI,IAAA,KAAK,EAAE1D,WANX;AAOI,IAAA,QAAQ,EAAEuC,eAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAWI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,KAAK,EAAC,MAFV;AAGI,IAAA,SAAS,EAAC,SAHd;AAII,IAAA,EAAE,EAAC,YAJP;AAKI,IAAA,OAAO,EAAEI,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,CAhCJ,CADJ;AAuDH,CAjUD;;AAoUA,eAAe3D,OAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n    // const showMainPage = useSelector(state => state.showMainPage);\n    const [historyMessages, setHistoryMessages] = useState({item: []});\n    const [allMessages, setAllMessages] = useState({item: []});\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [sentMessages, setSentMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState(\"\");\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n\n    const scrollToBottom = () => {\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n        console.log(\"hi\")\n    };\n    useEffect(() => {\n        getLog();\n        console.log(\"connection.mam\", connection.mam)\n    }, [selectedContact]);\n\n    const getLog = () => {\n\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [],\n            archiveIq = $iq({\n                type: \"set\",\n                id: \"archive1\"\n\n            }).c(\"query\", {\n                xmlns: \"urn:xmpp:mam:2\"\n            });\n\n        connection.mam.query(connection.jid, {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n                    // console.log(\"$(message)\", $(message).find(\"forwarded message\")\n                    //     .attr(\"from\").split(\"/\", 1)[0]);\n                    // console.log(\"selectedContact\", selectedContact);\n                    // console.log(\"connection.jid\", connection.jid.split(\"/\", 1)[0]);\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = historyMessages.item;\n                        recHistory.push(myRecMessages);\n                        setHistoryMessages({...historyMessages, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = historyMessages.item;\n                        sentHistory.push(mySentMessages);\n                        setHistoryMessages({...historyMessages, item: sentHistory});\n                    }\n                });\n                return true;\n            },\n            onComplete: function (response) {\n                // setHistoryMessages(history)\n                scrollToBottom();\n                console.log(\"historyMessages\", historyMessages)\n\n            }\n        });\n    };\n\n    const handleChangeMsg = (event) => {\n        changeMessageText(event.target.value)\n    };\n\n    const handleSubmit = () => {\n        console.log(\"selectedContact\", selectedContact);\n        let txtJID = selectedContact,\n            txtMsg = messageText,\n            message;\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            console.log(\"txtMsg\", txtMsg);\n            sendMessage(message);\n            console.log(\"type\", typeof (allMessages))\n\n        }\n        connection.addHandler(\n            onMessage,\n            null,\n            \"message\",\n            null,\n            null,\n            null\n        );\n        scrollToBottom();\n    };\n\n    //Sending message to contact\n    const sendMessage = (msg) => {\n        let reply = $msg({\n            to: msg.to,\n            from: connection.jid,\n            type: \"chat\",\n            id: \"message-1\"\n        })\n            .c(\"body\")\n            .t(msg.message);\n        connection.send(reply.tree());\n\n        let sentArray = allMessages.item;\n        sentArray.push(msg);\n        setAllMessages({\n            ...allMessages,\n            item: sentArray\n        });\n        console.log(\"allmessages\", allMessages)\n\n    };\n\n    const listMessages = () => {\n\n        return (\n            allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.message}\n                        type={item.type}\n                    />\n                );\n            }))\n\n    };\n    const onMessage = (msg) => {\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n\n        console.log(\"onmsg\")\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n\n            let recArray = allMessages.item;\n            console.log(\"recArray1\", recArray)\n\n            recArray.push(message);\n            console.log(\"recArray2\", recArray)\n\n            setAllMessages({\n                ...allMessages,\n                item: recArray\n            });\n            console.log(\"setAllMessages\", allMessages)\n\n\n        }\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n                    {historyMessages.item.map((item, i) => {\n                        return (\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.text}\n                                type={item.type}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"messages\">\n                    {listMessages()}\n                </div>\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={messageText}\n                    onChange={handleChangeMsg}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}