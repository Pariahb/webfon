{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js\";\nimport React, { useEffect } from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const $iq = useSelector(state => state.$iq);\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  const contacts = useSelector(state => state.contacts);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n  const checkRedux = item => {\n    console.log(\"dddd\", typeof rosterStatus);\n    console.log(\"rosterStatus type\", rosterStatus);\n    debugger;\n    const finedItem = rosterStatus.filter(i => i.id === item.id)[0];\n    if (finedItem) return true;else return false;\n  };\n\n  const onPresence = presence => {\n    $(presence).each(function () {\n      let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\+\n\n      let rosterStatusItem = {\n        id: from.split(\"/\", 1)[0],\n        status: \"\"\n      };\n\n      if (from !== connection.jid) {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n        if (!presence_type) {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (!show) {\n            if (presence_type === \"unavailable\") {\n              console.log(\"presence_type2\", presence_type);\n              console.log(from + \"contact as unavailable\");\n              rosterStatusItem.status = \"xa\";\n              console.log(\"rosterStatusItem1\", rosterStatusItem);\n\n              if (checkRedux(rosterStatusItem) === true) {\n                dispatch({\n                  rosterStatusItem,\n                  type: \"CHANGE_EACH_ROSTER_STATUS\"\n                });\n                debugger;\n              } else {\n                dispatch({\n                  rosterStatusItem,\n                  type: \"PUSH_ROSTER_STATUS_ITEM\"\n                });\n                debugger;\n              }\n            } else {\n              rosterStatusItem.status = \"chat\";\n\n              if (checkRedux(rosterStatusItem) === true) {\n                dispatch({\n                  rosterStatusItem,\n                  type: \"CHANGE_EACH_ROSTER_STATUS\"\n                });\n                debugger;\n              } else {\n                dispatch({\n                  rosterStatusItem,\n                  type: \"PUSH_ROSTER_STATUS_ITEM\"\n                });\n                debugger;\n              }\n\n              console.log(\"rosterStatusItem2\", rosterStatusItem);\n            }\n          } else {\n            switch (show) {\n              case \"chat\":\n                rosterStatusItem.status = \"chat\";\n\n                if (checkRedux(rosterStatusItem) === true) {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"CHANGE_EACH_ROSTER_STATUS\"\n                  });\n                } else {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"PUSH_ROSTER_STATUS_ITEM\"\n                  });\n                }\n\n                break;\n\n              case \"away\":\n                rosterStatusItem.status = \"away\";\n\n                if (checkRedux(rosterStatusItem) === true) {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"CHANGE_EACH_ROSTER_STATUS\"\n                  });\n                } else {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"PUSH_ROSTER_STATUS_ITEM\"\n                  });\n                }\n\n                break;\n\n              case \"dnd\":\n                rosterStatusItem.status = \"dnd\";\n\n                if (checkRedux(rosterStatusItem) === true) {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"CHANGE_EACH_ROSTER_STATUS\"\n                  });\n                } else {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"PUSH_ROSTER_STATUS_ITEM\"\n                  });\n                }\n\n                break;\n\n              case \"xa\":\n                rosterStatusItem.status = \"xa\";\n\n                if (checkRedux(rosterStatusItem) === true) {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"CHANGE_EACH_ROSTER_STATUS\"\n                  });\n                } else {\n                  dispatch({\n                    rosterStatusItem,\n                    type: \"PUSH_ROSTER_STATUS_ITEM\"\n                  });\n                }\n\n                break;\n\n              default:\n                rosterStatusItem.status = \"chat\";\n                dispatch({\n                  rosterStatusItem,\n                  type: \"CHANGE_EACH_ROSTER_STATUS\"\n                });\n            }\n          }\n        }\n      }\n    });\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n\n\n  const getSearchResult = () => {\n    connection.send($iq({\n      type: \"set\",\n      id: \"search1\",\n      from: connection.jid\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:search\"\n    }).c(\"x\", {\n      xmlns: \"jabber:x:data\",\n      type: \"submit\"\n    }).c(\"field\", {\n      var: \"user\"\n    }).c(\"value\").t(\"maral\"));\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: getSearchResult,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"search\"), React.createElement(\"div\", {\n    className: \"col-sm-4 contacts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"\\u0644\\u06CC\\u0633\\u062A \\u067E\\u06CC\\u0627\\u0645 \\u0647\\u0627\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"\\u0627\\u0641\\u0631\\u0627\\u062F \\u0622\\u0646\\u0644\\u0627\\u06CC\\u0646 (\\u06F4 \\u0646\\u0641\\u0631)\")), contacts.map((item, i) => {\n    // Return the element. Also pass key\n    return React.createElement(ContactItem, {\n      key: i,\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default ContactsList;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js"],"names":["React","useEffect","ContactItem","useDispatch","useSelector","$","ContactsList","dispatch","$iq","state","showMainPage","connection","contacts","rosterStatus","checkRedux","item","console","log","finedItem","filter","i","id","onPresence","presence","each","from","attr","rosterStatusItem","split","status","jid","presence_type","show","find","text","type","getSearchResult","send","c","xmlns","var","t","addHandler","map"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactsList = () => {\n    const dispatch = useDispatch();\n    const $iq = useSelector(state => state.$iq);\n    const showMainPage = useSelector(state => state.showMainPage);\n    const connection = useSelector(state => state.connection);\n    const contacts = useSelector(state => state.contacts);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const checkRedux = (item) => {\n        console.log(\"dddd\", typeof (rosterStatus))\n        console.log(\"rosterStatus type\", rosterStatus)\n    debugger\n        const finedItem = rosterStatus.filter(i => i.id === item.id)[0]\n        if (finedItem) return true\n        else return false\n\n    };\n    const onPresence = (presence) => {\n\n        $(presence).each(function () {\n\n                let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\+\n                let rosterStatusItem = {\n                    id: from.split(\"/\", 1)[0],\n                    status: \"\"\n                };\n\n                if (from !== connection.jid) {\n                    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n                    if (!presence_type) {\n                        let show = $(presence)\n                            .find(\"show\")\n                            .text(); // this is what gives away, dnd, etc.\n                        if (!show) {\n                            if (presence_type === \"unavailable\") {\n                                console.log(\"presence_type2\", presence_type);\n                                console.log(from + \"contact as unavailable\");\n                                rosterStatusItem.status = \"xa\";\n                                console.log(\"rosterStatusItem1\", rosterStatusItem)\n                                if (checkRedux(rosterStatusItem) === true) {\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                debugger\n                                } else {\n                                    dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                debugger\n\n                                }\n                            } else {\n                                rosterStatusItem.status = \"chat\";\n                                if (checkRedux(rosterStatusItem) === true) {\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                debugger\n                                } else {\n                                    dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                debugger\n\n                                }\n                                console.log(\"rosterStatusItem2\", rosterStatusItem)\n                            }\n                        } else {\n                            switch (show) {\n                                case \"chat\" :\n                                    rosterStatusItem.status = \"chat\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"away\" :\n                                    rosterStatusItem.status = \"away\";\n\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"dnd\":\n                                    rosterStatusItem.status = \"dnd\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"xa\":\n                                    rosterStatusItem.status = \"xa\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n\n                                    }\n\n                                    break;\n                                default :\n                                    rosterStatusItem.status = \"chat\";\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                            }\n                        }\n\n                    }\n                }\n\n            }\n        );\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*---------------------------------*/\n    const getSearchResult = () => {\n        connection.send($iq({\n            type: \"set\",\n            id: \"search1\",\n            from: connection.jid\n        }).c(\"query\", {xmlns: \"jabber:iq:search\"}).c(\"x\", {\n            xmlns: \"jabber:x:data\",\n            type: \"submit\"\n        }).c(\"field\", {var: \"user\"}).c(\"value\").t(\"maral\"))\n    };\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <button onClick={getSearchResult}>search</button>\n\n            <div className=\"col-sm-4 contacts\">\n                <div className=\"header\">\n                    <p>لیست پیام ها</p>\n                    <p>افراد آنلاین (۴ نفر)</p>\n                </div>\n                {contacts.map((item, i) => {\n                    // Return the element. Also pass key\n                    return (\n                        <ContactItem\n                            key={i}\n                            item={item}\n                        />\n\n                    );\n                })}\n\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ContactsList;\n"]},"metadata":{},"sourceType":"module"}