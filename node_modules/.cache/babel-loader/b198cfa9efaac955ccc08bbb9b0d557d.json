{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js\";\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport { useSelector } from \"react-redux\";\n\nconst Search = props => {\n  const $iq = useSelector(state => state.$iq);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        filtered = _useState2[0],\n        setfiltered = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        searched = _useState4[0],\n        checkSearched = _useState4[1];\n\n  const handleChange = e => {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      const searchQuery = $iq({\n        type: \"get\"\n      });\n      checkSearched(true);\n      currentList = props.items;\n      console.log(\"currentList\", currentList); // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.text.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    setfiltered(newList);\n  };\n\n  useEffect(() => {\n    let chatDiv = document.querySelector(\".archive\");\n    chatDiv.scrollTo(0, chatDiv.scrollHeight);\n  }, [filtered]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input\",\n    onChange: handleChange,\n    placeholder: \"Search...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, searched ? filtered.map((item, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(MessagePopUp, {\n    key: i,\n    sentMsg: item.text,\n    type: item.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))) : props.items.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n  }))));\n};\n\nexport default Search;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js"],"names":["React","useEffect","useState","MessagePopUp","useSelector","Search","props","$iq","state","filtered","setfiltered","searched","checkSearched","handleChange","e","currentList","newList","target","value","searchQuery","type","items","console","log","filter","item","lc","text","toLowerCase","includes","chatDiv","document","querySelector","scrollTo","scrollHeight","map","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport {useSelector} from \"react-redux\";\n\n\nconst Search = (props) => {\n    const $iq = useSelector(state => state.$iq)\n\n    const [filtered, setfiltered] = useState([]);\n    const [searched, checkSearched] = useState(false)\n    const handleChange = (e) => {\n\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            const searchQuery = $iq({type : \"get\", })\n            checkSearched(true)\n            currentList = props.items;\n            console.log(\"currentList\", currentList)\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.text.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        setfiltered(newList);\n\n    };\n    useEffect(() => {\n        let chatDiv = document.querySelector(\".archive\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n    }, [filtered]);\n    return (\n        <React.Fragment>\n            <div>\n\n                <input type=\"text\" className=\"input\" onChange={handleChange} placeholder=\"Search...\"/>\n            </div>\n            <div className=\"archive\">\n\n                <ul>\n                    {searched ?\n\n                        filtered.map((item, i) => <li key={i}>\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.text}\n                                type={item.type}\n                            />\n                        </li>)\n                        :\n                        props.items.map((item, i) => {\n                            return (\n                                <MessagePopUp\n                                    key={i}\n                                    sentMsg={item.text}\n                                    type={item.type}\n                                />\n                            );\n                        })\n                    }\n\n                </ul>\n            </div>\n\n        </React.Fragment>\n    )\n}\n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}