{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Input from \"../input\";\nimport Button from \"../button\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst LoginPage = () => {\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n  const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        jidValue = _useState2[0],\n        setJidValue = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        passValue = _useState4[0],\n        setPassValue = _useState4[1];\n\n  const _useState5 = useState('connect'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loginButton = _useState6[0],\n        changeLoginButton = _useState6[1];\n\n  const dispatch = useDispatch(); //strophe connection process\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\");\n      setShowStatus(true);\n    }\n  };\n\n  const setShowStatus = s => {\n    console.log(\"show\", s);\n    dispatch({\n      s,\n      type: 'SHOW_MAIN_PAGE'\n    });\n  };\n\n  const handleChangeJID = event => {\n    // console.log(\"jidValue\", event.target.value)\n    setJidValue(event.target.value);\n    console.log(\"jidValue\", jidValue);\n  };\n\n  const handleChangePass = event => {\n    // console.log(\"passValue\", event.target.value)\n    setPassValue(event.target.value);\n    console.log(\"passValue\", ...passValue);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (jidValue === undefined || jidValue === \"\") {\n      console.log(\"jidValue00000.\", jidValue);\n      alert(\"Blank JID\");\n    } else if (passValue === undefined || passValue === \"\") alert(\"Empty pass, please type password\");else {\n      if (loginButton === \"connect\") {\n        changeLoginButton(\"disconnect\");\n        connection.connect(jidValue, passValue, onConnect);\n      } else {\n        connection.disconnect();\n        changeLoginButton(\"connect\");\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    label: \"JID\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"text\",\n    placeholder: \"enter your JID...\",\n    onChange: handleChangeJID,\n    value: jidValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    label: \"Password\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"password\",\n    placeholder: \"enter your password...\",\n    onChange: handleChangePass,\n    value: passValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    id: \"connect\",\n    value: loginButton,\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, loginButton)))));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js"],"names":["React","useEffect","useState","Input","Button","useDispatch","useSelector","LoginPage","connection","state","$pres","$iq","strophe","showMainPage","jidValue","setJidValue","passValue","setPassValue","loginButton","changeLoginButton","dispatch","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","setShowStatus","CONNECTED","s","type","handleChangeJID","event","target","value","handleChangePass","handleSubmit","preventDefault","undefined","alert","connect","disconnect"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Input from \"../input\";\nimport Button from \"../button\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst LoginPage = () => {\n    const connection = useSelector(state => state.connection)\n    const $pres = useSelector(state => state.$pres)\n    const $iq = useSelector(state => state.$iq)\n    const strophe = useSelector(state => state.strophe)\n    const showMainPage = useSelector(state => state.showMainPage)\n    const [jidValue, setJidValue] = useState('')\n    const [passValue, setPassValue] = useState('')\n    const [loginButton, changeLoginButton] = useState('connect')\n    const dispatch = useDispatch();\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            setShowStatus(true)\n        }\n    }\n    const setShowStatus = (s) => {\n        console.log(\"show\", s)\n        dispatch({s, type: 'SHOW_MAIN_PAGE'})\n    }\n\n    const handleChangeJID = (event) => {\n        // console.log(\"jidValue\", event.target.value)\n        setJidValue(event.target.value)\n        console.log(\"jidValue\", jidValue)\n\n    }\n    const handleChangePass = (event) => {\n        // console.log(\"passValue\", event.target.value)\n        setPassValue(event.target.value)\n        console.log(\"passValue\", ...passValue)\n\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (jidValue === undefined || jidValue === \"\") {\n            console.log(\"jidValue00000.\", jidValue);\n\n            alert(\"Blank JID\");\n        } else if (passValue === undefined || passValue === \"\")\n            alert(\"Empty pass, please type password\");\n        else {\n            if (loginButton === \"connect\") {\n                changeLoginButton(\"disconnect\")\n                connection.connect(\n                    jidValue,\n                    passValue,\n                    onConnect\n                );\n            } else {\n                connection.disconnect();\n                changeLoginButton(\"connect\")\n\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <form>\n                        <input\n                            label=\"JID\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"text\"\n                            placeholder=\"enter your JID...\"\n                            onChange={handleChangeJID}\n                            value={jidValue}\n                        />\n                        <input\n                            label=\"Password\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"password\"\n                            placeholder=\"enter your password...\"\n                            onChange={handleChangePass}\n                            value={passValue}\n                        />\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            id=\"connect\"\n                            value={loginButton}\n                            onClick={handleSubmit}\n                        >{loginButton}</button>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}