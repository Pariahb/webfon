{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\"; // import \"./style.css\";\n\nconst MainPage = () => {\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe); //strophe connection process\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\"); // this.setState({\n      //     showMainPage: true,\n      //     jid: this.state.connection.jid\n      // });\n\n      getRoster();\n      sendPriority();\n    }\n  };\n  /*-----------------Log Out Button action----------------=*/\n\n\n  const handleDisconnect = () => {\n    connection.disconnect();\n  };\n  /*-----------------/Log Out Button action----------------*/\n\n  /*-----------------Get Contacts List (step1)----------------=*/\n\n\n  const getRoster = () => {\n    this.setState({\n      contacts: [],\n      iq: this.state.$iq({\n        type: \"get\",\n        id: \"r1\"\n      }).c(\"query\", {\n        xmlns: \"jabber:iq:roster\"\n      })\n    });\n    connection.sendIQ(this.state.iq, rosterReceived);\n  };\n  /*-----------------Get Contacts List (step1)----------------*/\n\n  /*-----------------Get priority ----------------*/\n\n\n  const sendPriority = () => {\n    this.state.connection.send(this.state.$pres().c(\"priority\").t(\"10\").up().c(\"rap\", {\n      xmlns: \"urn:xmpp:rap:0\",\n      ns: \"urn:xmpp:jingle:apps:rtp:0\",\n      num: '5'\n    }));\n    this.state.connection.sendIQ(this.state.$iq({\n      type: \"get\"\n    }).c(\"query\", {\n      xmlns: \"http://jabber.org/protocol/disco#info\"\n    }));\n  };\n  /*-----------------Get priority ----------------*/\n\n  /*-----------------Received contacts Time (step2)----------------*/\n\n\n  const rosterReceived = iq => {\n    let jid;\n    let rosterName;\n    let mycontacts = [];\n    $(iq).find(\"item\").each(function () {\n      jid = $(this).attr(\"jid\"); // The jabber_id of your contact\n\n      if ($(this).attr(\"name\")) {\n        rosterName = $(this).attr(\"name\");\n      } else {\n        rosterName = \"\";\n      } // The jabber_id of your contact\n      // You can probably put them in a unordered list and and use their jids as ids.\n\n\n      mycontacts = mycontacts.concat({\n        name: rosterName,\n        jid: jid\n      });\n    });\n    this.setState({\n      contacts: mycontacts\n    });\n    console.log(\"mycontacts\", this.state.contacts);\n    this.state.connection.send(window.$pres());\n    this.state.connection.addHandler(this.onPresence, null, \"presence\", null, null, null);\n  };\n  /*-----------------Received contacts (step2)----------------*/\n\n  /*----------response to subscription request-----------*/\n\n\n  const onSubscriptionRequest = stanza => {\n    this.setState({\n      showPopUp: true\n    });\n\n    if (stanza.getAttribute(\"type\") === \"subscribe\") {\n      // Send a 'subscribed' notification back to accept the incoming\n      // subscription request\n      this.state.connection.send(window.$pres({\n        to: stanza.getAttribute(\"from\"),\n        type: \"subscribed\"\n      }));\n    }\n\n    return true;\n  };\n  /*----------/response to subscription request-----------*/\n\n  /*----------get contact presence-----------*/\n\n\n  const onPresence = presence => {\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (!presence_type) presence_type = \"online\";\n\n    if (presence_type !== \"error\") {\n      if (presence_type === \"unavailable\") {\n        // Mark contact as offline\n        this.setState({\n          contactStatus: \"offline\"\n        });\n        console.log(\"contact as offline\");\n      } else {\n        let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n        if (show === \"online\") {\n          // Mark contact as online\n          console.log(\"contact as online\");\n          this.setState({\n            contactStatus: \"online\"\n          });\n        } else if (show === \"away\") {\n          // etc...\n          this.setState({\n            contactStatus: \"away\"\n          });\n        } else if (show === \"dnd\") {\n          // etc...\n          this.setState({\n            contactStatus: \"dnd\"\n          });\n        } else if (show === \"invisible\") {\n          // etc...\n          this.setState({\n            contactStatus: \"invisible\"\n          });\n        }\n      }\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------get contact presence-----------*/\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, showMainPage ? React.createElement(LoginPage, {\n    onConnect: onConnect,\n    connection: connection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }) : null));\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js"],"names":["React","useEffect","useState","LoginPage","TabsSection","Button","RadioButtonList","StatusDetector","$","useSelector","MainPage","showMainPage","state","connection","$pres","$iq","strophe","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","getRoster","sendPriority","handleDisconnect","disconnect","setState","contacts","iq","type","id","c","xmlns","sendIQ","rosterReceived","send","t","up","ns","num","jid","rosterName","mycontacts","find","each","attr","concat","name","window","addHandler","onPresence","onSubscriptionRequest","stanza","showPopUp","getAttribute","to","presence","presence_type","from","contactStatus","show","text"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\n// import \"./style.css\";\n\nconst MainPage = () => {\n    const showMainPage = useSelector(state => state.showMainPage)\n    const connection = useSelector(state => state.connection)\n    const $pres = useSelector(state => state.$pres)\n    const $iq = useSelector(state => state.$iq)\n    const strophe = useSelector(state => state.strophe)\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            // this.setState({\n            //     showMainPage: true,\n            //     jid: this.state.connection.jid\n            // });\n            getRoster();\n            sendPriority();\n        }\n    }\n\n    /*-----------------Log Out Button action----------------=*/\n    const handleDisconnect = () => {\n        connection.disconnect();\n    }\n\n    /*-----------------/Log Out Button action----------------*/\n    /*-----------------Get Contacts List (step1)----------------=*/\n    const getRoster = () => {\n        this.setState({\n            contacts: [],\n            iq: this.state\n                .$iq({type: \"get\", id: \"r1\"})\n                .c(\"query\", {xmlns: \"jabber:iq:roster\"})\n        });\n        connection.sendIQ(this.state.iq, rosterReceived);\n    }\n\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Get priority ----------------*/\n    const sendPriority = () => {\n        this.state.connection.send(\n            this.state.$pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:0\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        this.state.connection.sendIQ(this.state.$iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    }\n\n    /*-----------------Get priority ----------------*/\n\n    /*-----------------Received contacts Time (step2)----------------*/\n    const rosterReceived = (iq) => {\n        let jid;\n        let rosterName;\n        let mycontacts = [];\n        $(iq)\n            .find(\"item\")\n            .each(function () {\n                jid = $(this).attr(\"jid\"); // The jabber_id of your contact\n                if ($(this).attr(\"name\")) {\n                    rosterName = $(this).attr(\"name\");\n                } else {\n                    rosterName = \"\";\n                }\n                // The jabber_id of your contact\n                // You can probably put them in a unordered list and and use their jids as ids.\n                mycontacts = mycontacts.concat({\n                    name: rosterName,\n                    jid: jid\n                });\n            });\n\n        this.setState({\n            contacts: mycontacts\n        });\n        console.log(\"mycontacts\", this.state.contacts)\n        this.state.connection.send(window.$pres());\n\n        this.state.connection.addHandler(\n            this.onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }\n\n    /*-----------------Received contacts (step2)----------------*/\n\n\n    /*----------response to subscription request-----------*/\n    const onSubscriptionRequest = (stanza) => {\n        this.setState({\n            showPopUp: true\n        })\n        if (stanza.getAttribute(\"type\") === \"subscribe\") {\n            // Send a 'subscribed' notification back to accept the incoming\n            // subscription request\n            this.state.connection.send(window.$pres({to: stanza.getAttribute(\"from\"), type: \"subscribed\"}));\n        }\n        return true;\n    }\n\n    /*----------/response to subscription request-----------*/\n\n    /*----------get contact presence-----------*/\n    const onPresence = (presence) => {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n        if (!presence_type) presence_type = \"online\";\n        if (presence_type !== \"error\") {\n            if (presence_type === \"unavailable\") {\n                // Mark contact as offline\n                this.setState({\n                    contactStatus: \"offline\"\n                });\n                console.log(\"contact as offline\");\n\n            } else {\n                let show = $(presence)\n                    .find(\"show\")\n                    .text(); // this is what gives away, dnd, etc.\n                if (show === \"online\") {\n                    // Mark contact as online\n                    console.log(\"contact as online\");\n                    this.setState({\n                        contactStatus: \"online\"\n                    });\n                } else if (show === \"away\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"away\"\n                    });\n                } else if (show === \"dnd\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"dnd\"\n                    });\n                } else if (show === \"invisible\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"invisible\"\n                    });\n                }\n            }\n        }\n\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div className=\"container\">\n                {showMainPage ?\n                    <LoginPage\n                        onConnect={onConnect}\n                        connection={connection}\n                    /> : null}\n            </div>\n        </React.Fragment>\n    );\n\n}\n\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}