{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection); // const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        historyMessages = _useState2[0],\n        setHistoryMessages = _useState2[1];\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        allMessages = _useState4[0],\n        setAllMessages = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageText = _useState6[0],\n        changeMessageText = _useState6[1];\n\n  const _useState7 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        lastActivity = _useState8[0],\n        setLastActivity = _useState8[1];\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let sentMessages,\n        recMessages,\n        history = [],\n        archiveIq = $iq({\n      type: \"set\",\n      id: \"archive1\"\n    }).c(\"query\", {\n      xmlns: \"urn:xmpp:mam:2\"\n    }).c(\"set\", {\n      xmlns: \"http://jabber.org/protocol/rsm\"\n    });\n    connection.mam.query(connection.send(archiveIq), {\n      with: selectedContact,\n      onMessage: function (message) {\n        $(message).each(function () {\n          console.log(\"message\", message);\n\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            recMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            history = history.concat(recMessages);\n          } else if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] !== selectedContact) {\n            sentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            history = history.concat(sentMessages);\n          }\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        setHistoryMessages(history);\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n      }\n    });\n  };\n\n  const handleChangeMsg = event => {\n    changeMessageText(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    let txtJID = selectedContact,\n        txtMsg = messageText,\n        message;\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      console.log(\"txtMsg\", txtMsg);\n      sendMessage(message);\n      console.log(\"type\", typeof allMessages);\n    }\n    connection.addHandler(onMessage, null, \"message\", null, null, null);\n  }; //Sending message to contact\n\n\n  const sendMessage = msg => {\n    let reply = $msg({\n      to: msg.to,\n      from: connection.jid,\n      type: \"chat\",\n      id: \"event1\"\n    }).c(\"body\").t(msg.message).up().c(\"request\", {\n      xmlns: \"urn:xmpp:receipts\"\n    });\n    connection.send(reply.tree());\n    let sentArray = allMessages.item;\n    sentArray.push(msg);\n    setAllMessages(_objectSpread({}, allMessages, {\n      item: sentArray\n    }));\n    console.log(\"all\", allMessages);\n  };\n\n  const listMessages = () => {\n    return allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n      return React.createElement(MessagePopUp, {\n        key: i,\n        sentMsg: item.message,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      });\n    });\n  };\n\n  const onMessage = msg => {\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      setAllMessages(allMessages);\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------------RECENT ACTIVITY------------------*/\n\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, historyMessages.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, listMessages())), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: messageText,\n    onChange: handleChangeMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js"],"names":["React","useEffect","useState","MessagePopUp","$","useSelector","ChatBox","selectedContact","state","rosterStatus","$iq","$msg","connection","item","historyMessages","setHistoryMessages","allMessages","setAllMessages","messageText","changeMessageText","from","time","lastActivity","setLastActivity","getLog","sentMessages","recMessages","history","archiveIq","type","id","c","xmlns","mam","query","send","with","onMessage","message","each","console","log","find","attr","split","text","stamp","concat","onComplete","response","chatDiv","document","querySelector","scrollTo","scrollHeight","handleChangeMsg","event","target","value","handleSubmit","txtJID","txtMsg","undefined","alert","to","Date","sendMessage","addHandler","msg","reply","jid","t","up","tree","sentArray","push","listMessages","length","map","i","getAttribute","elems","getElementsByTagName","innerHTML","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","sendIQ","Math","floor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n    // const showMainPage = useSelector(state => state.showMainPage);\n    const [historyMessages, setHistoryMessages] = useState({item: []});\n    const [allMessages, setAllMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState(\"\");\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n\n\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n    const getLog = () => {\n\n        let sentMessages,\n            recMessages,\n            history = [],\n            archiveIq = $iq({\n                type: \"set\",\n                id: \"archive1\"\n\n            }).c(\"query\", {\n                xmlns: \"urn:xmpp:mam:2\"\n            }).c(\"set\", {xmlns: \"http://jabber.org/protocol/rsm\"});\n\n\n        connection.mam.query(connection.send(archiveIq), {\n            with: selectedContact,\n            onMessage: function (message) {\n                $(message).each(function () {\n                    console.log(\"message\",message)\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        recMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        history = history.concat(recMessages);\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] !== selectedContact\n                    ) {\n                        sentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n\n                        history = history.concat(sentMessages);\n                    }\n                });\n                return true;\n            },\n            onComplete: function (response) {\n                \n                setHistoryMessages(history)\n                let chatDiv = document.querySelector(\".all-messages\");\n                chatDiv.scrollTo(0, chatDiv.scrollHeight);\n            }\n        });\n    };\n\n    const handleChangeMsg = (event) => {\n        changeMessageText(event.target.value)\n    };\n\n    const handleSubmit = () => {\n\n        let txtJID = selectedContact,\n            txtMsg = messageText,\n            message;\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            console.log(\"txtMsg\", txtMsg);\n            sendMessage(message);\n            console.log(\"type\", typeof (allMessages))\n        }\n        connection.addHandler(\n            onMessage,\n            null,\n            \"message\",\n            null,\n            null,\n            null\n        );\n    };\n\n    //Sending message to contact\n    const sendMessage = (msg) => {\n        let reply = $msg({\n            to: msg.to,\n            from: connection.jid,\n            type: \"chat\",\n            id: \"event1\"\n        })\n            .c(\"body\")\n            .t(msg.message)\n            .up()\n            .c(\"request\", {xmlns: \"urn:xmpp:receipts\"});\n        connection.send(reply.tree());\n\n        let sentArray = allMessages.item;\n        sentArray.push(msg);\n        setAllMessages({\n            ...allMessages,\n            item: sentArray\n        });\n\n        console.log(\"all\", allMessages)\n\n    };\n\n    const listMessages = () => {\n\n        return (\n            allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.message}\n                        type={item.type}\n                    />\n                );\n            }))\n\n    }\n    const onMessage = (msg) => {\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            setAllMessages(allMessages);\n\n        }\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n                    {historyMessages.map((item, i) => {\n                        return (\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.text}\n                                type={item.type}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"messages\">\n                    {listMessages()}\n                </div>\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={messageText}\n                    onChange={handleChangeMsg}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}