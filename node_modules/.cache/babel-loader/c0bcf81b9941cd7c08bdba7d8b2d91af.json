{"ast":null,"code":"import _defineProperty from\"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import React,{useDebugValue,useEffect,useState}from\"react\";import MessagePopUp from\"../message-popup\";import\"./style.css\";import $ from\"jquery\";import{useDispatch,useSelector}from\"react-redux\";import ChatInput from\"../chat-input\";import{scrollToBottom}from\"../../helper/functions\";var ChatBox=function ChatBox(){var selectedContact=useSelector(function(state){return state.selectedContact;});var historyMessages=useSelector(function(state){return state.chatLog;});var newMessage=useSelector(function(state){return state.newMessage;});var strophe=useSelector(function(state){return state.strophe;});var rosterStatus=useSelector(function(state){return state.rosterStatus;});var $iq=useSelector(function(state){return state.$iq;});var connection=useSelector(function(state){return state.connection;});var _useState=useState({item:[]}),_useState2=_slicedToArray(_useState,2),recMessages=_useState2[0],setRecMessages=_useState2[1];var _useState3=useState({txt:''}),_useState4=_slicedToArray(_useState3,2),messageText=_useState4[0],changeMessageText=_useState4[1];var _useState5=useState({from:'',time:''}),_useState6=_slicedToArray(_useState5,2),lastActivity=_useState6[0],setLastActivity=_useState6[1];var dispatch=useDispatch();var contacts=useSelector(function(state){return state.contacts;});var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),inputVal=_useState8[0],clearInputVal=_useState8[1];var _useState9=useState({item:[]}),_useState10=_slicedToArray(_useState9,2),messageList=_useState10[0],setMessageList=_useState10[1];useEffect(function(){getLog();},[selectedContact]);var getLog=function getLog(){var mySentMessages,myRecMessages,recHistory=[],sentHistory=[];connection.mam.query(connection.jid.split(\"/\",1)[0],{with:selectedContact,onMessage:function onMessage(message){console.log(\"mam\");$(message).each(function(){if($(this).find(\"forwarded message\").attr(\"from\").split(\"/\",1)[0]===selectedContact){myRecMessages={text:$(this).find(\"forwarded message body\").text(),stamp:$(this).find(\"delay\").attr(\"stamp\"),type:\"rec\"};recHistory=messageList.item;recHistory.push(myRecMessages);setMessageList(_objectSpread({},messageList,{item:recHistory}));}else if($(this).find(\"forwarded message\").attr(\"to\").split(\"/\",1)[0]===selectedContact){mySentMessages={text:$(this).find(\"forwarded message body\").text(),stamp:$(this).find(\"delay\").attr(\"stamp\"),type:\"sent\"};sentHistory=messageList.item;sentHistory.push(mySentMessages);setMessageList(_objectSpread({},messageList,{item:sentHistory}));}});dispatch({historyMessages:sentHistory,type:\"FETCH_HISTORY_MESSAGES\"});return true;},onComplete:function onComplete(response){scrollToBottom();}});};useEffect(function(){scrollToBottom();},[historyMessages]);/*----------------RECENT ACTIVITY------------------*/var onLastActivity=function onLastActivity(iq){var from=$(iq).attr(\"from\");// the jabber_id of the contact\\+\nvar lastActivityObj;var errorType=$(iq).attr('type');$(iq).find(\"query\").each(function(){if(errorType===\"result\"){var lastActivityTime=$(iq).find(\"query\").attr('seconds');lastActivityObj={from:from,time:lastActivityTime,type:errorType,errorMessage:null};setLastActivity(_objectSpread({},lastActivity,{from:lastActivityObj.from,time:lastActivityObj.time,type:lastActivityObj.type,errorMessage:lastActivityObj.errorMessage}));}if(errorType===\"error\"){var errorMessage=$(iq).find(\"text\").text();lastActivityObj={from:from,time:null,type:errorType,errorMessage:errorMessage};setLastActivity(_objectSpread({},lastActivity,{from:lastActivityObj.from,time:lastActivityObj.time,type:lastActivityObj.type,errorMessage:lastActivityObj.errorMessage}));}});return true;};var getLastActivity=function getLastActivity(){var iq=$iq({type:\"get\",from:connection.jid,to:selectedContact,id:\"last1\"}).c(\"query\",{xmlns:\"jabber:iq:last\"});connection.sendIQ(iq);connection.addHandler(onLastActivity,null,\"iq\",null,null,null);};useEffect(function(){getLastActivity();},[selectedContact]);useEffect(function(){getLastActivity();},[rosterStatus]);useEffect(function(){console.log('*****************************************');setMessageList(_objectSpread({},messageList,{item:historyMessages}));},[newMessage]);var onInputChange=function onInputChange(event){changeMessageText(_objectSpread({},messageText,{txt:event.target.value}));clearInputVal(_objectSpread({},inputVal,{txt:event.target.value}));};var onMessageSend=function onMessageSend(){clearInputVal({txt:''});};var renderList=function renderList(){return historyMessages.length>0?historyMessages.map(function(item,i){return React.createElement(MessagePopUp,{key:i,sentMsg:item.text,type:item.type});}):null;};return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"userInfo-bar\"},React.createElement(\"p\",{className:\"userId\"},selectedContact),React.createElement(\"p\",null,lastActivity.type===\"error\"?\"Last seen recently\":lastActivity.time===\"0\"?\"online\":lastActivity.time<60?\"last seen \"+lastActivity.time+\" seconds ago\":Math.floor(lastActivity.time/60)<60?\"last seen \"+Math.floor(lastActivity.time/60)+\" minutes ago\":Math.floor(lastActivity.time/3600)<24?\"last seen \"+Math.floor(lastActivity.time/3600)+\" hours ago\":Math.floor(lastActivity.time/86400)<7?\"last seen \"+Math.floor(lastActivity.time/86400)+\" days ago\":\"last seen over a week ago\")),React.createElement(\"div\",{className:\"all-messages\"},React.createElement(\"div\",{className:\"archive\"},renderList())),React.createElement(\"div\",{className:\"textbox\"},React.createElement(ChatInput,{messageText:messageText,onInputChange:onInputChange})));};export default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useDebugValue","useEffect","useState","MessagePopUp","$","useDispatch","useSelector","ChatInput","scrollToBottom","ChatBox","selectedContact","state","historyMessages","chatLog","newMessage","strophe","rosterStatus","$iq","connection","item","recMessages","setRecMessages","txt","messageText","changeMessageText","from","time","lastActivity","setLastActivity","dispatch","contacts","inputVal","clearInputVal","messageList","setMessageList","getLog","mySentMessages","myRecMessages","recHistory","sentHistory","mam","query","jid","split","with","onMessage","message","console","log","each","find","attr","text","stamp","type","push","onComplete","response","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","to","id","c","xmlns","sendIQ","addHandler","onInputChange","event","target","value","onMessageSend","renderList","length","map","i","Math","floor"],"mappings":"khCAAA,MAAOA,CAAAA,KAAP,EAAeC,aAAf,CAA8BC,SAA9B,CAAyCC,QAAzC,KAAwD,OAAxD,CACA,MAAOC,CAAAA,YAAP,KAAyB,kBAAzB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CACA,OAAQC,WAAR,CAAqBC,WAArB,KAAuC,aAAvC,CACA,MAAOC,CAAAA,SAAP,KAAsB,eAAtB,CACA,OAAQC,cAAR,KAA6B,wBAA7B,CAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAClB,GAAMC,CAAAA,eAAe,CAAGJ,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACD,eAAV,EAAN,CAAnC,CACA,GAAME,CAAAA,eAAe,CAAGN,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACE,OAAV,EAAN,CAAnC,CACA,GAAMC,CAAAA,UAAU,CAAGR,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACG,UAAV,EAAN,CAA9B,CACA,GAAMC,CAAAA,OAAO,CAAGT,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACI,OAAV,EAAN,CAA3B,CACA,GAAMC,CAAAA,YAAY,CAAGV,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACK,YAAV,EAAN,CAAhC,CACA,GAAMC,CAAAA,GAAG,CAAGX,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACM,GAAV,EAAN,CAAvB,CACA,GAAMC,CAAAA,UAAU,CAAGZ,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACO,UAAV,EAAN,CAA9B,CAPkB,cAQoBhB,QAAQ,CAAC,CAACiB,IAAI,CAAE,EAAP,CAAD,CAR5B,wCAQXC,WARW,eAQEC,cARF,8BASuBnB,QAAQ,CAAC,CAACoB,GAAG,CAAE,EAAN,CAAD,CAT/B,yCASXC,WATW,eASEC,iBATF,8BAUsBtB,QAAQ,CAAC,CAACuB,IAAI,CAAE,EAAP,CAAWC,IAAI,CAAE,EAAjB,CAAD,CAV9B,yCAUXC,YAVW,eAUGC,eAVH,eAWlB,GAAMC,CAAAA,QAAQ,CAAGxB,WAAW,EAA5B,CACA,GAAMyB,CAAAA,QAAQ,CAAGxB,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACmB,QAAV,EAAN,CAA5B,CAZkB,eAagB5B,QAAQ,CAAC,EAAD,CAbxB,yCAaX6B,QAbW,eAaDC,aAbC,8BAeoB9B,QAAQ,CAAC,CAACiB,IAAI,CAAE,EAAP,CAAD,CAf5B,0CAeXc,WAfW,gBAeEC,cAfF,gBAkBlBjC,SAAS,CAAC,UAAM,CACZkC,MAAM,GACT,CAFQ,CAEN,CAACzB,eAAD,CAFM,CAAT,CAIA,GAAMyB,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjB,GAAIC,CAAAA,cAAJ,CACIC,aADJ,CAEIC,UAAU,CAAG,EAFjB,CAGIC,WAAW,CAAG,EAHlB,CAKArB,UAAU,CAACsB,GAAX,CAAeC,KAAf,CAAqBvB,UAAU,CAACwB,GAAX,CAAeC,KAAf,CAAqB,GAArB,CAA0B,CAA1B,EAA6B,CAA7B,CAArB,CAAsD,CAClDC,IAAI,CAAElC,eAD4C,CAElDmC,SAAS,CAAE,mBAAUC,OAAV,CAAmB,CAC1BC,OAAO,CAACC,GAAR,CAAY,KAAZ,EACA5C,CAAC,CAAC0C,OAAD,CAAD,CAAWG,IAAX,CAAgB,UAAY,CAExB,GACI7C,CAAC,CAAC,IAAD,CAAD,CACK8C,IADL,CACU,mBADV,EAEKC,IAFL,CAEU,MAFV,EAGKR,KAHL,CAGW,GAHX,CAGgB,CAHhB,EAGmB,CAHnB,IAG0BjC,eAJ9B,CAKE,CACE2B,aAAa,CAAG,CACZe,IAAI,CAAEhD,CAAC,CAAC,IAAD,CAAD,CACD8C,IADC,CACI,wBADJ,EAEDE,IAFC,EADM,CAIZC,KAAK,CAAEjD,CAAC,CAAC,IAAD,CAAD,CACF8C,IADE,CACG,OADH,EAEFC,IAFE,CAEG,OAFH,CAJK,CAOZG,IAAI,CAAE,KAPM,CAAhB,CASAhB,UAAU,CAAGL,WAAW,CAACd,IAAzB,CACAmB,UAAU,CAACiB,IAAX,CAAgBlB,aAAhB,EACAH,cAAc,kBAAKD,WAAL,EAAkBd,IAAI,CAAEmB,UAAxB,GAAd,CACH,CAlBD,IAkBO,IACHlC,CAAC,CAAC,IAAD,CAAD,CACK8C,IADL,CACU,mBADV,EAEKC,IAFL,CAEU,IAFV,EAGKR,KAHL,CAGW,GAHX,CAGgB,CAHhB,EAGmB,CAHnB,IAG0BjC,eAJvB,CAKL,CACE0B,cAAc,CAAG,CACbgB,IAAI,CAAEhD,CAAC,CAAC,IAAD,CAAD,CACD8C,IADC,CACI,wBADJ,EAEDE,IAFC,EADO,CAIbC,KAAK,CAAEjD,CAAC,CAAC,IAAD,CAAD,CACF8C,IADE,CACG,OADH,EAEFC,IAFE,CAEG,OAFH,CAJM,CAObG,IAAI,CAAE,MAPO,CAAjB,CASAf,WAAW,CAAGN,WAAW,CAACd,IAA1B,CACAoB,WAAW,CAACgB,IAAZ,CAAiBnB,cAAjB,EACAF,cAAc,kBAAKD,WAAL,EAAkBd,IAAI,CAAEoB,WAAxB,GAAd,CACH,CAGJ,CAzCD,EA2CAV,QAAQ,CAAC,CAACjB,eAAe,CAAE2B,WAAlB,CAA+Be,IAAI,CAAE,wBAArC,CAAD,CAAR,CAEA,MAAO,KAAP,CACH,CAlDiD,CAmDlDE,UAAU,CAAE,oBAAUC,QAAV,CAAoB,CAC5BjD,cAAc,GAEjB,CAtDiD,CAAtD,EAwDH,CA9DD,CAgEAP,SAAS,CAAC,UAAM,CACZO,cAAc,GAEjB,CAHQ,CAGN,CAACI,eAAD,CAHM,CAAT,CAMA,qDACA,GAAM8C,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,EAAD,CAAQ,CAE3B,GAAIlC,CAAAA,IAAI,CAAGrB,CAAC,CAACuD,EAAD,CAAD,CAAMR,IAAN,CAAW,MAAX,CAAX,CAA+B;AAC/B,GAAIS,CAAAA,eAAJ,CACA,GAAIC,CAAAA,SAAS,CAAGzD,CAAC,CAACuD,EAAD,CAAD,CAAMR,IAAN,CAAW,MAAX,CAAhB,CACA/C,CAAC,CAACuD,EAAD,CAAD,CAAMT,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAyB,UAAY,CAEjC,GAAIY,SAAS,GAAK,QAAlB,CAA4B,CACxB,GAAIC,CAAAA,gBAAgB,CAAG1D,CAAC,CAACuD,EAAD,CAAD,CAAMT,IAAN,CAAW,OAAX,EAAoBC,IAApB,CAAyB,SAAzB,CAAvB,CACAS,eAAe,CAAG,CACdnC,IAAI,CAAEA,IADQ,CAEdC,IAAI,CAAEoC,gBAFQ,CAGdR,IAAI,CAAEO,SAHQ,CAIdE,YAAY,CAAE,IAJA,CAAlB,CAMAnC,eAAe,kBACRD,YADQ,EACMF,IAAI,CAAEmC,eAAe,CAACnC,IAD5B,CAEXC,IAAI,CAAEkC,eAAe,CAAClC,IAFX,CAGX4B,IAAI,CAAEM,eAAe,CAACN,IAHX,CAIXS,YAAY,CAAEH,eAAe,CAACG,YAJnB,GAAf,CAMH,CACD,GAAIF,SAAS,GAAK,OAAlB,CAA2B,CACvB,GAAIE,CAAAA,YAAY,CAAG3D,CAAC,CAACuD,EAAD,CAAD,CAAMT,IAAN,CAAW,MAAX,EAAmBE,IAAnB,EAAnB,CACAQ,eAAe,CAAG,CACdnC,IAAI,CAAEA,IADQ,CAEdC,IAAI,CAAE,IAFQ,CAGd4B,IAAI,CAAEO,SAHQ,CAIdE,YAAY,CAAEA,YAJA,CAAlB,CAMAnC,eAAe,kBACRD,YADQ,EAEXF,IAAI,CAAEmC,eAAe,CAACnC,IAFX,CAGXC,IAAI,CAAEkC,eAAe,CAAClC,IAHX,CAIX4B,IAAI,CAAEM,eAAe,CAACN,IAJX,CAKXS,YAAY,CAAEH,eAAe,CAACG,YALnB,GAAf,CAQH,CAEJ,CAnCD,EAoCA,MAAO,KAAP,CAEH,CA3CD,CA4CA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,GAAML,CAAAA,EAAE,CAAG1C,GAAG,CAAC,CACXqC,IAAI,CAAE,KADK,CAEX7B,IAAI,CAAEP,UAAU,CAACwB,GAFN,CAGXuB,EAAE,CAAEvD,eAHO,CAIXwD,EAAE,CAAE,OAJO,CAAD,CAAH,CAKRC,CALQ,CAKN,OALM,CAKG,CAACC,KAAK,CAAE,gBAAR,CALH,CAAX,CAMAlD,UAAU,CAACmD,MAAX,CAAkBV,EAAlB,EACAzC,UAAU,CAACoD,UAAX,CAAsBZ,cAAtB,CAAsC,IAAtC,CAA4C,IAA5C,CAAkD,IAAlD,CAAwD,IAAxD,CAA8D,IAA9D,EACH,CATD,CAUAzD,SAAS,CAAC,UAAM,CACZ+D,eAAe,GAClB,CAFQ,CAEN,CAACtD,eAAD,CAFM,CAAT,CAIAT,SAAS,CAAC,UAAM,CACZ+D,eAAe,GAClB,CAFQ,CAEN,CAAChD,YAAD,CAFM,CAAT,CAIAf,SAAS,CAAC,UAAM,CACZ8C,OAAO,CAACC,GAAR,CAAY,2CAAZ,EACAd,cAAc,kBACPD,WADO,EAEVd,IAAI,CAAEP,eAFI,GAAd,CAKH,CAPQ,CAON,CAACE,UAAD,CAPM,CAAT,CASA,GAAMyD,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC7BhD,iBAAiB,kBACVD,WADU,EAEbD,GAAG,CAAEkD,KAAK,CAACC,MAAN,CAAaC,KAFL,GAAjB,CAIA1C,aAAa,kBACND,QADM,EAETT,GAAG,CAAEkD,KAAK,CAACC,MAAN,CAAaC,KAFT,GAAb,CAIH,CATD,CAUA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACxB3C,aAAa,CAAC,CAACV,GAAG,CAAE,EAAN,CAAD,CAAb,CACH,CAFD,CAGA,GAAMsD,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACrB,MACIhE,CAAAA,eAAe,CAACiE,MAAhB,CAAyB,CAAzB,CAA6BjE,eAAe,CAACkE,GAAhB,CAAoB,SAAC3D,IAAD,CAAO4D,CAAP,CAAa,CAC1D,MACI,qBAAC,YAAD,EACI,GAAG,CAAEA,CADT,CAEI,OAAO,CAAE5D,IAAI,CAACiC,IAFlB,CAGI,IAAI,CAAEjC,IAAI,CAACmC,IAHf,EADJ,CAOH,CAR4B,CAA7B,CAQK,IATT,CAWH,CAZD,CAaA,MACI,qBAAC,KAAD,CAAO,QAAP,MACI,2BAAK,SAAS,CAAC,cAAf,EACI,yBAAG,SAAS,CAAC,QAAb,EAAuB5C,eAAvB,CADJ,CAEI,6BAAIiB,YAAY,CAAC2B,IAAb,GAAsB,OAAtB,CAAgC,oBAAhC,CAAuD3B,YAAY,CAACD,IAAb,GAAsB,GAAtB,CAA4B,QAA5B,CACrDC,YAAY,CAACD,IAAb,CAAoB,EAApB,CAAyB,aAAeC,YAAY,CAACD,IAA5B,CAAmC,cAA5D,CACIsD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,EAA/B,EAAqC,EAArC,CAA0C,aAAesD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,EAA/B,CAAf,CAAoD,cAA9F,CACIsD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,IAA/B,EAAuC,EAAvC,CAA4C,aAAesD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,IAA/B,CAAf,CAAsD,YAAlG,CACIsD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,KAA/B,EAAwC,CAAxC,CAA4C,aAAesD,IAAI,CAACC,KAAL,CAAWtD,YAAY,CAACD,IAAb,CAAoB,KAA/B,CAAf,CAAuD,WAAnG,CAAiH,2BAJnI,CAFJ,CADJ,CAeI,2BAAK,SAAS,CAAC,cAAf,EACI,2BAAK,SAAS,CAAC,SAAf,EAGQkD,UAAU,EAHlB,CADJ,CAfJ,CAyBI,2BAAK,SAAS,CAAC,SAAf,EACI,oBAAC,SAAD,EAAW,WAAW,CAAErD,WAAxB,CAAqC,aAAa,CAAEgD,aAApD,EADJ,CAzBJ,CADJ,CA+BH,CA7ND,CAgOA,cAAe9D,CAAAA,OAAf","sourcesContent":["import React, {useDebugValue, useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ChatInput from \"../chat-input\";\nimport {scrollToBottom} from \"../../helper/functions\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const historyMessages = useSelector(state => state.chatLog);\n    const newMessage = useSelector(state => state.newMessage);\n    const strophe = useSelector(state => state.strophe);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const connection = useSelector(state => state.connection);\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState({txt: ''});\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const dispatch = useDispatch();\n    const contacts = useSelector(state => state.contacts);\n    const [inputVal, clearInputVal] = useState('');\n\n    const [messageList, setMessageList] = useState({item: []});\n\n\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n    const getLog = () => {\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [];\n\n        connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = messageList.item;\n                        recHistory.push(myRecMessages);\n                        setMessageList({...messageList, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = messageList.item;\n                        sentHistory.push(mySentMessages);\n                        setMessageList({...messageList, item: sentHistory});\n                    }\n\n\n                });\n\n                dispatch({historyMessages: sentHistory, type: \"FETCH_HISTORY_MESSAGES\"});\n\n                return true;\n            },\n            onComplete: function (response) {\n                scrollToBottom();\n\n            }\n        });\n    };\n\n    useEffect(() => {\n        scrollToBottom();\n\n    }, [historyMessages])\n\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    useEffect(() => {\n        console.log('*****************************************')\n        setMessageList({\n            ...messageList,\n            item: historyMessages\n        })\n\n    }, [newMessage]);\n\n    const onInputChange = (event) => {\n        changeMessageText({\n            ...messageText,\n            txt: event.target.value\n        })\n        clearInputVal({\n            ...inputVal,\n            txt: event.target.value\n        })\n    };\n    const onMessageSend = () => {\n        clearInputVal({txt: ''})\n    };\n    const renderList = () => {\n        return (\n            historyMessages.length > 0 ? historyMessages.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.text}\n                        type={item.type}\n                    />\n                );\n            }) : null\n        )\n    };\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n\n                    {\n                        renderList()\n                    }\n                </div>\n\n            </div>\n\n            <div className=\"textbox\">\n                <ChatInput messageText={messageText} onInputChange={onInputChange}/>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}