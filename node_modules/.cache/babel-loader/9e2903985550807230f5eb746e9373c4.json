{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const newMessage = useSelector(state => state.newMessage);\n  const strophe = useSelector(state => state.strophe);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection); // const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        historyMessages = _useState2[0],\n        setHistoryMessages = _useState2[1]; // const [newMessage, getNewMessage] = useState(\"\");\n\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        allMessages = _useState4[0],\n        setAllMessages = _useState4[1];\n\n  const _useState5 = useState({\n    item: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        recMessages = _useState6[0],\n        setRecMessages = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        messageText = _useState8[0],\n        changeMessageText = _useState8[1];\n\n  const _useState9 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        lastActivity = _useState10[0],\n        setLastActivity = _useState10[1];\n\n  const dispatch = useDispatch();\n\n  const scrollToBottom = () => {\n    let chatDiv = document.querySelector(\".all-messages\");\n    chatDiv.scrollTo(0, chatDiv.scrollHeight);\n    console.log(\"hi\");\n  };\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let mySentMessages,\n        myRecMessages,\n        recHistory = [],\n        sentHistory = [];\n    connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n      with: selectedContact,\n      onMessage: function (message) {\n        console.log(\"mam\");\n        $(message).each(function () {\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            myRecMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            recHistory = historyMessages.item;\n            recHistory.push(myRecMessages);\n            setHistoryMessages(_objectSpread({}, historyMessages, {\n              item: recHistory\n            }));\n          } else if ($(this).find(\"forwarded message\").attr(\"to\").split(\"/\", 1)[0] === selectedContact) {\n            mySentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            sentHistory = historyMessages.item;\n            sentHistory.push(mySentMessages);\n            setHistoryMessages(_objectSpread({}, historyMessages, {\n              item: sentHistory\n            }));\n          }\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        // setHistoryMessages(history)\n        scrollToBottom();\n      }\n    });\n  };\n\n  const handleChangeMsg = event => {\n    changeMessageText(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    console.log(\"selectedContact\", selectedContact);\n    let txtJID = selectedContact,\n        txtMsg = messageText,\n        message,\n        sents = [];\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      let reply = $msg({\n        to: message.to,\n        from: connection.jid,\n        type: \"chat\",\n        id: \"message-1\"\n      }).c(\"body\").t(message.message);\n      connection.send(reply.tree());\n      const text = message.message;\n      dispatch({\n        text,\n        type: 'GET_NEW_MESSAGE'\n      });\n      console.log(\"reply\", reply);\n      console.log(\"connection\", connection);\n      console.log(reply.tree());\n      scrollToBottom();\n      sents = allMessages.item;\n      sents.push(message);\n      setAllMessages(_objectSpread({}, allMessages, {\n        item: sents\n      }));\n      console.log(\"allMessages\", allMessages);\n    }\n  };\n\n  useEffect(() => {\n    connection.addHandler(onMessage, null, \"message\", null, null);\n  }, [newMessage]);\n\n  const listMessages = () => {\n    return allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n      return React.createElement(MessagePopUp, {\n        key: i,\n        sentMsg: item.message,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      });\n    });\n  };\n\n  const test = char => {\n    console.log(\"test\", char);\n  };\n\n  const onMessage = msg => {\n    console.log(msg); // let from = msg.getAttribute(\"from\");\n    // let type = msg.getAttribute(\"type\");\n    // let elems = msg.getElementsByTagName(\"body\");\n    // let recs ;\n    // if (type === \"error\") {\n    //     alert(\"An error occured! \");\n    //     return;\n    // }\n    // if (type === \"chat\") {\n    //     let message = {\n    //         from: from,\n    //         message: elems[0].innerHTML,\n    //         time: new Date(),\n    //         type: \"rec\"\n    //     };\n    //     recs = recMessages.item;\n    //     recs.push(message);\n    //     setRecMessages({...recMessages, item: recs});\n    // let recArray = allMessages.item;\n    // console.log(\"recArray1\", recArray)\n    //\n    // recArray.push(message);\n    // console.log(\"recArray2\", recArray)\n    // setAllMessages({\n    //     ...allMessages,\n    //     item: recArray\n    // });\n    // console.log(\"setAllMessages\", allMessages)\n    // }\n    // return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------------RECENT ACTIVITY------------------*/\n\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, historyMessages.item.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, listMessages())), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: messageText,\n    onChange: handleChangeMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useEffect","useState","MessagePopUp","$","useSelector","useDispatch","ChatBox","selectedContact","state","newMessage","strophe","rosterStatus","$iq","$msg","connection","item","historyMessages","setHistoryMessages","allMessages","setAllMessages","recMessages","setRecMessages","messageText","changeMessageText","from","time","lastActivity","setLastActivity","dispatch","scrollToBottom","chatDiv","document","querySelector","scrollTo","scrollHeight","console","log","getLog","mySentMessages","myRecMessages","recHistory","sentHistory","mam","query","jid","split","with","onMessage","message","each","find","attr","text","stamp","type","push","onComplete","response","handleChangeMsg","event","target","value","handleSubmit","txtJID","txtMsg","sents","undefined","alert","to","Date","reply","id","c","t","send","tree","addHandler","listMessages","length","map","i","test","char","msg","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","xmlns","sendIQ","Math","floor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\nimport {useDispatch} from \"react-redux\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const newMessage = useSelector(state => state.newMessage);\n    const strophe = useSelector(state => state.strophe);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n    // const showMainPage = useSelector(state => state.showMainPage);\n    const [historyMessages, setHistoryMessages] = useState({item: []});\n    // const [newMessage, getNewMessage] = useState(\"\");\n    const [allMessages, setAllMessages] = useState({item: []});\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState(\"\");\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const dispatch = useDispatch();\n    const scrollToBottom = () => {\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n        console.log(\"hi\")\n    };\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n    const getLog = () => {\n\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [];\n\n        connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = historyMessages.item;\n                        recHistory.push(myRecMessages);\n                        setHistoryMessages({...historyMessages, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = historyMessages.item;\n                        sentHistory.push(mySentMessages);\n                        setHistoryMessages({...historyMessages, item: sentHistory});\n                    }\n                });\n                return true;\n            },\n            onComplete: function (response) {\n                // setHistoryMessages(history)\n                scrollToBottom();\n\n            }\n        });\n    };\n\n    const handleChangeMsg = (event) => {\n        changeMessageText(event.target.value)\n    };\n\n    const handleSubmit = () => {\n\n        console.log(\"selectedContact\", selectedContact);\n        let txtJID = selectedContact,\n            txtMsg = messageText,\n            message,\n            sents = [];\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            let reply = $msg({\n                to: message.to,\n                from: connection.jid,\n                type: \"chat\",\n                id: \"message-1\"\n            })\n                .c(\"body\")\n                .t(message.message);\n            connection.send(reply.tree());\n            const text = message.message\n            dispatch({text, type: 'GET_NEW_MESSAGE'})\n            console.log(\"reply\", reply);\n            console.log(\"connection\", connection);\n            console.log(reply.tree());\n\n            scrollToBottom();\n\n            sents = allMessages.item;\n            sents.push(message);\n            setAllMessages({...allMessages, item: sents});\n            console.log(\"allMessages\", allMessages)\n        }\n\n    };\n    useEffect(() => {\n        connection.addHandler(onMessage, null, \"message\", null, null);\n    }, [newMessage]);\n    const listMessages = () => {\n\n        return (\n\n            allMessages.item.length === 0 ? '' : allMessages.item.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.message}\n                        type={item.type}\n                    />\n                );\n            }))\n\n    };\n    const test = (char) => {\n        console.log(\"test\", char)\n    };\n\n    const onMessage = (msg) => {\n\n        console.log(msg)\n        // let from = msg.getAttribute(\"from\");\n        // let type = msg.getAttribute(\"type\");\n        // let elems = msg.getElementsByTagName(\"body\");\n        // let recs ;\n        // if (type === \"error\") {\n        //     alert(\"An error occured! \");\n        //     return;\n        // }\n        // if (type === \"chat\") {\n        //     let message = {\n        //         from: from,\n        //         message: elems[0].innerHTML,\n        //         time: new Date(),\n        //         type: \"rec\"\n        //     };\n        //     recs = recMessages.item;\n        //     recs.push(message);\n        //     setRecMessages({...recMessages, item: recs});\n\n\n        // let recArray = allMessages.item;\n        // console.log(\"recArray1\", recArray)\n        //\n        // recArray.push(message);\n        // console.log(\"recArray2\", recArray)\n\n        // setAllMessages({\n        //     ...allMessages,\n        //     item: recArray\n        // });\n        // console.log(\"setAllMessages\", allMessages)\n\n\n        // }\n        // return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n                    {historyMessages.item.map((item, i) => {\n                        return (\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.text}\n                                type={item.type}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"messages\">\n                    {listMessages()}\n\n                </div>\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={messageText}\n                    onChange={handleChangeMsg}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}