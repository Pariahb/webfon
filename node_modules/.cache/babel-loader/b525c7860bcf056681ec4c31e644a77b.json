{"ast":null,"code":"const JsSIP_C = require('../Constants');\n\nconst Transactions = require('../Transactions');\n\nconst RTCSession = require('../RTCSession');\n\nconst RequestSender = require('../RequestSender'); // Default event handlers.\n\n\nconst EventHandlers = {\n  onRequestTimeout: () => {},\n  onTransportError: () => {},\n  onSuccessResponse: () => {},\n  onErrorResponse: () => {},\n  onAuthenticated: () => {},\n  onDialogError: () => {}\n};\nmodule.exports = class DialogRequestSender {\n  constructor(dialog, request, eventHandlers) {\n    this._dialog = dialog;\n    this._ua = dialog._ua;\n    this._request = request;\n    this._eventHandlers = eventHandlers; // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n\n    this._reattempt = false;\n    this._reattemptTimer = null; // Define the undefined handlers.\n\n    for (const handler in EventHandlers) {\n      if (Object.prototype.hasOwnProperty.call(EventHandlers, handler)) {\n        if (!this._eventHandlers[handler]) {\n          this._eventHandlers[handler] = EventHandlers[handler];\n        }\n      }\n    }\n  }\n\n  get request() {\n    return this._request;\n  }\n\n  send() {\n    const request_sender = new RequestSender(this._ua, this._request, {\n      onRequestTimeout: () => {\n        this._eventHandlers.onRequestTimeout();\n      },\n      onTransportError: () => {\n        this._eventHandlers.onTransportError();\n      },\n      onAuthenticated: request => {\n        this._eventHandlers.onAuthenticated(request);\n      },\n      onReceiveResponse: response => {\n        this._receiveResponse(response);\n      }\n    });\n    request_sender.send(); // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-.\n\n    if ((this._request.method === JsSIP_C.INVITE || this._request.method === JsSIP_C.UPDATE && this._request.body) && request_sender.clientTransaction.state !== Transactions.C.STATUS_TERMINATED) {\n      this._dialog.uac_pending_reply = true;\n\n      const stateChanged = () => {\n        if (request_sender.clientTransaction.state === Transactions.C.STATUS_ACCEPTED || request_sender.clientTransaction.state === Transactions.C.STATUS_COMPLETED || request_sender.clientTransaction.state === Transactions.C.STATUS_TERMINATED) {\n          request_sender.clientTransaction.removeListener('stateChanged', stateChanged);\n          this._dialog.uac_pending_reply = false;\n        }\n      };\n\n      request_sender.clientTransaction.on('stateChanged', stateChanged);\n    }\n  }\n\n  _receiveResponse(response) {\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this._eventHandlers.onDialogError(response);\n    } else if (response.method === JsSIP_C.INVITE && response.status_code === 491) {\n      if (this._reattempt) {\n        if (response.status_code >= 200 && response.status_code < 300) {\n          this._eventHandlers.onSuccessResponse(response);\n        } else if (response.status_code >= 300) {\n          this._eventHandlers.onErrorResponse(response);\n        }\n      } else {\n        this._request.cseq.value = this._dialog.local_seqnum += 1;\n        this._reattemptTimer = setTimeout(() => {\n          // TODO: look at dialog state instead.\n          if (this._dialog.owner.status !== RTCSession.C.STATUS_TERMINATED) {\n            this._reattempt = true;\n\n            this._request_sender.send();\n          }\n        }, 1000);\n      }\n    } else if (response.status_code >= 200 && response.status_code < 300) {\n      this._eventHandlers.onSuccessResponse(response);\n    } else if (response.status_code >= 300) {\n      this._eventHandlers.onErrorResponse(response);\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}