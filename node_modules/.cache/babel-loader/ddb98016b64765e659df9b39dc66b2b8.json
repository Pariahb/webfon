{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\"; // import \"./style.css\";\n\nconst MainPage = () => {\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n\n  const _useState = useState(showMainPage),\n        _useState2 = _slicedToArray(_useState, 2),\n        showPage = _useState2[0],\n        setShowPage = _useState2[1]; //strophe connection process\n\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\"); // this.setState({\n      //     showMainPage: true,\n      //     jid: this.state.connection.jid\n      // });\n    }\n  };\n  /*-----------------Log Out Button action----------------=*/\n\n\n  const handleDisconnect = () => {\n    connection.disconnect();\n  };\n  /*-----------------/Log Out Button action----------------*/\n\n\n  useEffect(() => {\n    setShowPage(showMainPage);\n  }, [showMainPage]);\n  /*----------response to subscription request-----------*/\n\n  const onSubscriptionRequest = stanza => {\n    this.setState({\n      showPopUp: true\n    });\n\n    if (stanza.getAttribute(\"type\") === \"subscribe\") {\n      // Send a 'subscribed' notification back to accept the incoming\n      // subscription request\n      this.state.connection.send(window.$pres({\n        to: stanza.getAttribute(\"from\"),\n        type: \"subscribed\"\n      }));\n    }\n\n    return true;\n  };\n  /*----------/response to subscription request-----------*/\n\n  /*----------get contact presence-----------*/\n\n\n  const onPresence = presence => {\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (!presence_type) presence_type = \"online\";\n\n    if (presence_type !== \"error\") {\n      if (presence_type === \"unavailable\") {\n        // Mark contact as offline\n        this.setState({\n          contactStatus: \"offline\"\n        });\n        console.log(\"contact as offline\");\n      } else {\n        let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n        if (show === \"online\") {\n          // Mark contact as online\n          console.log(\"contact as online\");\n          this.setState({\n            contactStatus: \"online\"\n          });\n        } else if (show === \"away\") {\n          // etc...\n          this.setState({\n            contactStatus: \"away\"\n          });\n        } else if (show === \"dnd\") {\n          // etc...\n          this.setState({\n            contactStatus: \"dnd\"\n          });\n        } else if (show === \"invisible\") {\n          // etc...\n          this.setState({\n            contactStatus: \"invisible\"\n          });\n        }\n      }\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------get contact presence-----------*/\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, showMainPage ? React.createElement(\"div\", {\n    className: \"mystatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(RadioButtonList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })) : React.createElement(LoginPage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })));\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js"],"names":["React","useEffect","useState","LoginPage","TabsSection","Button","RadioButtonList","StatusDetector","$","useSelector","MainPage","showMainPage","state","connection","$pres","$iq","strophe","showPage","setShowPage","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","handleDisconnect","disconnect","onSubscriptionRequest","stanza","setState","showPopUp","getAttribute","send","window","to","type","onPresence","presence","presence_type","attr","from","contactStatus","show","find","text"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\n// import \"./style.css\";\n\nconst MainPage = () => {\n    const showMainPage = useSelector(state => state.showMainPage)\n    const connection = useSelector(state => state.connection)\n    const $pres = useSelector(state => state.$pres)\n    const $iq = useSelector(state => state.$iq)\n    const strophe = useSelector(state => state.strophe)\n    const [showPage, setShowPage] = useState(showMainPage)\n\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            // this.setState({\n            //     showMainPage: true,\n            //     jid: this.state.connection.jid\n            // });\n\n        }\n    }\n\n    /*-----------------Log Out Button action----------------=*/\n    const handleDisconnect = () => {\n        connection.disconnect();\n    }\n\n    /*-----------------/Log Out Button action----------------*/\n\n\n    useEffect(() => {\n        setShowPage(showMainPage)\n    }, [showMainPage])\n\n    /*----------response to subscription request-----------*/\n    const onSubscriptionRequest = (stanza) => {\n        this.setState({\n            showPopUp: true\n        })\n        if (stanza.getAttribute(\"type\") === \"subscribe\") {\n            // Send a 'subscribed' notification back to accept the incoming\n            // subscription request\n            this.state.connection.send(window.$pres({to: stanza.getAttribute(\"from\"), type: \"subscribed\"}));\n        }\n        return true;\n    }\n\n    /*----------/response to subscription request-----------*/\n\n    /*----------get contact presence-----------*/\n    const onPresence = (presence) => {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n        if (!presence_type) presence_type = \"online\";\n        if (presence_type !== \"error\") {\n            if (presence_type === \"unavailable\") {\n                // Mark contact as offline\n                this.setState({\n                    contactStatus: \"offline\"\n                });\n                console.log(\"contact as offline\");\n\n            } else {\n                let show = $(presence)\n                    .find(\"show\")\n                    .text(); // this is what gives away, dnd, etc.\n                if (show === \"online\") {\n                    // Mark contact as online\n                    console.log(\"contact as online\");\n                    this.setState({\n                        contactStatus: \"online\"\n                    });\n                } else if (show === \"away\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"away\"\n                    });\n                } else if (show === \"dnd\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"dnd\"\n                    });\n                } else if (show === \"invisible\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"invisible\"\n                    });\n                }\n            }\n        }\n\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div className=\"container\">\n                {showMainPage ? <div className=\"mystatus\">\n                        <RadioButtonList\n                        />\n                    </div> :\n                    <LoginPage/>}\n            </div>\n        </React.Fragment>\n    );\n\n}\n\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}