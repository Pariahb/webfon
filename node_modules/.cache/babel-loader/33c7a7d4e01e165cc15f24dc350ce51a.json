{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js\";\nimport React, { useEffect } from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport { useSelector } from \"react-redux\";\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts);\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n  const onPresence = presence => {\n    console.log(\"onPresence\");\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (from !== connection.jid) {\n      if (!presence_type) {\n        changeRosterStatus(\"chat\");\n      }\n\n      if (presence_type !== \"error\") {\n        if (presence_type === \"unavailable\") {\n          // Mark contact as offline\n          changeRosterStatus(\"offline\");\n          console.log(from + \"contact as unavailable\");\n        } else {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (show === \"chat\") {\n            changeRosterStatus(\"chat\"); // Mark contact as online\n\n            console.log(from + \"contact as online\");\n          } else if (show === \"away\") {\n            // etc...\n            changeRosterStatus(\"away\");\n            console.log(from + \"contact as away\");\n          } else if (show === \"dnd\") {\n            // etc...\n            changeRosterStatus(\"dnd\");\n            console.log(from + \"contact as dnd\");\n          } else if (show === \"xa\") {\n            // etc...\n            changeRosterStatus(\"xa\");\n            console.log(from + \"contact as xa\");\n          }\n        }\n      }\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    console.log(\"rosterStatus\", rosterStatus);\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-4 contacts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"\\u0644\\u06CC\\u0633\\u062A \\u067E\\u06CC\\u0627\\u0645 \\u0647\\u0627\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"\\u0627\\u0641\\u0631\\u0627\\u062F \\u0622\\u0646\\u0644\\u0627\\u06CC\\u0646 (\\u06F4 \\u0646\\u0641\\u0631)\")), contacts.map((item, i) => {\n    console.log(item); // Return the element. Also pass key\n\n    return React.createElement(ContactItem, {\n      key: i,\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default ContactsList;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js"],"names":["React","useEffect","ContactItem","useSelector","ContactsList","contacts","state","onPresence","presence","console","log","presence_type","$","attr","from","connection","jid","changeRosterStatus","show","find","text","rosterStatus","dispatch","type","addHandler","showMainPage","map","item","i"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport {useSelector} from \"react-redux\";\n\nconst ContactsList = () => {\n    const contacts = useSelector(state => state.contacts)\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n        console.log(\"onPresence\");\n\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n        if (from !== connection.jid) {\n            if (!presence_type) {\n                changeRosterStatus(\"chat\")\n            }\n            if (presence_type !== \"error\") {\n                if (presence_type === \"unavailable\") {\n                    // Mark contact as offline\n                    changeRosterStatus(\"offline\");\n\n                    console.log(from + \"contact as unavailable\");\n\n                } else {\n                    let show = $(presence)\n                        .find(\"show\")\n                        .text(); // this is what gives away, dnd, etc.\n                    if (show === \"chat\") {\n                        changeRosterStatus(\"chat\");\n                        // Mark contact as online\n                        console.log(from + \"contact as online\");\n\n                    } else if (show === \"away\") {\n                        // etc...\n                        changeRosterStatus(\"away\");\n                        console.log(from + \"contact as away\");\n\n                    } else if (show === \"dnd\") {\n                        // etc...\n                        changeRosterStatus(\"dnd\");\n                        console.log(from + \"contact as dnd\");\n\n                    } else if (show === \"xa\") {\n                        // etc...\n                        changeRosterStatus(\"xa\");\n                        console.log(from + \"contact as xa\");\n\n                    }\n                }\n            }\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n    /*---------------------------------*/\n    //change each roster status.\n    const changeRosterStatus = (rosterStatus) => {\n        console.log(\"rosterStatus\", rosterStatus);\n        dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n    }\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div className=\"col-sm-4 contacts\">\n                <div className=\"header\">\n                    <p>لیست پیام ها</p>\n                    <p>افراد آنلاین (۴ نفر)</p>\n                </div>\n                {contacts.map((item, i) => {\n                    console.log(item)\n                    // Return the element. Also pass key\n                    return (\n                        <ContactItem\n                            key={i}\n                            item={item}\n                        />\n\n                    );\n                })}\n\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ContactsList;\n"]},"metadata":{},"sourceType":"module"}