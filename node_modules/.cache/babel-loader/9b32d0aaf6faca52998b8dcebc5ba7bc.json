{"ast":null,"code":"const EventEmitter = require('events').EventEmitter;\n\nconst debugerror = require('debug')('JsSIP:ERROR:RTCSession:Info');\n\ndebugerror.log = console.warn.bind(console);\n\nconst JsSIP_C = require('../Constants');\n\nconst Exceptions = require('../Exceptions');\n\nconst Utils = require('../Utils');\n\nmodule.exports = class Info extends EventEmitter {\n  constructor(session) {\n    super();\n    this._session = session;\n    this._direction = null;\n    this._contentType = null;\n    this._body = null;\n  }\n\n  get contentType() {\n    return this._contentType;\n  }\n\n  get body() {\n    return this._body;\n  }\n\n  send(contentType, body, options = {}) {\n    this._direction = 'outgoing';\n\n    if (contentType === undefined) {\n      throw new TypeError('Not enough arguments');\n    } // Check RTCSession Status.\n\n\n    if (this._session.status !== this._session.C.STATUS_CONFIRMED && this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK) {\n      throw new Exceptions.InvalidStateError(this._session.status);\n    }\n\n    this._contentType = contentType;\n    this._body = body;\n    const extraHeaders = Utils.cloneArray(options.extraHeaders);\n    extraHeaders.push(\"Content-Type: \".concat(contentType));\n\n    this._session.newInfo({\n      originator: 'local',\n      info: this,\n      request: this.request\n    });\n\n    this._session.sendRequest(JsSIP_C.INFO, {\n      extraHeaders,\n      eventHandlers: {\n        onSuccessResponse: response => {\n          this.emit('succeeded', {\n            originator: 'remote',\n            response\n          });\n        },\n        onErrorResponse: response => {\n          this.emit('failed', {\n            originator: 'remote',\n            response\n          });\n        },\n        onTransportError: () => {\n          this._session.onTransportError();\n        },\n        onRequestTimeout: () => {\n          this._session.onRequestTimeout();\n        },\n        onDialogError: () => {\n          this._session.onDialogError();\n        }\n      },\n      body\n    });\n  }\n\n  init_incoming(request) {\n    this._direction = 'incoming';\n    this.request = request;\n    request.reply(200);\n    this._contentType = request.getHeader('content-type');\n    this._body = request.body;\n\n    this._session.newInfo({\n      originator: 'remote',\n      info: this,\n      request\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}