{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport $ from \"jquery\";\nimport \"./style.css\";\n\nconst ContactItem = props => {\n  const dispatch = useDispatch();\n  const connection = useSelector(state => state.connection);\n  const $iq = useSelector(state => state.$iq);\n  const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState({\n    from: '',\n    time: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastActivity = _useState2[0],\n        setLastActivity = _useState2[1];\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n\n  const getLastActivity = () => {\n    let lastIq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: props.item.jid,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(lastIq, onLastActivity);\n    onLastActivity();\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [showMainPage]);\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    console.log(\"lastActivity\", lastActivity);\n    console.log(\"from\", from);\n    $(iq).find(\"query\").each(function () {\n      if ($(iq).attr('type') === \"result\") {\n        console.log(\"result\", $(iq));\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime\n        };\n        console.log(\"lastActivityObj\", lastActivityObj);\n        setLastActivity(lastActivityObj);\n      }\n\n      console.log(\"setLastActivity\", lastActivity);\n    });\n    return true;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: getLastActivity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"last activity\"), React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(RosterStatusDetector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","RosterStatusDetector","$","ContactItem","props","dispatch","connection","state","$iq","showMainPage","from","time","lastActivity","setLastActivity","handleRosterClick","contact","console","log","type","getLastActivity","lastIq","jid","to","item","id","c","xmlns","sendIQ","onLastActivity","iq","attr","lastActivityObj","find","each","lastActivityTime","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport $ from \"jquery\";\nimport \"./style.css\";\n\nconst ContactItem = (props) => {\n    const dispatch = useDispatch();\n    const connection = useSelector(state => state.connection);\n    const $iq = useSelector(state => state.$iq);\n    const showMainPage = useSelector(state => state.showMainPage);\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''})\n    const handleRosterClick = (contact) => {\n        console.log(contact);\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n    const getLastActivity = () => {\n        let lastIq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: props.item.jid,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(lastIq, onLastActivity);\n        onLastActivity();\n    };\n    useEffect(() => {\n        getLastActivity()\n    }, [showMainPage]);\n    const onLastActivity = (iq) => {\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        console.log(\"lastActivity\", lastActivity)\n        console.log(\"from\", from)\n\n        $(iq).find(\"query\").each(function () {\n            if ($(iq).attr('type') === \"result\") {\n                console.log(\"result\", $(iq))\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime\n                };\n\n                console.log(\"lastActivityObj\", lastActivityObj);\n\n\n                setLastActivity(lastActivityObj);\n\n\n            }\n            console.log(\"setLastActivity\",lastActivity);\n\n        });\n\n        return true;\n\n    };\n\n    return (\n        <React.Fragment>\n            <button onClick={getLastActivity}>last activity</button>\n            {/*<p>{lastActivity}</p>*/}\n            <div\n                onClick={() => handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n\n                    <RosterStatusDetector/>\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n    );\n\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}