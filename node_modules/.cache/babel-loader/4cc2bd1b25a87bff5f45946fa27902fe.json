{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/call-log/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport GroupedLog from \"../grouped-log\";\n\nconst CallLogs = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n  const callType = useSelector(state => state.callType);\n\n  const moment = require('persian-date');\n\n  const orgMoment = require('moment');\n\n  const jalali = require('moment-jalaali');\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        cdrData = _useState2[0],\n        getCdrData = _useState2[1];\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todayCdr = _useState4[0],\n        getTodayCdr = _useState4[1];\n\n  const _useState5 = useState({\n    item: []\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        inbounds = _useState6[0],\n        filterInbounds = _useState6[1];\n\n  const dispatch = useDispatch();\n  let today = orgMoment();\n\n  const setCallType = callType => {\n    dispatch({\n      callType,\n      type: \"SET_CALL_TYPE\"\n    });\n    console.log(\"type\", callType);\n    console.log(\"cdrsData\", cdrsData);\n  };\n\n  const inboundCalls = () => {\n    setCallType(\"inbound\");\n  };\n\n  const outboundCalls = () => {\n    setCallType(\"outbound\");\n  };\n\n  const missedCallsCalls = () => {\n    setCallType(\"missed\");\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(GroupedLog, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nexport default CallLogs;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/call-log/index.js"],"names":["React","useState","useDispatch","useSelector","GroupedLog","CallLogs","cdrsData","state","callType","moment","require","orgMoment","jalali","item","cdrData","getCdrData","todayCdr","getTodayCdr","inbounds","filterInbounds","dispatch","today","setCallType","type","console","log","inboundCalls","outboundCalls","missedCallsCalls"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,UAAP,MAAuB,gBAAvB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAMC,QAAQ,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACA,QAAME,QAAQ,GAAGL,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,QAAhB,CAA5B;;AACA,QAAMC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AACA,QAAMC,SAAS,GAAGD,OAAO,CAAC,QAAD,CAAzB;;AACA,QAAME,MAAM,GAAGF,OAAO,CAAC,gBAAD,CAAtB;;AALmB,oBAMWT,QAAQ,CAAC;AAACY,IAAAA,IAAI,EAAE;AAAP,GAAD,CANnB;AAAA;AAAA,QAMZC,OANY;AAAA,QAMHC,UANG;;AAAA,qBAOad,QAAQ,CAAC;AAACY,IAAAA,IAAI,EAAE;AAAP,GAAD,CAPrB;AAAA;AAAA,QAOZG,QAPY;AAAA,QAOFC,WAPE;;AAAA,qBAQgBhB,QAAQ,CAAC;AAACY,IAAAA,IAAI,EAAE;AAAP,GAAD,CARxB;AAAA;AAAA,QAQZK,QARY;AAAA,QAQFC,cARE;;AASnB,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AACA,MAAImB,KAAK,GAAGV,SAAS,EAArB;;AAEA,QAAMW,WAAW,GAAId,QAAD,IAAc;AAC9BY,IAAAA,QAAQ,CAAC;AAACZ,MAAAA,QAAD;AAAWe,MAAAA,IAAI,EAAE;AAAjB,KAAD,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBjB,QAApB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBnB,QAAxB;AACH,GAJD;;AAKA,QAAMoB,YAAY,GAAG,MAAM;AACvBJ,IAAAA,WAAW,CAAC,SAAD,CAAX;AACH,GAFD;;AAGA,QAAMK,aAAa,GAAG,MAAM;AACxBL,IAAAA,WAAW,CAAC,UAAD,CAAX;AACH,GAFD;;AAGA,QAAMM,gBAAgB,GAAG,MAAM;AAC3BN,IAAAA,WAAW,CAAC,QAAD,CAAX;AACH,GAFD;;AAKA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH,CAlCD;;AAmCA,eAAejB,QAAf","sourcesContent":["import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport GroupedLog from \"../grouped-log\";\n\nconst CallLogs = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n    const callType = useSelector(state => state.callType);\n    const moment = require('persian-date');\n    const orgMoment = require('moment');\n    const jalali = require('moment-jalaali');\n    const [cdrData, getCdrData] = useState({item: []});\n    const [todayCdr, getTodayCdr] = useState({item: []});\n    const [inbounds, filterInbounds] = useState({item: []});\n    const dispatch = useDispatch();\n    let today = orgMoment();\n\n    const setCallType = (callType) => {\n        dispatch({callType, type: \"SET_CALL_TYPE\"});\n        console.log(\"type\", callType)\n        console.log(\"cdrsData\", cdrsData)\n    };\n    const inboundCalls = () => {\n        setCallType(\"inbound\");\n    };\n    const outboundCalls = () => {\n        setCallType(\"outbound\");\n    };\n    const missedCallsCalls = () => {\n        setCallType(\"missed\");\n    };\n\n\n    return (\n        <React.Fragment>\n            <GroupedLog/>\n        </React.Fragment>\n    )\n\n}\nexport default CallLogs;\n"]},"metadata":{},"sourceType":"module"}