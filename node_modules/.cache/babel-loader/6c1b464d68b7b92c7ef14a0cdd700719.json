{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  status: \"chat\",\n  connection: new window.Strophe.Connection(\"http://77.104.116.225:5280/http-bind\"),\n  $pres: window.$pres,\n  $iq: window.$iq,\n  $msg: window.$msg,\n  strophe: window.Strophe,\n  showMainPage: false,\n  showCallPage: false,\n  showChangePasswordPage: false,\n  contacts: [],\n  rosterStatus: [],\n  selectedContact: '',\n  rosterClicked: false,\n  sendLastActivity: false,\n  devicesData: [],\n  loginData: [],\n  callFlowsData: [],\n  cdrsData: [],\n  loadingStatus: true,\n  newMessage: '',\n  chatLog: [],\n  callType: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'MY_STATUS':\n      {\n        return _objectSpread({}, state, {\n          status: action.s\n        });\n      }\n\n    case 'SHOW_MAIN_PAGE':\n      {\n        return _objectSpread({}, state, {\n          showMainPage: action.showMainPage\n        });\n      }\n\n    case 'SHOW_CHANGE_PASS_PAGE':\n      {\n        return _objectSpread({}, state, {\n          showChangePasswordPage: action.showChangePasswordPage\n        });\n      }\n\n    case 'SHOW_CALL_PAGE':\n      {\n        return _objectSpread({}, state, {\n          showCallPage: action.showPage\n        });\n      }\n\n    case 'GET_CONTACTS':\n      {\n        return _objectSpread({}, state, {\n          contacts: action.contacts\n        });\n      }\n\n    case 'CHANGE_EACH_ROSTER_STATUS':\n      {\n        return _objectSpread({}, state, {\n          rosterStatus: state.rosterStatus.map((content, i) => content.id === action.rosterStatusItem.id ? _objectSpread({}, content, {\n            status: action.rosterStatusItem.status\n          }) : content)\n        });\n      }\n\n    case 'PUSH_ROSTER_STATUS_ITEM':\n      {\n        let rostersArray = state.rosterStatus;\n        rostersArray.push(action.rosterStatusItem);\n        return _objectSpread({}, state, {\n          rosterStatus: rostersArray\n        });\n      }\n\n    case 'SET_SELECTED_ROSTER':\n      {\n        return _objectSpread({}, state, {\n          selectedContact: action.contact\n        });\n      }\n\n    case 'CHECK_ROSTER_CLICK':\n      {\n        return _objectSpread({}, state, {\n          rosterClicked: action.rosterClicked\n        });\n      }\n\n    case 'GET_DEVICES_DATA':\n      {\n        return _objectSpread({}, state, {\n          devicesData: action.devicesData\n        });\n      }\n\n    case 'GET_LOGIN_DATA':\n      {\n        return _objectSpread({}, state, {\n          loginData: action.loginData\n        });\n      }\n\n    case 'GET_USER_CALLFLOWS_DATA':\n      {\n        return _objectSpread({}, state, {\n          callFlowsData: action.callFlowsData\n        });\n      }\n\n    case 'GET_CDRS_DATA':\n      {\n        return _objectSpread({}, state, {\n          cdrsData: action.cdrsData\n        });\n      }\n\n    case 'SET_CALL_TYPE':\n      {\n        return _objectSpread({}, state, {\n          callType: action.callType\n        });\n      }\n\n    case 'SET_LOADING_STATUS':\n      {\n        return _objectSpread({}, state, {\n          loadingStatus: action.loadingStatus\n        });\n      }\n\n    case 'GET_NEW_MESSAGE':\n      {\n        return _objectSpread({}, state, {\n          newMessage: action.newMessage\n        });\n      }\n\n    case 'FETCH_HISTORY_MESSAGES':\n      {\n        return _objectSpread({}, state, {\n          chatLog: action.historyMessages\n        });\n      }\n\n    case 'PUSH_HISTORY_MESSAGES':\n      {\n        let historyArray = state.chatLog;\n        state.chatLog.push(action.newMessages);\n        console.log(\"historyArray\");\n        let test = {\n          text: \"test2\",\n          stamp: '2019-11-10T13:05:04.053904Z',\n          type: \"rec\"\n        };\n        return _objectSpread({}, state, {\n          chatLog: [...state.chatLog, state.chatLog]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/redux/reducer.js"],"names":["initialState","status","connection","window","Strophe","Connection","$pres","$iq","$msg","strophe","showMainPage","showCallPage","showChangePasswordPage","contacts","rosterStatus","selectedContact","rosterClicked","sendLastActivity","devicesData","loginData","callFlowsData","cdrsData","loadingStatus","newMessage","chatLog","callType","reducer","state","action","type","s","showPage","map","content","i","id","rosterStatusItem","rostersArray","push","contact","historyMessages","historyArray","newMessages","console","log","test","text","stamp"],"mappings":"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","sourcesContent":["const initialState = {\n    status: \"chat\",\n    connection: new window.Strophe.Connection(\n        \"http://77.104.116.225:5280/http-bind\"\n    ),\n    $pres: window.$pres,\n    $iq: window.$iq,\n    $msg: window.$msg,\n    strophe: window.Strophe,\n    showMainPage: false,\n    showCallPage: false,\n    showChangePasswordPage: false,\n    contacts: [],\n    rosterStatus: [],\n    selectedContact: '',\n    rosterClicked: false,\n    sendLastActivity: false,\n    devicesData: [],\n    loginData: [],\n    callFlowsData: [],\n    cdrsData: [],\n    loadingStatus: true,\n    newMessage: '',\n    chatLog: [],\n    callType : \"\"\n};\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'MY_STATUS': {\n            return {\n                ...state,\n                status: action.s\n            };\n        }\n        case 'SHOW_MAIN_PAGE': {\n            return {\n                ...state,\n                showMainPage: action.showMainPage\n            };\n        }\n        case 'SHOW_CHANGE_PASS_PAGE': {\n            return {\n                ...state,\n                showChangePasswordPage: action.showChangePasswordPage\n            };\n        }\n        case 'SHOW_CALL_PAGE': {\n\n            return {\n                ...state,\n                showCallPage: action.showPage\n            };\n        }\n        case 'GET_CONTACTS': {\n            return {\n                ...state,\n                contacts: action.contacts\n            };\n        }\n        case 'CHANGE_EACH_ROSTER_STATUS': {\n\n            return {\n                ...state,\n                rosterStatus: state.rosterStatus.map(\n                    (content, i) => content.id === action.rosterStatusItem.id ? {\n                            ...content,\n                            status: action.rosterStatusItem.status\n                        }\n                        : content\n                )\n            }\n\n        }\n        case 'PUSH_ROSTER_STATUS_ITEM': {\n            let rostersArray = state.rosterStatus;\n            rostersArray.push(action.rosterStatusItem)\n            return {\n                ...state,\n                rosterStatus: rostersArray\n            }\n        }\n        case 'SET_SELECTED_ROSTER': {\n            return {\n                ...state,\n                selectedContact: action.contact\n            };\n        }\n        case 'CHECK_ROSTER_CLICK': {\n\n            return {\n                ...state,\n                rosterClicked: action.rosterClicked\n            };\n        }\n        case 'GET_DEVICES_DATA': {\n            return {\n                ...state,\n                devicesData: action.devicesData\n            }\n        }\n        case 'GET_LOGIN_DATA': {\n            return {\n                ...state,\n                loginData: action.loginData\n            }\n        }\n        case 'GET_USER_CALLFLOWS_DATA': {\n            return {\n                ...state,\n                callFlowsData: action.callFlowsData\n            }\n        }\n        case 'GET_CDRS_DATA': {\n            return {\n                ...state,\n                cdrsData: action.cdrsData\n            }\n        }\n        case 'SET_CALL_TYPE': {\n            return {\n                ...state,\n                callType: action.callType\n            }\n        }\n        case 'SET_LOADING_STATUS': {\n            return {\n                ...state,\n                loadingStatus: action.loadingStatus\n            }\n        }\n        case 'GET_NEW_MESSAGE': {\n            return {\n                ...state,\n                newMessage: action.newMessage\n            }\n        }\n        case 'FETCH_HISTORY_MESSAGES': {\n\n            return {\n                ...state,\n                chatLog: action.historyMessages\n            }\n\n        }\n        case 'PUSH_HISTORY_MESSAGES': {\n            let historyArray = state.chatLog;\n            state.chatLog.push(action.newMessages);\n            console.log(\"historyArray\");\n\n            let test = {\n                text: \"test2\",\n                stamp: '2019-11-10T13:05:04.053904Z',\n                type: \"rec\"\n            }\n            return {\n                ...state,\n                chatLog: [...state.chatLog, state.chatLog]\n            }\n        }\n        default:\n            return state;\n    }\n};\nexport default reducer;"]},"metadata":{},"sourceType":"module"}