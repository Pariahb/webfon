{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\nimport { showMainPage } from \"../../redux/action\";\n\nconst ContactItem = props => {\n  const rosterStatus = useSelector(state => state.rosterStatus);\n\n  const _useState = useState(rosterStatus),\n        _useState2 = _slicedToArray(_useState, 2),\n        rosterStatusColor = _useState2[0],\n        setRosterStatusColor = _useState2[1];\n\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  useEffect(() => {\n    setRosterStatusColor(rosterStatus);\n  }, [rosterStatus]);\n\n  const handleRosterClick = contact => {\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n\n  const onPresence = presence => {\n    console.log(\"onPresence\");\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (from !== connection.jid) {\n      if (!presence_type) {\n        changeRosterStatus(\"chat\");\n      }\n\n      if (presence_type !== \"error\") {\n        if (presence_type === \"unavailable\") {\n          // Mark contact as offline\n          changeRosterStatus(\"offline\");\n          console.log(from + \"contact as unavailable\");\n        } else {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (show === \"chat\") {\n            changeRosterStatus(\"chat\"); // Mark contact as online\n\n            console.log(from + \"contact as online\");\n          } else if (show === \"away\") {\n            // etc...\n            changeRosterStatus(\"away\");\n            console.log(from + \"contact as away\");\n          } else if (show === \"dnd\") {\n            // etc...\n            changeRosterStatus(\"dnd\");\n            console.log(from + \"contact as dnd\");\n          } else if (show === \"xa\") {\n            // etc...\n            changeRosterStatus(\"xa\");\n            console.log(from + \"contact as xa\");\n          }\n        }\n      }\n    } else {\n      console.log(\"mosavi\");\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    console.log(\"rosterStatus\", rosterStatus);\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"tt\"), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","$","showMainPage","ContactItem","props","rosterStatus","state","rosterStatusColor","setRosterStatusColor","dispatch","handleRosterClick","contact","type","onPresence","presence","console","log","presence_type","attr","from","connection","jid","changeRosterStatus","show","find","text","addHandler","item","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\nimport {showMainPage} from \"../../redux/action\";\n\nconst ContactItem = (props) => {\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const [rosterStatusColor, setRosterStatusColor] = useState(rosterStatus);\n    const dispatch = useDispatch();\n    const showMainPage = useSelector(state => state.showMainPage)\n\n    useEffect(() => {\n        setRosterStatusColor(rosterStatus)\n    }, [rosterStatus]);\n\n    const handleRosterClick = (contact) => {\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    }\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n        console.log(\"onPresence\");\n\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n        if (from !== connection.jid) {\n            if (!presence_type) {\n                changeRosterStatus(\"chat\")\n\n            }\n\n            if (presence_type !== \"error\") {\n                if (presence_type === \"unavailable\") {\n                    // Mark contact as offline\n                    changeRosterStatus(\"offline\")\n\n                    console.log(from + \"contact as unavailable\");\n\n                } else {\n                    let show = $(presence)\n                        .find(\"show\")\n                        .text(); // this is what gives away, dnd, etc.\n                    if (show === \"chat\") {\n                        changeRosterStatus(\"chat\")\n                        // Mark contact as online\n                        console.log(from + \"contact as online\");\n\n                    } else if (show === \"away\") {\n                        // etc...\n                        changeRosterStatus(\"away\")\n                        console.log(from + \"contact as away\");\n\n                    } else if (show === \"dnd\") {\n                        // etc...\n                        changeRosterStatus(\"dnd\")\n                        console.log(from + \"contact as dnd\");\n\n                    } else if (show === \"xa\") {\n                        // etc...\n                        changeRosterStatus(\"xa\")\n                        console.log(from + \"contact as xa\");\n\n                    }\n                }\n            }\n        } else {\n            console.log(\"mosavi\")\n        }\n\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n    /*---------------------------------*/\n    //change each roster status.\n    const changeRosterStatus = (rosterStatus) => {\n        console.log(\"rosterStatus\", rosterStatus)\n        dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n    }\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage])\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div\n                onClick={handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n                                <span\n                                    className={rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor}>tt</span>\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n\n    );\n}\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}