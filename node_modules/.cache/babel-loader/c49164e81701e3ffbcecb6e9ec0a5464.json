{"ast":null,"code":"import React,{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{scrollToBottom}from\"../../helper/functions\";var ChatInput=function ChatInput(props){var dispatch=useDispatch();var $msg=useSelector(function(state){return state.$msg;});var selectedContact=useSelector(function(state){return state.selectedContact;});var connection=useSelector(function(state){return state.connection;});var handleKeyDown=function handleKeyDown(event){if(event.key==='Enter'){handleSubmit(event);}};var handleSubmit=function handleSubmit(event){event.preventDefault();var txtJID=selectedContact,txtMsg=props.messageText.txt,message,sents=[];if(txtMsg===undefined||txtMsg===\"\")alert(\"Empty Message, please type something\");else{var reply=$msg({to:txtJID,from:connection.jid,type:\"chat\",id:\"message-1\"}).c(\"body\").t(txtMsg);connection.send(reply.tree());message={to:txtJID,message:txtMsg,time:new Date(),type:\"sent\"};var newMsg={text:txtMsg,stamp:new Date(),type:\"sent\"};var inputVal=document.getElementById(\"msg-here\");console.log(inputVal);inputVal.value='';var text=message.message;dispatch({newMessage:text,type:'GET_NEW_MESSAGE'});dispatch({newMessages:newMsg,type:'PUSH_HISTORY_MESSAGES'});}};return React.createElement(React.Fragment,null,React.createElement(\"form\",{className:\"input-group mb-3\"},React.createElement(\"input\",{type:\"text\",id:\"msg-here\",className:\"form-control\",placeholder:\"Message here...\",rows:\"4\",value:props.messageText.txt,onChange:props.onInputChange,onKeyDown:handleKeyDown}),React.createElement(\"div\",{className:\"input-group-append\"},React.createElement(\"button\",{type:\"button\",value:\"send\",className:\"btn btn-outline-secondary\",id:\"sendButton\",onClick:handleSubmit,onKeyDown:handleKeyDown},\"send\"))));};export default ChatInput;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-input/index.js"],"names":["React","useState","useDispatch","useSelector","scrollToBottom","ChatInput","props","dispatch","$msg","state","selectedContact","connection","handleKeyDown","event","key","handleSubmit","preventDefault","txtJID","txtMsg","messageText","txt","message","sents","undefined","alert","reply","to","from","jid","type","id","c","t","send","tree","time","Date","newMsg","text","stamp","inputVal","document","getElementById","console","log","value","newMessage","newMessages","onInputChange"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {scrollToBottom} from \"../../helper/functions\";\n\nconst ChatInput = (props) => {\n    const dispatch = useDispatch();\n    const $msg = useSelector(state => state.$msg);\n    const selectedContact = useSelector(state => state.selectedContact);\n    const connection = useSelector(state => state.connection);\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleSubmit(event);\n        }\n    };\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        let txtJID = selectedContact,\n            txtMsg = props.messageText.txt,\n            message,\n            sents = [];\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            let reply = $msg({\n                to: txtJID,\n                from: connection.jid,\n                type: \"chat\",\n                id: \"message-1\"\n            })\n                .c(\"body\")\n                .t(txtMsg);\n            connection.send(reply.tree());\n\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            let newMsg = {\n                text: txtMsg,\n                stamp: new Date(),\n                type: \"sent\"\n            };\n            const inputVal = document.getElementById(\"msg-here\")\n            console.log(inputVal);\n            inputVal.value = '';\n            const text = message.message;\n            dispatch({newMessage: text, type: 'GET_NEW_MESSAGE'})\n            dispatch({newMessages: newMsg, type: 'PUSH_HISTORY_MESSAGES'});\n        }\n\n    };\n\n    return (\n        <React.Fragment>\n            <form className=\"input-group mb-3\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={props.messageText.txt}\n                    onChange={props.onInputChange}\n                    onKeyDown={handleKeyDown}\n\n                />\n                <div className=\"input-group-append\">\n\n                    <button\n                        type=\"button\"\n                        value=\"send\"\n                        className=\"btn btn-outline-secondary\"\n                        id=\"sendButton\"\n                        onClick={handleSubmit}\n                        onKeyDown={handleKeyDown}\n\n                    >send\n                    </button>\n                </div>\n\n            </form>\n        </React.Fragment>\n    )\n};\n\nexport default ChatInput;\n"]},"metadata":{},"sourceType":"module"}