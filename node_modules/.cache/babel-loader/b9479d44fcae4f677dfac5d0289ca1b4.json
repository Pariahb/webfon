{"ast":null,"code":"const JsSIP_C = require('../Constants');\n\nconst debug = require('debug')('JsSIP:RTCSession:ReferNotifier');\n\nconst C = {\n  event_type: 'refer',\n  body_type: 'message/sipfrag;version=2.0',\n  expires: 300\n};\nmodule.exports = class ReferNotifier {\n  constructor(session, id, expires) {\n    this._session = session;\n    this._id = id;\n    this._expires = expires || C.expires;\n    this._active = true; // The creation of a Notifier results in an immediate NOTIFY.\n\n    this.notify(100);\n  }\n\n  notify(code, reason) {\n    debug('notify()');\n\n    if (this._active === false) {\n      return;\n    }\n\n    reason = reason || JsSIP_C.REASON_PHRASE[code] || '';\n    let state;\n\n    if (code >= 200) {\n      state = 'terminated;reason=noresource';\n    } else {\n      state = \"active;expires=\".concat(this._expires);\n    } // Put this in a try/catch block.\n\n\n    this._session.sendRequest(JsSIP_C.NOTIFY, {\n      extraHeaders: [\"Event: \".concat(C.event_type, \";id=\").concat(this._id), \"Subscription-State: \".concat(state), \"Content-Type: \".concat(C.body_type)],\n      body: \"SIP/2.0 \".concat(code, \" \").concat(reason),\n      eventHandlers: {\n        // If a negative response is received, subscription is canceled.\n        onErrorResponse() {\n          this._active = false;\n        }\n\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}