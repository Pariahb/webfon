{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useDebugValue, useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchHistoryMessages } from \"../../../redux/action\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const historyMessages = useSelector(state => state.history);\n  const newMessage = useSelector(state => state.newMessage);\n  const strophe = useSelector(state => state.strophe);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        allMessages = _useState2[0],\n        setAllMessages = _useState2[1];\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        recMessages = _useState4[0],\n        setRecMessages = _useState4[1];\n\n  const _useState5 = useState({\n    txt: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageText = _useState6[0],\n        changeMessageText = _useState6[1];\n\n  const _useState7 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        lastActivity = _useState8[0],\n        setLastActivity = _useState8[1];\n\n  const dispatch = useDispatch();\n\n  const _useState9 = useState({\n    item: []\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messageList = _useState10[0],\n        setMessageList = _useState10[1];\n\n  const scrollToBottom = () => {\n    let chatDiv = document.querySelector(\".all-messages\");\n    chatDiv.scrollTo(0, chatDiv.scrollHeight);\n    console.log(\"hi\");\n  };\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let mySentMessages,\n        myRecMessages,\n        recHistory = [],\n        sentHistory = [];\n    connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n      with: selectedContact,\n      onMessage: function (message) {\n        console.log(\"mam\");\n        $(message).each(function () {\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            myRecMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            recHistory = messageList.item;\n            recHistory.push(myRecMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: recHistory\n            }));\n          } else if ($(this).find(\"forwarded message\").attr(\"to\").split(\"/\", 1)[0] === selectedContact) {\n            mySentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            sentHistory = messageList.item;\n            sentHistory.push(mySentMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: sentHistory\n            }));\n          }\n        });\n        dispatch({\n          historyMessages: sentHistory,\n          type: \"FETCH_HISTORY_MESSAGES\"\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        scrollToBottom();\n        connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n      }\n    });\n  };\n\n  const handleSubmit = () => {\n    console.log(\"selectedContact\", selectedContact);\n    let txtJID = selectedContact,\n        txtMsg = messageText.txt,\n        message,\n        sents = [];\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      let reply = $msg({\n        to: txtJID,\n        from: connection.jid,\n        type: \"chat\",\n        id: \"message-1\"\n      }).c(\"body\").t(txtMsg);\n      connection.send(reply.tree());\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      let newMsg = {\n        text: message.message,\n        stamp: '2019-11-10T13:05:04.053904Z',\n        type: message.type\n      };\n      const text = message.message;\n      dispatch({\n        newMessage: text,\n        type: 'GET_NEW_MESSAGE'\n      });\n      dispatch({\n        newMessages: newMsg,\n        type: 'PUSH_HISTORY_MESSAGES'\n      });\n      scrollToBottom();\n      sents = allMessages.item;\n      sents.push(message);\n      setAllMessages(_objectSpread({}, allMessages, {\n        item: sents\n      }));\n    }\n  };\n\n  const onReceiveMessage = msg => {\n    console.log(\"msg\", msg);\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n    let recs;\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      let recMsg = {\n        text: message.message,\n        stamp: '2019-11-10T13:05:04.053904Z',\n        type: \"rec\"\n      };\n      let mySentMessages,\n          myRecMessages,\n          recHistory = [],\n          sentHistory = [];\n      dispatch({\n        newMessages: recMsg,\n        type: 'PUSH_HISTORY_MESSAGES'\n      });\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*----------------RECENT ACTIVITY------------------*/\n\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  useEffect(() => {\n    console.log('*****************************************');\n    setMessageList(_objectSpread({}, messageList, {\n      item: historyMessages\n    }));\n  }, [newMessage]);\n  useEffect(() => {\n    connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n  }, [messageList.item]);\n\n  const renderList = () => {\n    return messageList.item.length > 0 ? messageList.item.map((item, i) => {\n      return React.createElement(MessagePopUp, {\n        key: i,\n        sentMsg: item.text,\n        type: item.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      });\n    }) : null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, renderList())), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: messageText.txt,\n    onChange: event => {\n      changeMessageText(_objectSpread({}, messageText, {\n        txt: event.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useDebugValue","useEffect","useState","MessagePopUp","$","useDispatch","useSelector","fetchHistoryMessages","ChatBox","selectedContact","state","historyMessages","history","newMessage","strophe","rosterStatus","$iq","$msg","connection","item","allMessages","setAllMessages","recMessages","setRecMessages","txt","messageText","changeMessageText","from","time","lastActivity","setLastActivity","dispatch","messageList","setMessageList","scrollToBottom","chatDiv","document","querySelector","scrollTo","scrollHeight","console","log","getLog","mySentMessages","myRecMessages","recHistory","sentHistory","mam","query","jid","split","with","onMessage","message","each","find","attr","text","stamp","type","push","onComplete","response","addHandler","onReceiveMessage","handleSubmit","txtJID","txtMsg","sents","undefined","alert","reply","to","id","c","t","send","tree","Date","newMsg","newMessages","msg","getAttribute","elems","getElementsByTagName","recs","innerHTML","recMsg","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","xmlns","sendIQ","renderList","length","map","i","Math","floor","event","target","value"],"mappings":"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","sourcesContent":["import React, {useDebugValue, useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useDispatch,useSelector} from \"react-redux\";\nimport {fetchHistoryMessages} from \"../../../redux/action\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const historyMessages = useSelector(state => state.history);\n    const newMessage = useSelector(state => state.newMessage);\n    const strophe = useSelector(state => state.strophe);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n    const [allMessages, setAllMessages] = useState({item: []});\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState({txt: ''});\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const dispatch = useDispatch();\n\n    const [messageList, setMessageList] = useState({item: []});\n\n\n    const scrollToBottom = () => {\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n        console.log(\"hi\")\n    };\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n    const getLog = () => {\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [];\n\n        connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = messageList.item;\n                        recHistory.push(myRecMessages);\n                        setMessageList({...messageList, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = messageList.item;\n                        sentHistory.push(mySentMessages);\n                        setMessageList({...messageList, item: sentHistory});\n                    }\n\n\n                });\n\n                dispatch({historyMessages: sentHistory, type: \"FETCH_HISTORY_MESSAGES\"});\n\n                return true;\n            },\n            onComplete: function (response) {\n                scrollToBottom();\n                connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n\n            }\n        });\n    };\n\n\n    const handleSubmit = () => {\n\n        console.log(\"selectedContact\", selectedContact);\n        let txtJID = selectedContact,\n            txtMsg = messageText.txt,\n            message,\n            sents = [];\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            let reply = $msg({\n                to: txtJID,\n                from: connection.jid,\n                type: \"chat\",\n                id: \"message-1\"\n            })\n                .c(\"body\")\n                .t(txtMsg);\n            connection.send(reply.tree());\n\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            let newMsg = {\n                text: message.message,\n                stamp: '2019-11-10T13:05:04.053904Z',\n                type: message.type\n            };\n\n            const text = message.message\n            dispatch({newMessage: text, type: 'GET_NEW_MESSAGE'})\n            dispatch({newMessages: newMsg, type: 'PUSH_HISTORY_MESSAGES'});\n            scrollToBottom();\n\n            sents = allMessages.item;\n            sents.push(message);\n            setAllMessages({...allMessages, item: sents});\n        }\n\n    };\n\n\n    const onReceiveMessage = (msg) => {\n        console.log(\"msg\", msg)\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        let recs;\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            let recMsg = {\n                text: message.message,\n                stamp: '2019-11-10T13:05:04.053904Z',\n                type: \"rec\"\n            };\n            let mySentMessages,\n                myRecMessages,\n                recHistory = [],\n                sentHistory = [];\n            dispatch({newMessages: recMsg, type: 'PUSH_HISTORY_MESSAGES'})\n\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    useEffect(() => {\n\n        console.log('*****************************************')\n        setMessageList({\n            ...messageList,\n            item: historyMessages\n        })\n    },[newMessage])\n    useEffect(() => {\n        connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n\n    },[messageList.item])\n    const renderList = () => {\n        return (\n            messageList.item.length > 0 ? messageList.item.map((item, i) => {\n                return (\n                    <MessagePopUp\n                        key={i}\n                        sentMsg={item.text}\n                        type={item.type}\n                    />\n                );\n            }) : null\n        )\n    }\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n\n                    {\n                        renderList()\n                    }\n                </div>\n\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={messageText.txt}\n                    onChange={(event) => {\n                        changeMessageText({\n                            ...messageText,\n                            txt: event.target.value\n                        })\n                    }}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}