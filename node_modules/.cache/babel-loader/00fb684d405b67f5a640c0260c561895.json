{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        historyMessages = _useState2[0],\n        setHistoryMessages = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        allMessages = _useState4[0],\n        setAllMessages = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageText = _useState6[0],\n        changeMessageText = _useState6[1];\n\n  useEffect(() => {\n    getLog();\n    connection.addHandler(onMyMessage, null, \"message\", 'urn:xmpp:mam:2', null, null);\n  }, [selectedContact]);\n\n  const getLog = () => {\n    console.log(\"connection.mam\", connection.mam);\n    let sentMessages,\n        recMessages,\n        history = [],\n        archiveIq = $iq({\n      type: \"set\",\n      id: \"archive1\"\n    }).c(\"query\", {\n      xmlns: \"urn:xmpp:mam:2\"\n    });\n    console.log(\"selectedContact\", selectedContact);\n    connection.mam.query(archiveIq, {\n      with: selectedContact,\n      onMyMessage,\n      onComplete: function (response) {\n        console.log(\"historyMessages\", historyMessages);\n        setHistoryMessages(history);\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n      }.bind(this)\n    });\n  };\n\n  const onMyMessage = message => {\n    console.log(\"message\", message);\n    $(message).each(function () {\n      if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n        let recMessages = {\n          text: $(this).find(\"forwarded message body\").text(),\n          stamp: $(this).find(\"delay\").attr(\"stamp\"),\n          type: \"rec\"\n        };\n        setHistoryMessages(recMessages);\n      } else if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] !== selectedContact) {\n        let sentMessages = {\n          text: $(this).find(\"forwarded message body\").text(),\n          stamp: $(this).find(\"delay\").attr(\"stamp\"),\n          type: \"sent\"\n        };\n        setHistoryMessages(sentMessages);\n      }\n    });\n    return true;\n  };\n\n  const handleChangeMsg = event => {\n    changeMessageText(event.target.value);\n  };\n\n  const handleSubmit = () => {\n    let txtJID = selectedContact,\n        txtMsg = messageText,\n        message;\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      console.log(\"txtMsg\", txtMsg);\n      sendMessage(message);\n      setAllMessages(message);\n    }\n    connection.addHandler(onMessage, null, \"message\", null, null, null);\n  }; //Sendig message to contact\n\n\n  const sendMessage = msg => {\n    let reply = $msg({\n      to: msg.to,\n      from: connection.jid,\n      type: \"chat\",\n      id: \"event1\"\n    }).c(\"body\").t(msg.message).up().c(\"request\", {\n      xmlns: \"urn:xmpp:receipts\"\n    });\n    connection.send(reply.tree());\n  };\n\n  const onMessage = msg => {\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      setAllMessages(message);\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"To : \", selectedContact), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \" \", historyMessages.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    });\n  })), React.createElement(\"div\", {\n    className: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, allMessages.map((item, i) => {\n    console.log(\"msgs\");\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.message,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    });\n  }))), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    onChange: handleChangeMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js"],"names":["React","useEffect","useState","MessagePopUp","$","useSelector","ChatBox","selectedContact","state","$iq","$msg","connection","historyMessages","setHistoryMessages","allMessages","setAllMessages","messageText","changeMessageText","getLog","addHandler","onMyMessage","console","log","mam","sentMessages","recMessages","history","archiveIq","type","id","c","xmlns","query","with","onComplete","response","chatDiv","document","querySelector","scrollTo","scrollHeight","bind","message","each","find","attr","split","text","stamp","handleChangeMsg","event","target","value","handleSubmit","txtJID","txtMsg","undefined","alert","to","time","Date","sendMessage","onMessage","msg","reply","from","jid","t","up","send","tree","getAttribute","elems","getElementsByTagName","innerHTML","map","item","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n\n    const [historyMessages, setHistoryMessages] = useState([]);\n    const [allMessages, setAllMessages] = useState([]);\n    const [messageText, changeMessageText] = useState([]);\n\n    useEffect(() => {\n        getLog();\n        connection.addHandler(\n            onMyMessage,\n            null,\n            \"message\",\n            'urn:xmpp:mam:2',\n            null,\n            null\n        );\n    }, [selectedContact]);\n\n    const getLog = () => {\n        console.log(\"connection.mam\", connection.mam)\n        let sentMessages,\n            recMessages,\n            history = [],\n            archiveIq = $iq({\n                type: \"set\",\n                id: \"archive1\"\n            })\n                .c(\"query\", {\n                    xmlns: \"urn:xmpp:mam:2\"\n                });\n        console.log(\"selectedContact\", selectedContact)\n        connection.mam.query(archiveIq, {\n            with: selectedContact,\n            onMyMessage,\n            onComplete: function (response) {\n                console.log(\"historyMessages\", historyMessages)\n                setHistoryMessages(history);\n                let chatDiv = document.querySelector(\".all-messages\");\n                chatDiv.scrollTo(0, chatDiv.scrollHeight);\n            }.bind(this)\n        });\n    }\n    const onMyMessage = (message) => {\n        console.log(\"message\", message)\n\n        $(message).each(function () {\n            if (\n                $(this)\n                    .find(\"forwarded message\")\n                    .attr(\"from\")\n                    .split(\"/\", 1)[0] === selectedContact\n            ) {\n                let recMessages = {\n                    text: $(this)\n                        .find(\"forwarded message body\")\n                        .text(),\n                    stamp: $(this)\n                        .find(\"delay\")\n                        .attr(\"stamp\"),\n                    type: \"rec\"\n                };\n                setHistoryMessages(recMessages);\n\n            } else if (\n                $(this)\n                    .find(\"forwarded message\")\n                    .attr(\"from\")\n                    .split(\"/\", 1)[0] !== selectedContact\n            ) {\n                let sentMessages = {\n                    text: $(this)\n                        .find(\"forwarded message body\")\n                        .text(),\n                    stamp: $(this)\n                        .find(\"delay\")\n                        .attr(\"stamp\"),\n                    type: \"sent\"\n                };\n\n                setHistoryMessages(sentMessages);\n            }\n        });\n\n        return true;\n    }\n\n    const handleChangeMsg = (event) => {\n        changeMessageText(event.target.value)\n    }\n\n    const handleSubmit = () => {\n\n        let txtJID = selectedContact,\n            txtMsg = messageText,\n            message;\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            console.log(\"txtMsg\", txtMsg);\n            sendMessage(message);\n            setAllMessages(message);\n        }\n        connection.addHandler(\n            onMessage,\n            null,\n            \"message\",\n            null,\n            null,\n            null\n        );\n    }\n\n    //Sendig message to contact\n    const sendMessage = (msg) => {\n        let reply = $msg({\n            to: msg.to,\n            from: connection.jid,\n            type: \"chat\",\n            id: \"event1\"\n        })\n            .c(\"body\")\n            .t(msg.message)\n            .up()\n            .c(\"request\", {xmlns: \"urn:xmpp:receipts\"});\n\n        connection.send(reply.tree());\n    }\n\n    const onMessage = (msg) => {\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            setAllMessages(message)\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n\n\n    return (\n        <React.Fragment>\n            <p className=\"userId\">To : {selectedContact}</p>\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n                    {\" \"}\n                    {historyMessages.map((item, i) => {\n                        return (\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.text}\n                                type={item.type}\n                            />\n                        );\n                    })}\n                </div>\n                <div className=\"messages\">\n                    {allMessages.map((item, i) => {\n                        console.log(\"msgs\");\n                        return (\n                            <MessagePopUp\n                                key={i}\n                                sentMsg={item.message}\n                                type={item.type}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    onChange={handleChangeMsg}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}