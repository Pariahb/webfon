{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\nimport HistoryDetailLogs from \"../history-detail-logs\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n  const selectedLogContact = useSelector(state => state.selectedLogContact);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        grouped = _useState2[0],\n        setgrouped = _useState2[1];\n\n  const jalali = require('moment-jalaali'); // const _renderLogs = (group) => {\n  //     let newOutArr = [];\n  //     return Object\n  //         .keys(group)\n  //         .map((key, index) => (\n  //             <div key={index}>\n  //                 <p>{key}</p>\n  //                 {group[key].map((item, i) => (\n  //                     // console.log(\"group[key]\", group[key])\n  //                     // <LogItem item={item} key={i}/>\n  //                     item.direction === \"outbound\" ?\n  //                         newOutArr.push(item)\n  //                 }\n  //                 ))}\n  //\n  //             </div>\n  //         ));\n  // };\n\n\n  const _renderLogs = group => {\n    console.log(\"cdr\", cdrsData);\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, key), // console.log(\"group[key]\", group[key])\n    [group[key].reduce((mp, o) => {\n      if (JSON.stringify([o.direction === \"outbound\", o.from])) {\n        const key = JSON.stringify([o.direction === \"outbound\", o.from]);\n      } else if (JSON.stringify([o.direction === \"inbound\", o.to])) {\n        const key = JSON.stringify([o.direction === \"outbound\", o.from]);\n      }\n\n      if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n        count: 0\n      }));\n      mp.get(key).count++;\n      return mp;\n    }, new Map()).entries()].map((item, i) => console.log(\"group[item]\", item) // Object.entries(item).map((keyName, i) => (\n    //     console.log(\"keyName\", keyName)\n    //     // <LogItem item={keyName} key={i}/>\n    //\n    // ))\n    )));\n  };\n\n  const clearDuplicates = group => {\n    console.log(\"objjjjj\", Object.values(group));\n    return Object.values(group).map((key, index) => {\n      console.log(\"key\", key);\n      const result = [...key.reduce((mp, o) => {\n        const key = JSON.stringify([o.direction, o.from]);\n        if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n          count: 0\n        }));\n        mp.get(key).count++;\n        return mp;\n      }, new Map()).values()]; // console.log(\"grouped\", grouped);\n      // console.log(result);\n      // result.map((ele, i) => (\n      //     <LogItem item={ele} key={i}/>\n      // ));\n      // console.log(\"result0\", result);\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, clearDuplicates(cdrsData), _renderLogs(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","HistoryDetailLogs","GroupedLog","cdrsData","state","selectedLogContact","item","grouped","setgrouped","jalali","require","_renderLogs","group","console","log","Object","keys","map","key","index","reduce","mp","o","JSON","stringify","direction","from","to","has","set","count","get","Map","entries","i","clearDuplicates","values","result"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\nimport HistoryDetailLogs from \"../history-detail-logs\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n    const selectedLogContact = useSelector(state => state.selectedLogContact);\n    const [grouped, setgrouped] = useState({item: []});\n    const jalali = require('moment-jalaali');\n    // const _renderLogs = (group) => {\n    //     let newOutArr = [];\n    //     return Object\n    //         .keys(group)\n    //         .map((key, index) => (\n    //             <div key={index}>\n    //                 <p>{key}</p>\n    //                 {group[key].map((item, i) => (\n    //                     // console.log(\"group[key]\", group[key])\n    //                     // <LogItem item={item} key={i}/>\n    //                     item.direction === \"outbound\" ?\n    //                         newOutArr.push(item)\n    //                 }\n    //                 ))}\n    //\n    //             </div>\n    //         ));\n    // };\n    const _renderLogs = (group) => {\n        console.log(\"cdr\", cdrsData)\n        return Object\n            .keys(group)\n            .map((key, index) => (\n\n                <div key={index}>\n                    <p>{key}</p>\n                    {\n                        // console.log(\"group[key]\", group[key])\n                        [group[key].reduce((mp, o) => {\n                            if (JSON.stringify([o.direction === \"outbound\", o.from])) {\n                                const key = JSON.stringify([o.direction === \"outbound\", o.from]);\n                            } else if (JSON.stringify([o.direction === \"inbound\", o.to])) {\n                                const key = JSON.stringify([o.direction === \"outbound\", o.from]);\n                            }\n\n\n                            if (!mp.has(key)) mp.set(key, {...o, count: 0});\n                            mp.get(key).count++;\n                            return mp;\n                        }, new Map).entries()].map((item, i) => (\n\n                            console.log(\"group[item]\", item)\n\n                            // Object.entries(item).map((keyName, i) => (\n                            //     console.log(\"keyName\", keyName)\n                            //     // <LogItem item={keyName} key={i}/>\n                            //\n                            // ))\n\n\n                        ))\n                    }\n\n                </div>\n            ));\n    };\n    const clearDuplicates = (group) => {\n        console.log(\"objjjjj\", Object.values(group));\n        return Object\n            .values(group)\n            .map((key, index) => {\n                    console.log(\"key\", key)\n                    const result = [...key.reduce((mp, o) => {\n                        const key = JSON.stringify([o.direction, o.from]);\n                        if (!mp.has(key)) mp.set(key, {...o, count: 0});\n                        mp.get(key).count++;\n                        return mp;\n                    }, new Map).values()];\n\n                    // console.log(\"grouped\", grouped);\n                    // console.log(result);\n                    // result.map((ele, i) => (\n                    //     <LogItem item={ele} key={i}/>\n                    // ));\n                    // console.log(\"result0\", result);\n                }\n            )\n    };\n\n    return (\n        <React.Fragment>\n            {\n                clearDuplicates(cdrsData)\n            }\n            {\n                _renderLogs(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}