{"ast":null,"code":"import React,{useEffect}from\"react\";import ContactItem from\"../contact-item\";import\"./style.css\";import{useDispatch,useSelector}from\"react-redux\";import $ from\"jquery\";var ContactsList=function ContactsList(){var dispatch=useDispatch();var $iq=useSelector(function(state){return state.$iq;});var showMainPage=useSelector(function(state){return state.showMainPage;});var connection=useSelector(function(state){return state.connection;});var contacts=useSelector(function(state){return state.contacts;});var rosterStatus=useSelector(function(state){return state.rosterStatus;});/*----------get contact presence-----------*/ //use presences from xmpp server\nvar checkRedux=function checkRedux(item){var finedItem=rosterStatus.filter(function(i){return i.id===item.id;})[0];if(finedItem)return true;else return false;};var onPresence=function onPresence(presence){$(presence).each(function(){var from=$(presence).attr(\"from\");// the jabber_id of the contact\\+\nvar rosterStatusItem={id:from.split(\"/\",1)[0],status:\"\",time:null};if(from!==connection.jid){var presence_type=$(presence).attr(\"type\");// unavailable, subscribed, etc...\nif(!presence_type){var show=$(presence).find(\"show\").text();// this is what gives away, dnd, etc.\nif(!show){if(presence_type===\"unavailable\"){rosterStatusItem.status=\"xa\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}}else{rosterStatusItem.status=\"chat\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}}}else{switch(show){case\"chat\":rosterStatusItem.status=\"chat\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}break;case\"away\":rosterStatusItem.status=\"away\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}break;case\"dnd\":rosterStatusItem.status=\"dnd\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}break;case\"xa\":rosterStatusItem.status=\"xa\";if(checkRedux(rosterStatusItem)===true){dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}else{dispatch({rosterStatusItem:rosterStatusItem,type:\"PUSH_ROSTER_STATUS_ITEM\"});}break;default:rosterStatusItem.status=\"chat\";dispatch({rosterStatusItem:rosterStatusItem,type:\"CHANGE_EACH_ROSTER_STATUS\"});}}}}});return true;//The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n};/*---------------------------------*/var getSearchResult=function getSearchResult(){connection.send($iq({type:\"set\",id:\"search1\",from:connection.jid,to:\"vjud.ejabberd\"}).c(\"query\",{xmlns:\"jabber:iq:search\"}).c(\"x\",{xmlns:\"jabber:x:data\",type:\"submit\"}).c(\"nick\").t(\"salam\").up().c(\"set\",{xmlns:\"http://jabber.org/protocol/rsm\"}).up().c(\"max\").t(\"10\"));};/*---------------------------------*/useEffect(function(){connection.addHandler(onPresence,null,\"presence\",null,null,null);},[showMainPage]);/*----------get contact presence-----------*/return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"col-sm-4 contacts\"},contacts.map(function(item,i){// Return the element. Also pass key\nreturn React.createElement(ContactItem,{key:i,item:item});})));};export default ContactsList;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/contacts-list/index.js"],"names":["React","useEffect","ContactItem","useDispatch","useSelector","$","ContactsList","dispatch","$iq","state","showMainPage","connection","contacts","rosterStatus","checkRedux","item","finedItem","filter","i","id","onPresence","presence","each","from","attr","rosterStatusItem","split","status","time","jid","presence_type","show","find","text","type","getSearchResult","send","to","c","xmlns","t","up","addHandler","map"],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactsList = () => {\n    const dispatch = useDispatch();\n    const $iq = useSelector(state => state.$iq);\n    const showMainPage = useSelector(state => state.showMainPage);\n    const connection = useSelector(state => state.connection);\n    const contacts = useSelector(state => state.contacts);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const checkRedux = (item) => {\n        const finedItem = rosterStatus.filter(i => i.id === item.id)[0]\n        if (finedItem) return true;\n        else return false\n    };\n    const onPresence = (presence) => {\n\n        $(presence).each(function () {\n\n                let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\+\n                let rosterStatusItem = {\n                    id: from.split(\"/\", 1)[0],\n                    status: \"\",\n                    time: null\n                };\n\n                if (from !== connection.jid) {\n                    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n                    if (!presence_type) {\n                        let show = $(presence)\n                            .find(\"show\")\n                            .text(); // this is what gives away, dnd, etc.\n                        if (!show) {\n                            if (presence_type === \"unavailable\") {\n                                rosterStatusItem.status = \"xa\";\n                                if (checkRedux(rosterStatusItem) === true) {\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                } else {\n                                    dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                }\n                            } else {\n                                rosterStatusItem.status = \"chat\";\n                                if (checkRedux(rosterStatusItem) === true) {\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                } else {\n                                    dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                }\n\n                            }\n                        } else {\n                            switch (show) {\n                                case \"chat\" :\n                                    rosterStatusItem.status = \"chat\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"away\" :\n                                    rosterStatusItem.status = \"away\";\n\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"dnd\":\n                                    rosterStatusItem.status = \"dnd\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n                                    }\n                                    break;\n                                case \"xa\":\n                                    rosterStatusItem.status = \"xa\";\n                                    if (checkRedux(rosterStatusItem) === true) {\n                                        dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                                    } else {\n                                        dispatch({rosterStatusItem, type: \"PUSH_ROSTER_STATUS_ITEM\"});\n\n                                    }\n\n                                    break;\n                                default :\n                                    rosterStatusItem.status = \"chat\";\n                                    dispatch({rosterStatusItem, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                            }\n                        }\n\n                    }\n                }\n\n            }\n        );\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*---------------------------------*/\n    const getSearchResult = () => {\n        connection.send($iq({\n            type: \"set\",\n            id: \"search1\",\n            from: connection.jid,\n            to: \"vjud.ejabberd\"\n        }).c(\"query\", {xmlns: \"jabber:iq:search\"}).c(\"x\", {\n            xmlns: \"jabber:x:data\",\n            type: \"submit\"\n        }).c(\"nick\").t(\"salam\").up().c(\"set\",{xmlns: \"http://jabber.org/protocol/rsm\"}).up().c(\"max\").t(\"10\"))\n    };\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n\n            <div className=\"col-sm-4 contacts\">\n                {/*<div className=\"header\">*/}\n                {/*    <p>لیست پیام ها</p>*/}\n                {/*</div>*/}\n                {contacts.map((item, i) => {\n                    // Return the element. Also pass key\n                    return (\n\n                        <ContactItem\n                            key={i}\n                            item={item}\n                        />\n\n                    );\n                })}\n\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ContactsList;\n"]},"metadata":{},"sourceType":"module"}