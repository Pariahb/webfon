{"ast":null,"code":"const Utils = require('./Utils');\n\nconst JsSIP_C = require('./Constants');\n\nconst Grammar = require('./Grammar');\n\nconst URI = require('./URI');\n\nconst Socket = require('./Socket');\n\nconst Exceptions = require('./Exceptions'); // Default settings.\n\n\nexports.settings = {\n  // SIP authentication.\n  authorization_user: null,\n  password: null,\n  realm: null,\n  ha1: null,\n  // SIP account.\n  display_name: null,\n  uri: null,\n  contact_uri: null,\n  // SIP instance id (GRUU).\n  instance_id: null,\n  // Preloaded SIP Route header field.\n  use_preloaded_route: false,\n  // Session parameters.\n  session_timers: true,\n  session_timers_refresh_method: JsSIP_C.UPDATE,\n  no_answer_timeout: 60,\n  // Registration parameters.\n  register: true,\n  register_expires: 600,\n  registrar_server: null,\n  // Connection options.\n  sockets: null,\n  connection_recovery_max_interval: JsSIP_C.CONNECTION_RECOVERY_MAX_INTERVAL,\n  connection_recovery_min_interval: JsSIP_C.CONNECTION_RECOVERY_MIN_INTERVAL,\n\n  /*\n   * Host address.\n   * Value to be set in Via sent_by and host part of Contact FQDN.\n  */\n  via_host: \"\".concat(Utils.createRandomToken(12), \".invalid\")\n}; // Configuration checks.\n\nconst checks = {\n  mandatory: {\n    sockets(sockets) {\n      /* Allow defining sockets parameter as:\n       *  Socket: socket\n       *  Array of Socket: [socket1, socket2]\n       *  Array of Objects: [{socket: socket1, weight:1}, {socket: Socket2, weight:0}]\n       *  Array of Objects and Socket: [{socket: socket1}, socket2]\n       */\n      const _sockets = [];\n\n      if (Socket.isSocket(sockets)) {\n        _sockets.push({\n          socket: sockets\n        });\n      } else if (Array.isArray(sockets) && sockets.length) {\n        for (const socket of sockets) {\n          if (Object.prototype.hasOwnProperty.call(socket, 'socket') && Socket.isSocket(socket.socket)) {\n            _sockets.push(socket);\n          } else if (Socket.isSocket(socket)) {\n            _sockets.push({\n              socket: socket\n            });\n          }\n        }\n      } else {\n        return;\n      }\n\n      return _sockets;\n    },\n\n    uri(uri) {\n      if (!/^sip:/i.test(uri)) {\n        uri = \"\".concat(JsSIP_C.SIP, \":\").concat(uri);\n      }\n\n      const parsed = URI.parse(uri);\n\n      if (!parsed) {\n        return;\n      } else if (!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    }\n\n  },\n  optional: {\n    authorization_user(authorization_user) {\n      if (Grammar.parse(\"\\\"\".concat(authorization_user, \"\\\"\"), 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorization_user;\n      }\n    },\n\n    user_agent(user_agent) {\n      if (typeof user_agent === 'string') {\n        return user_agent;\n      }\n    },\n\n    connection_recovery_max_interval(connection_recovery_max_interval) {\n      if (Utils.isDecimal(connection_recovery_max_interval)) {\n        const value = Number(connection_recovery_max_interval);\n\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connection_recovery_min_interval(connection_recovery_min_interval) {\n      if (Utils.isDecimal(connection_recovery_min_interval)) {\n        const value = Number(connection_recovery_min_interval);\n\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    contact_uri(contact_uri) {\n      if (typeof contact_uri === 'string') {\n        const uri = Grammar.parse(contact_uri, 'SIP_URI');\n\n        if (uri !== -1) {\n          return uri;\n        }\n      }\n    },\n\n    display_name(display_name) {\n      return display_name;\n    },\n\n    instance_id(instance_id) {\n      if (/^uuid:/i.test(instance_id)) {\n        instance_id = instance_id.substr(5);\n      }\n\n      if (Grammar.parse(instance_id, 'uuid') === -1) {\n        return;\n      } else {\n        return instance_id;\n      }\n    },\n\n    no_answer_timeout(no_answer_timeout) {\n      if (Utils.isDecimal(no_answer_timeout)) {\n        const value = Number(no_answer_timeout);\n\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    session_timers(session_timers) {\n      if (typeof session_timers === 'boolean') {\n        return session_timers;\n      }\n    },\n\n    session_timers_refresh_method(method) {\n      if (typeof method === 'string') {\n        method = method.toUpperCase();\n\n        if (method === JsSIP_C.INVITE || method === JsSIP_C.UPDATE) {\n          return method;\n        }\n      }\n    },\n\n    password(password) {\n      return String(password);\n    },\n\n    realm(realm) {\n      return String(realm);\n    },\n\n    ha1(ha1) {\n      return String(ha1);\n    },\n\n    register(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    register_expires(register_expires) {\n      if (Utils.isDecimal(register_expires)) {\n        const value = Number(register_expires);\n\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrar_server(registrar_server) {\n      if (!/^sip:/i.test(registrar_server)) {\n        registrar_server = \"\".concat(JsSIP_C.SIP, \":\").concat(registrar_server);\n      }\n\n      const parsed = URI.parse(registrar_server);\n\n      if (!parsed) {\n        return;\n      } else if (parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    use_preloaded_route(use_preloaded_route) {\n      if (typeof use_preloaded_route === 'boolean') {\n        return use_preloaded_route;\n      }\n    }\n\n  }\n};\n\nexports.load = (dst, src) => {\n  // Check Mandatory parameters.\n  for (const parameter in checks.mandatory) {\n    if (!src.hasOwnProperty(parameter)) {\n      throw new Exceptions.ConfigurationError(parameter);\n    } else {\n      const value = src[parameter];\n      const checked_value = checks.mandatory[parameter](value);\n\n      if (checked_value !== undefined) {\n        dst[parameter] = checked_value;\n      } else {\n        throw new Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  } // Check Optional parameters.\n\n\n  for (const parameter in checks.optional) {\n    if (src.hasOwnProperty(parameter)) {\n      const value = src[parameter];\n      /* If the parameter value is null, empty string, undefined, empty array\n       * or it's a number with NaN value, then apply its default value.\n       */\n\n      if (Utils.isEmpty(value)) {\n        continue;\n      }\n\n      const checked_value = checks.optional[parameter](value);\n\n      if (checked_value !== undefined) {\n        dst[parameter] = checked_value;\n      } else {\n        throw new Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}