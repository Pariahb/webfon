{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst LoginPage = () => {\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        jidValue = _useState2[0],\n        setJidValue = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        passValue = _useState4[0],\n        setPassValue = _useState4[1];\n\n  const _useState5 = useState('connect'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loginButton = _useState6[0],\n        changeLoginButton = _useState6[1];\n\n  const dispatch = useDispatch(); //strophe connection process\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\");\n      setShowStatus(true);\n      getRoster();\n      sendPriority();\n      console.log(\"jid\", connection.jid);\n      let server = \"77.104.116.225:5280\"; // connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\n\n      connection.send($iq({\n        type: \"set\",\n        id: \"search1\",\n        from: connection.jid\n      }).c(\"query\", {\n        xmlns: \"jabber:iq:search\"\n      }).c(\"x\", {\n        xmlns: \"jabber:x:data\",\n        type: \"submit\"\n      }).c(\"feild\", {\n        var: \"user\"\n      }).c(\"value\").t(\"admin\"));\n    }\n  };\n  /*-----------------Get Contacts List (step1)----------------=*/\n  //send xml to get contacts from xmpp server\n\n\n  const getRoster = () => {\n    const newIq = $iq({\n      type: \"get\",\n      id: \"r1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:roster\"\n    });\n    connection.sendIQ(newIq, rosterReceived); // connection.sendIQ(newIq);\n  };\n  /*-----------------Get Contacts List (step1)----------------*/\n\n  /*-----------------Received contacts Time (step2)----------------*/\n  //how to use received rosters from xmpp server\n\n\n  const rosterReceived = iq => {\n    let contactJid,\n        rosterName,\n        myContacts = [];\n    $(iq).find(\"item\").each(function () {\n      contactJid = $(this).attr(\"jid\"); // The jabber_id of your contact\n\n      if ($(this).attr(\"name\")) {\n        rosterName = $(this).attr(\"name\");\n      } else {\n        rosterName = \"\";\n      } // The jabber_id of your contact\n      // You can probably put them in a unordered list and and use their jids as ids.\n\n\n      myContacts = myContacts.concat({\n        name: rosterName,\n        jid: contactJid\n      });\n    });\n    getContacts(myContacts);\n    console.log(\"myContacts\", myContacts);\n  };\n  /*-----------------/Received contacts (step2)----------------*/\n\n  /*-----------------Set priority ----------------*/\n  //set priority to specify the device\n\n\n  const sendPriority = () => {\n    connection.send($pres().c(\"priority\").t(\"10\").up().c(\"rap\", {\n      xmlns: \"urn:xmpp:rap:3\",\n      ns: \"urn:xmpp:jingle:apps:rtp:0\",\n      num: '5'\n    })); //send request for available features\n\n    connection.sendIQ($iq({\n      type: \"get\"\n    }).c(\"query\", {\n      xmlns: \"http://jabber.org/protocol/disco#info\"\n    }));\n  };\n  /*-----------------/Get priority ----------------*/\n\n  /*---------------------------------*/\n  //Show Or hide Main page.\n\n\n  const setShowStatus = showMainPage => {\n    console.log(\"show\", showMainPage);\n    dispatch({\n      showMainPage,\n      type: 'SHOW_MAIN_PAGE'\n    });\n  };\n  /*---------------------------------*/\n\n  /*---------------------------------*/\n  //set received contacts from xmpp server to global state\n\n\n  const getContacts = contacts => {\n    console.log(\"GET_CONTACTS\", contacts);\n    dispatch({\n      contacts,\n      type: 'GET_CONTACTS'\n    });\n  };\n  /*---------------------------------*/\n\n  /*-----------------------------------*/\n  //action for login form\n\n\n  const handleChangeJID = event => {\n    // console.log(\"jidValue\", event.target.value)\n    setJidValue(event.target.value);\n    console.log(\"jidValue\", jidValue);\n  };\n\n  const handleChangePass = event => {\n    // console.log(\"passValue\", event.target.value)\n    setPassValue(event.target.value);\n    console.log(\"passValue\", ...passValue);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (jidValue === undefined || jidValue === \"\") {\n      alert(\"Blank JID\");\n    } else if (passValue === undefined || passValue === \"\") alert(\"Empty pass, please type password\");else {\n      if (loginButton === \"connect\") {\n        changeLoginButton(\"disconnect\");\n        connection.connect(jidValue, passValue, onConnect);\n      } else {\n        connection.disconnect();\n        changeLoginButton(\"connect\");\n      }\n    }\n  };\n  /*-----------------------------------*/\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    label: \"JID\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"text\",\n    placeholder: \"enter your JID...\",\n    onChange: handleChangeJID,\n    value: jidValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    label: \"Password\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"password\",\n    placeholder: \"enter your password...\",\n    onChange: handleChangePass,\n    value: passValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    id: \"connect\",\n    value: loginButton,\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, loginButton)))));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js"],"names":["React","useState","useDispatch","useSelector","$","LoginPage","connection","state","$pres","$iq","strophe","jidValue","setJidValue","passValue","setPassValue","loginButton","changeLoginButton","dispatch","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","setShowStatus","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","getRoster","sendPriority","jid","server","send","type","id","from","c","xmlns","var","t","newIq","sendIQ","rosterReceived","iq","contactJid","rosterName","myContacts","find","each","attr","concat","name","getContacts","up","ns","num","showMainPage","contacts","handleChangeJID","event","target","value","handleChangePass","handleSubmit","preventDefault","undefined","alert","connect","disconnect"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst LoginPage = () => {\n    const connection = useSelector(state => state.connection);\n    const $pres = useSelector(state => state.$pres);\n    const $iq = useSelector(state => state.$iq);\n    const strophe = useSelector(state => state.strophe);\n    const [jidValue, setJidValue] = useState('');\n    const [passValue, setPassValue] = useState('');\n    const [loginButton, changeLoginButton] = useState('connect');\n    const dispatch = useDispatch();\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            setShowStatus(true)\n            getRoster();\n            sendPriority();\n\n            console.log(\"jid\", connection.jid)\n            let server = \"77.104.116.225:5280\";\n            // connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\n            connection.send($iq({\n                type: \"set\",\n                id: \"search1\",\n                from: connection.jid,\n            }).c(\"query\", {xmlns: \"jabber:iq:search\"}).c(\"x\",{xmlns: \"jabber:x:data\", type: \"submit\"}).c(\"feild\",{ var: \"user\"}).c(\"value\").t(\"admin\"))\n        }\n    }\n    /*-----------------Get Contacts List (step1)----------------=*/\n    //send xml to get contacts from xmpp server\n    const getRoster = () => {\n        const newIq = $iq({type: \"get\", id: \"r1\"})\n            .c(\"query\", {xmlns: \"jabber:iq:roster\"})\n        connection.sendIQ(newIq, rosterReceived);\n        // connection.sendIQ(newIq);\n    }\n\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Received contacts Time (step2)----------------*/\n    //how to use received rosters from xmpp server\n    const rosterReceived = (iq) => {\n        let contactJid,\n            rosterName,\n            myContacts = [];\n        $(iq)\n            .find(\"item\")\n            .each(function () {\n                contactJid = $(this).attr(\"jid\"); // The jabber_id of your contact\n                if ($(this).attr(\"name\")) {\n                    rosterName = $(this).attr(\"name\");\n                } else {\n                    rosterName = \"\";\n                }\n                // The jabber_id of your contact\n                // You can probably put them in a unordered list and and use their jids as ids.\n                myContacts = myContacts.concat({\n                    name: rosterName,\n                    jid: contactJid\n                });\n            });\n        getContacts(myContacts);\n        console.log(\"myContacts\", myContacts)\n\n    };\n\n    /*-----------------/Received contacts (step2)----------------*/\n\n    /*-----------------Set priority ----------------*/\n    //set priority to specify the device\n    const sendPriority = () => {\n        connection.send(\n            $pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:3\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        //send request for available features\n        connection.sendIQ($iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    }\n\n    /*-----------------/Get priority ----------------*/\n    /*---------------------------------*/\n    //Show Or hide Main page.\n    const setShowStatus = (showMainPage) => {\n        console.log(\"show\", showMainPage)\n        dispatch({showMainPage, type: 'SHOW_MAIN_PAGE'})\n    }\n    /*---------------------------------*/\n\n\n    /*---------------------------------*/\n    //set received contacts from xmpp server to global state\n    const getContacts = (contacts) => {\n        console.log(\"GET_CONTACTS\", contacts)\n        dispatch({contacts, type: 'GET_CONTACTS'})\n    }\n    /*---------------------------------*/\n\n    /*-----------------------------------*/\n    //action for login form\n    const handleChangeJID = (event) => {\n        // console.log(\"jidValue\", event.target.value)\n        setJidValue(event.target.value)\n        console.log(\"jidValue\", jidValue)\n\n    }\n    const handleChangePass = (event) => {\n        // console.log(\"passValue\", event.target.value)\n        setPassValue(event.target.value)\n        console.log(\"passValue\", ...passValue)\n\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (jidValue === undefined || jidValue === \"\") {\n            alert(\"Blank JID\");\n        } else if (passValue === undefined || passValue === \"\")\n            alert(\"Empty pass, please type password\");\n        else {\n            if (loginButton === \"connect\") {\n                changeLoginButton(\"disconnect\")\n                connection.connect(\n                    jidValue,\n                    passValue,\n                    onConnect\n                );\n            } else {\n                connection.disconnect();\n                changeLoginButton(\"connect\")\n\n            }\n        }\n    }\n    /*-----------------------------------*/\n\n    return (\n\n\n        <React.Fragment>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <form>\n                        <input\n                            label=\"JID\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"text\"\n                            placeholder=\"enter your JID...\"\n                            onChange={handleChangeJID}\n                            value={jidValue}\n                        />\n                        <input\n                            label=\"Password\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"password\"\n                            placeholder=\"enter your password...\"\n                            onChange={handleChangePass}\n                            value={passValue}\n                        />\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            id=\"connect\"\n                            value={loginButton}\n                            onClick={handleSubmit}\n                        >{loginButton}</button>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}