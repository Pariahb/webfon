{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n\n  const _renderLogs = group => {\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, key.replace('Logs', '')), group[key].map((item, i) => React.createElement(LogItem, {\n      item: item,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }))));\n  };\n\n  const clearDuplicates = group => {\n    return Object.keys(group).map((key, index) => {\n      for (let i = 0; i < group[key].length; i++) {\n        let current = group[key][i];\n        console.log(\"current\", current);\n        console.log(\" group[key][i]\", group[key]);\n        group[key][i].forEach(element => {\n          let countedData = group[key][i].filter(el => {\n            return el[key] == element[key];\n          }).length;\n          console.log(element[key] + \": \" + countedData);\n        });\n        group[key][i] = group[key][i].filter((item, index, self) => self.findIndex(t => t[key] === item[key] && item[key] != null) === index);\n        console.log(\"data\", group[key][i]);\n        return group[key][i];\n      } // console.log(group[key])\n\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, _renderLogs(cdrsData), clearDuplicates(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","GroupedLog","cdrsData","state","_renderLogs","group","Object","keys","map","key","index","replace","item","i","clearDuplicates","length","current","console","log","forEach","element","countedData","filter","el","self","findIndex","t"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;;AAEA,QAAME,WAAW,GAAIC,KAAD,IAAW;AAC3B,WAAOC,MAAM,CACRC,IADE,CACGF,KADH,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KACD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAJ,CADJ,EAEKN,KAAK,CAACI,GAAD,CAAL,CAAWD,GAAX,CAAe,CAACI,IAAD,EAAOC,CAAP,KACZ,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,GAAG,EAAEC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,CAHD,CAAP;AAUH,GAXD;;AAYA,QAAMC,eAAe,GAAIT,KAAD,IAAW;AAC/B,WAAOC,MAAM,CACRC,IADE,CACGF,KADH,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACb,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACI,GAAD,CAAL,CAAWM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,YAAIG,OAAO,GAAGX,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,CAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,OAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bb,KAAK,CAACI,GAAD,CAAnC;AAEAJ,QAAAA,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,EAAcM,OAAd,CAAsBC,OAAO,IAAI;AAE7B,cAAIC,WAAW,GAAGhB,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,EAAcS,MAAd,CAAsBC,EAAD,IAAQ;AAC3C,mBAAOA,EAAE,CAACd,GAAD,CAAF,IAAWW,OAAO,CAACX,GAAD,CAAzB;AACH,WAFiB,EAEfM,MAFH;AAIAE,UAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,CAACX,GAAD,CAAP,GAAe,IAAf,GAAsBY,WAAlC;AACH,SAPD;AASAhB,QAAAA,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,IAAgBR,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,EAAcS,MAAd,CAAqB,CAACV,IAAD,EAAOF,KAAP,EAAcc,IAAd,KAAuBA,IAAI,CAACC,SAAL,CAAgBC,CAAC,IAAIA,CAAC,CAACjB,GAAD,CAAD,KAAWG,IAAI,CAACH,GAAD,CAAf,IAAwBG,IAAI,CAACH,GAAD,CAAJ,IAAa,IAA1D,MAAoEC,KAAhH,CAAhB;AAEAO,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBb,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,CAAnB;AACA,eAAOR,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,CAAP;AACH,OAnBY,CAoBb;;AACH,KAvBF,CAAP;AAyBH,GA1BD;;AA4BA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQT,WAAW,CAACF,QAAD,CAFnB,EAKQY,eAAe,CAACZ,QAAD,CALvB,CADJ;AAWH,CAtDD;;AAyDA,eAAeD,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n\n    const _renderLogs = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => (\n                <div key={index} >\n                    <p>{key.replace('Logs', '')}</p>\n                    {group[key].map((item, i) => (\n                        <LogItem item={item} key={i}/>\n                    ))}\n                </div>\n            ));\n    };\n    const clearDuplicates = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => {\n                    for (let i = 0; i < group[key].length; i++) {\n                        let current = group[key][i];\n                        console.log(\"current\",current);\n                        console.log(\" group[key][i]\", group[key]);\n\n                        group[key][i].forEach(element => {\n\n                            let countedData = group[key][i].filter((el) => {\n                                return el[key] == element[key]\n                            }).length;\n\n                            console.log(element[key] + \": \" + countedData);\n                        });\n\n                        group[key][i] = group[key][i].filter((item, index, self) => self.findIndex( t => t[key] === item[key] && item[key] != null) === index )\n\n                        console.log(\"data\",group[key][i]);\n                        return group[key][i];\n                    }\n                    // console.log(group[key])\n                }\n            )\n    }\n\n    return (\n        <React.Fragment>\n            {\n                _renderLogs(cdrsData)\n            }\n            {\n                clearDuplicates(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}