{"ast":null,"code":"import _slicedToArray from\"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import $ from\"jquery\";var LoginPage=function LoginPage(){var connection=useSelector(function(state){return state.connection;});var historyMessages=useSelector(function(state){return state.historyMessages;});var $pres=useSelector(function(state){return state.$pres;});var $iq=useSelector(function(state){return state.$iq;});var strophe=useSelector(function(state){return state.strophe;});var _useState=useState(''),_useState2=_slicedToArray(_useState,2),jidValue=_useState2[0],setJidValue=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),passValue=_useState4[0],setPassValue=_useState4[1];var _useState5=useState('connect'),_useState6=_slicedToArray(_useState5,2),loginButton=_useState6[0],changeLoginButton=_useState6[1];var dispatch=useDispatch();//strophe connection process\nvar onConnect=function onConnect(status){console.log(\"window.Strophe.Status\",strophe.Status);if(status===strophe.Status.CONNECTING){console.log(\"Strophe is connecting.\");}else if(status===strophe.Status.CONNFAIL){console.log(\"Strophe failed to connect.\");setShowStatus(false);}else if(status===strophe.Status.AUTHENTICATING){console.log(\"Strophe is AUTHENTICATING.\");}else if(status===strophe.Status.AUTHFAIL){console.log(\"Strophe is AUTHFAIL.\");setShowStatus(false);}else if(status===strophe.Status.DISCONNECTING){console.log(\"Strophe is disconnecting.\");}else if(status===strophe.Status.DISCONNECTED){console.log(\"Strophe is disconnected.\");setShowStatus(false);}else if(status===strophe.Status.CONNECTED){console.log(\"Strophe is connected.\");setShowStatus(true);getRoster();sendPriority();connection.addHandler(onReceiveMessage,null,\"message\",null,null,null);console.log(\"jid\",connection.jid);// connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\nconnection.send($iq({from:connection.jid,id:\"v1\",type:\"get\"}).c(\"vCard\",{xmlns:\"vcard-temp\"}));connection.send($iq({from:connection.jid,id:\"enable1\",type:\"set\"}).c(\"enable\",{xmlns:\"urn:xmpp:carbons:2\"}));}};var onReceiveMessage=function onReceiveMessage(msg){console.log(\"msg\",msg);var from=msg.getAttribute(\"from\");var type=msg.getAttribute(\"type\");var elems=msg.getElementsByTagName(\"body\");var recs;if(type===\"error\"){alert(\"An error occured! \");return;}if(type===\"chat\"){var message={from:from,message:elems[0].innerHTML,time:new Date(),type:\"rec\"};var recMsg={text:message.message,stamp:message.time.toString(),type:\"rec\"};dispatch({newMessage:recMsg,type:'PUSH_HISTORY_MESSAGES'});}return true;//The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n};/*-----------------Get Contacts List (step1)----------------=*/ //send xml to get contacts from xmpp server\nvar getRoster=function getRoster(){var newIq=$iq({type:\"get\",id:\"r1\"}).c(\"query\",{xmlns:\"jabber:iq:roster\"});connection.sendIQ(newIq,rosterReceived);};/*-----------------Get Contacts List (step1)----------------*/ /*-----------------Received contacts (step2)----------------*/ //how to use received rosters from xmpp server\nvar rosterReceived=function rosterReceived(iq){var contactJid,rosterName,myContacts=[];$(iq).find(\"item\").each(function(){contactJid=$(this).attr(\"jid\");// The jabber_id of your contact\nif($(this).attr(\"name\")){rosterName=$(this).attr(\"name\");}else{rosterName=\"\";}// The jabber_id of your contact\n// You can probably put them in a unordered list and and use their jids as ids.\nmyContacts=myContacts.concat({name:rosterName,jid:contactJid});});getContacts(myContacts);};/*-----------------/Received contacts (step2)----------------*/ /*-----------------Set priority ----------------*/ //set priority to specify the device\nvar sendPriority=function sendPriority(){connection.send($pres().c(\"priority\").t(\"10\").up().c(\"rap\",{xmlns:\"urn:xmpp:rap:3\",ns:\"urn:xmpp:jingle:apps:rtp:0\",num:'5'}));//send request for available features\nconnection.sendIQ($iq({type:\"get\"}).c(\"query\",{xmlns:\"http://jabber.org/protocol/disco#info\"}));};/*-----------------/Get priority ----------------*/ /*---------------------------------*/ //Show Or hide Main page.\nvar setShowStatus=function setShowStatus(showMainPage){dispatch({showMainPage:showMainPage,type:'SHOW_MAIN_PAGE'});};/*---------------------------------*/ /*---------------------------------*/ //set received contacts from xmpp server to global state\nvar getContacts=function getContacts(contacts){dispatch({contacts:contacts,type:'GET_CONTACTS'});};/*---------------------------------*/var handleKeyDown=function handleKeyDown(event){if(event.key==='Enter'){handleSubmit(event);}};/*-----------------------------------*/ //action for login form\nvar handleChangeJID=function handleChangeJID(event){setJidValue(event.target.value);};var handleChangePass=function handleChangePass(event){// console.log(\"passValue\", event.target.value)\nsetPassValue(event.target.value);};var handleSubmit=function handleSubmit(event){event.preventDefault();if(jidValue===undefined||jidValue===\"\"){alert(\"Blank JID\");}else if(passValue===undefined||passValue===\"\")alert(\"Empty pass, please type password\");else{if(loginButton===\"connect\"){changeLoginButton(\"disconnect\");connection.connect(jidValue,passValue,onConnect);}else{connection.disconnect();changeLoginButton(\"connect\");}}};/*-----------------------------------*/return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"row\"},React.createElement(\"div\",{className:\"col\"},React.createElement(\"form\",null,React.createElement(\"input\",{label:\"JID\",className:\"col-sm-2 col-form-label\",size:\"col-sm-10\",type:\"text\",placeholder:\"enter your JID...\",onChange:handleChangeJID,onKeyDown:handleKeyDown,value:jidValue}),React.createElement(\"input\",{label:\"Password\",className:\"col-sm-2 col-form-label\",size:\"col-sm-10\",type:\"password\",placeholder:\"enter your password...\",onChange:handleChangePass,onKeyDown:handleKeyDown,value:passValue}),React.createElement(\"button\",{type:\"submit\",className:\"btn btn-primary\",id:\"connect\",value:loginButton,onClick:handleSubmit},loginButton)))));};export default LoginPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/login-page/index.js"],"names":["React","useState","useDispatch","useSelector","$","LoginPage","connection","state","historyMessages","$pres","$iq","strophe","jidValue","setJidValue","passValue","setPassValue","loginButton","changeLoginButton","dispatch","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","setShowStatus","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","getRoster","sendPriority","addHandler","onReceiveMessage","jid","send","from","id","type","c","xmlns","msg","getAttribute","elems","getElementsByTagName","recs","alert","message","innerHTML","time","Date","recMsg","text","stamp","toString","newMessage","newIq","sendIQ","rosterReceived","iq","contactJid","rosterName","myContacts","find","each","attr","concat","name","getContacts","t","up","ns","num","showMainPage","contacts","handleKeyDown","event","key","handleSubmit","handleChangeJID","target","value","handleChangePass","preventDefault","undefined","connect","disconnect"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst LoginPage = () => {\n    const connection = useSelector(state => state.connection);\n    const historyMessages = useSelector(state => state.historyMessages);\n\n    const $pres = useSelector(state => state.$pres);\n    const $iq = useSelector(state => state.$iq);\n    const strophe = useSelector(state => state.strophe);\n    const [jidValue, setJidValue] = useState('');\n    const [passValue, setPassValue] = useState('');\n    const [loginButton, changeLoginButton] = useState('connect');\n    const dispatch = useDispatch();\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            setShowStatus(true)\n            getRoster();\n            sendPriority();\n            connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n\n            console.log(\"jid\", connection.jid)\n            // connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\n\n            connection.send($iq({from: connection.jid, id: \"v1\", type: \"get\"}).c(\"vCard\", {xmlns: \"vcard-temp\"}));\n            connection.send($iq({\n                from: connection.jid,\n                id: \"enable1\",\n                type: \"set\"\n            }).c(\"enable\", {xmlns: \"urn:xmpp:carbons:2\"}));\n\n        }\n    };\n    const onReceiveMessage = (msg) => {\n        console.log(\"msg\", msg)\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        let recs;\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            let recMsg = {\n                text: message.message,\n                stamp: message.time.toString(),\n                type: \"rec\"\n            };\n            dispatch({newMessage: recMsg, type: 'PUSH_HISTORY_MESSAGES'})\n\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*-----------------Get Contacts List (step1)----------------=*/\n    //send xml to get contacts from xmpp server\n    const getRoster = () => {\n        const newIq = $iq({type: \"get\", id: \"r1\"})\n            .c(\"query\", {xmlns: \"jabber:iq:roster\"})\n        connection.sendIQ(newIq, rosterReceived);\n    };\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Received contacts (step2)----------------*/\n    //how to use received rosters from xmpp server\n    const rosterReceived = (iq) => {\n        let contactJid,\n            rosterName,\n            myContacts = [];\n        $(iq)\n            .find(\"item\")\n            .each(function () {\n                contactJid = $(this).attr(\"jid\"); // The jabber_id of your contact\n                if ($(this).attr(\"name\")) {\n                    rosterName = $(this).attr(\"name\");\n                } else {\n                    rosterName = \"\";\n                }\n                // The jabber_id of your contact\n                // You can probably put them in a unordered list and and use their jids as ids.\n                myContacts = myContacts.concat({\n                    name: rosterName,\n                    jid: contactJid\n                });\n            });\n        getContacts(myContacts);\n    };\n\n    /*-----------------/Received contacts (step2)----------------*/\n\n    /*-----------------Set priority ----------------*/\n    //set priority to specify the device\n    const sendPriority = () => {\n        connection.send(\n            $pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:3\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        //send request for available features\n        connection.sendIQ($iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    };\n\n    /*-----------------/Get priority ----------------*/\n    /*---------------------------------*/\n    //Show Or hide Main page.\n    const setShowStatus = (showMainPage) => {\n        dispatch({showMainPage, type: 'SHOW_MAIN_PAGE'})\n    };\n    /*---------------------------------*/\n\n\n    /*---------------------------------*/\n    //set received contacts from xmpp server to global state\n    const getContacts = (contacts) => {\n        dispatch({contacts, type: 'GET_CONTACTS'})\n    }\n    /*---------------------------------*/\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleSubmit(event);\n        }\n    };\n    /*-----------------------------------*/\n    //action for login form\n    const handleChangeJID = (event) => {\n        setJidValue(event.target.value)\n\n    }\n    const handleChangePass = (event) => {\n        // console.log(\"passValue\", event.target.value)\n        setPassValue(event.target.value);\n    };\n    const handleSubmit = (event) => {\n\n        event.preventDefault();\n        if (jidValue === undefined || jidValue === \"\") {\n            alert(\"Blank JID\");\n        } else if (passValue === undefined || passValue === \"\")\n            alert(\"Empty pass, please type password\");\n        else {\n            if (loginButton === \"connect\") {\n                changeLoginButton(\"disconnect\")\n                connection.connect(\n                    jidValue,\n                    passValue,\n                    onConnect\n                );\n            } else {\n                connection.disconnect();\n                changeLoginButton(\"connect\")\n\n            }\n        }\n    };\n    /*-----------------------------------*/\n\n    return (\n\n\n        <React.Fragment>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <form>\n                        <input\n                            label=\"JID\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"text\"\n                            placeholder=\"enter your JID...\"\n                            onChange={handleChangeJID}\n                            onKeyDown={handleKeyDown}\n                            value={jidValue}\n                        />\n                        <input\n                            label=\"Password\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"password\"\n                            placeholder=\"enter your password...\"\n                            onChange={handleChangePass}\n                            onKeyDown={handleKeyDown}\n                            value={passValue}\n                        />\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary\"\n                            id=\"connect\"\n                            value={loginButton}\n                            onClick={handleSubmit}\n                        >{loginButton}</button>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}