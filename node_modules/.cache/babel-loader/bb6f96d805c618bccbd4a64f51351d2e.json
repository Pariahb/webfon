{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { SipProvider } from \"react-sip\";\n\nconst MakeCall = () => {\n  useEffect(() => {\n    consle.log(\"status\");\n  });\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(SipProvider, {\n    host: \"77.104.116.187\",\n    port: 7000,\n    pathname: \"/ws\" // Path in socket URI (e.g. wss://sip.example.com:7443/ws); \"\" by default\n    ,\n    user: \"704@admin\",\n    password: \"704704\" // usually required (e.g. from ENV or props)\n    ,\n    autoRegister: true // true by default, see jssip.UA option register\n    ,\n    autoAnswer: false // automatically answer incoming calls; false by default\n    ,\n    iceRestart: false // force ICE session to restart on every WebRTC call; false by default\n    ,\n    sessionTimersExpires: 120 // value for Session-Expires header; 120 by default\n    ,\n    debug: false // whether to output events to console; false by default\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }));\n};\n\nexport default MakeCall;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js"],"names":["React","useEffect","useState","useSelector","SipProvider","MakeCall","consle","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,WAAR,QAA0B,WAA1B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnBJ,EAAAA,SAAS,CAAC,MAAI;AACVK,IAAAA,MAAM,CAACC,GAAP,CAAW,QAAX;AACH,GAFQ,CAAT;AAGA,SAEI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,gBADT;AAEI,IAAA,IAAI,EAAE,IAFV;AAGI,IAAA,QAAQ,EAAC,KAHb,CAGmB;AAHnB;AAII,IAAA,IAAI,EAAC,WAJT;AAKI,IAAA,QAAQ,EAAC,QALb,CAKsB;AALtB;AAMI,IAAA,YAAY,EAAE,IANlB,CAMwB;AANxB;AAOI,IAAA,UAAU,EAAE,KAPhB,CAOuB;AAPvB;AAQI,IAAA,UAAU,EAAE,KARhB,CAQuB;AARvB;AASI,IAAA,oBAAoB,EAAE,GAT1B,CAS+B;AAT/B;AAWI,IAAA,KAAK,EAAE,KAXX,CAWkB;AAXlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ;AAmBH,CAvBD;;AAyBA,eAAeF,QAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {SipProvider} from \"react-sip\";\n\nconst MakeCall = () => {\n    useEffect(()=>{\n        consle.log(\"status\", )\n    })\n    return (\n\n        <React.Fragment>\n            <SipProvider\n                host=\"77.104.116.187\"\n                port={7000}\n                pathname=\"/ws\" // Path in socket URI (e.g. wss://sip.example.com:7443/ws); \"\" by default\n                user=\"704@admin\"\n                password=\"704704\" // usually required (e.g. from ENV or props)\n                autoRegister={true} // true by default, see jssip.UA option register\n                autoAnswer={false} // automatically answer incoming calls; false by default\n                iceRestart={false} // force ICE session to restart on every WebRTC call; false by default\n                sessionTimersExpires={120} // value for Session-Expires header; 120 by default\n\n                debug={false} // whether to output events to console; false by default\n            >\n            </SipProvider>\n        </React.Fragment>\n    )\n};\n\nexport default MakeCall;\n"]},"metadata":{},"sourceType":"module"}