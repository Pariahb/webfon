{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\nimport Search from \"../search/search\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        historyMessages = _useState2[0],\n        setHistoryMessages = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        allMessages = _useState4[0],\n        setAllMessages = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageText = _useState6[0],\n        changeMessageText = _useState6[1];\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getSearchResult = () => {\n    connection.send($iq({\n      type: \"set\",\n      id: \"search1\",\n      from: connection.jid,\n      to: selectedContact\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:search\"\n    }).c(\"x\", {\n      xmlns: \"jabber:x:data\",\n      type: \"submit\"\n    }).c(\"field\", {\n      var: \"user\"\n    }).c(\"value\").t(\"salam\"));\n  };\n\n  const getLog = () => {\n    console.log(\"connection.mam\", connection.mam);\n    let sentMessages,\n        recMessages,\n        history = [],\n        archiveIq = $iq({\n      type: \"set\",\n      id: \"archive1\"\n    }).c(\"query\", {\n      xmlns: \"urn:xmpp:mam:2\"\n    }).c(\"set\", {\n      xmlns: \"http://jabber.org/protocol/rsm\"\n    }).c('max').t('5');\n    connection.mam.query(connection.send(archiveIq), {\n      with: selectedContact,\n      onMessage: function (message) {\n        $(message).each(function () {\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            recMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            history = history.concat(recMessages);\n          } else if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] !== selectedContact) {\n            sentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            history = history.concat(sentMessages);\n          }\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        console.log(\"historyMessages\", historyMessages);\n        setHistoryMessages(history);\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n      }.bind(this)\n    });\n  };\n\n  const handleChangeMsg = event => {\n    changeMessageText(event.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let txtJID = selectedContact,\n        txtMsg = messageText,\n        currentMessages = [],\n        message;\n    console.log(\"message1\", message);\n    console.log(\"txtJID\", txtJID);\n    console.log(\"txtMsg\", txtMsg);\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      currentMessages = currentMessages.concat(message);\n      setAllMessages(allMessages.splice(0, 0, message));\n      sendMessage(message);\n      console.log(\"message\", messageText);\n      console.log(\"currentMessages\", currentMessages);\n      console.log(\"allmessages\", allMessages);\n    }\n    connection.addHandler(onMessage, null, \"message\", null, null, null);\n  }; //Sending message to contact\n\n\n  const sendMessage = msg => {\n    let reply = $msg({\n      to: msg.to,\n      from: connection.jid,\n      type: \"chat\",\n      id: \"event1\"\n    }).c(\"body\").t(msg.message).up().c(\"request\", {\n      xmlns: \"urn:xmpp:receipts\"\n    });\n    connection.send(reply.tree());\n  };\n\n  const onMessage = msg => {\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      console.log(\"rec message\", message);\n      setAllMessages(allMessages.splice(0, 0, message));\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"To : \", selectedContact), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"search\"), React.createElement(\"div\", {\n    className: \"search-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Search, {\n    items: historyMessages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, allMessages !== [] ? React.createElement(MessagePopUp, {\n    type: allMessages.type,\n    sentMsg: allMessages.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }) : null)), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    onChange: handleChangeMsg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-box/index.js"],"names":["React","useEffect","useState","MessagePopUp","$","useSelector","Search","ChatBox","selectedContact","state","$iq","$msg","connection","historyMessages","setHistoryMessages","allMessages","setAllMessages","messageText","changeMessageText","getLog","getSearchResult","send","type","id","from","jid","to","c","xmlns","var","t","console","log","mam","sentMessages","recMessages","history","archiveIq","query","with","onMessage","message","each","find","attr","split","text","stamp","concat","onComplete","response","chatDiv","document","querySelector","scrollTo","scrollHeight","bind","handleChangeMsg","event","target","value","handleSubmit","e","preventDefault","txtJID","txtMsg","currentMessages","undefined","alert","time","Date","splice","sendMessage","addHandler","msg","reply","up","tree","getAttribute","elems","getElementsByTagName","innerHTML"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\nimport Search from \"../search/search\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n\n    const [historyMessages, setHistoryMessages] = useState([]);\n    const [allMessages, setAllMessages] = useState([]);\n    const [messageText, changeMessageText] = useState(\"\");\n\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n    const getSearchResult = () => {\n        connection.send($iq({\n            type: \"set\",\n            id: \"search1\",\n            from: connection.jid,\n            to: selectedContact\n        }).c(\"query\", {xmlns: \"jabber:iq:search\"}).c(\"x\", {\n            xmlns: \"jabber:x:data\",\n            type: \"submit\"\n        }).c(\"field\", {var: \"user\"}).c(\"value\").t(\"salam\"))\n    };\n    const getLog = () => {\n\n        console.log(\"connection.mam\", connection.mam);\n        let sentMessages,\n            recMessages,\n            history = [],\n            archiveIq = $iq({\n                type: \"set\",\n                id: \"archive1\"\n\n            }).c(\"query\", {\n                xmlns: \"urn:xmpp:mam:2\"\n            }).c(\"set\", {xmlns: \"http://jabber.org/protocol/rsm\"}).c('max').t('5');\n        connection.mam.query(connection.send(archiveIq), {\n            with: selectedContact,\n            onMessage: function (message) {\n                $(message).each(function () {\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        recMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        history = history.concat(recMessages);\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] !== selectedContact\n                    ) {\n                        sentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n\n                        history = history.concat(sentMessages);\n                    }\n                });\n\n                return true;\n            },\n            onComplete: function (response) {\n                console.log(\"historyMessages\", historyMessages)\n                setHistoryMessages(history);\n                let chatDiv = document.querySelector(\".all-messages\");\n                chatDiv.scrollTo(0, chatDiv.scrollHeight);\n            }.bind(this)\n        });\n    }\n\n\n    const handleChangeMsg = (event) => {\n        changeMessageText(event.target.value)\n    };\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let txtJID = selectedContact,\n            txtMsg = messageText,\n            currentMessages = [],\n            message;\n        console.log(\"message1\", message)\n\n        console.log(\"txtJID\", txtJID);\n        console.log(\"txtMsg\", txtMsg);\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            currentMessages = currentMessages.concat(message)\n\n            setAllMessages(allMessages.splice(0, 0, message));\n            sendMessage(message);\n            console.log(\"message\", messageText)\n            console.log(\"currentMessages\", currentMessages)\n            console.log(\"allmessages\", allMessages)\n        }\n        connection.addHandler(\n            onMessage,\n            null,\n            \"message\",\n            null,\n            null,\n            null\n        );\n    };\n\n    //Sending message to contact\n    const sendMessage = (msg) => {\n        let reply = $msg({\n            to: msg.to,\n            from: connection.jid,\n            type: \"chat\",\n            id: \"event1\"\n        })\n            .c(\"body\")\n            .t(msg.message)\n            .up()\n            .c(\"request\", {xmlns: \"urn:xmpp:receipts\"});\n\n        connection.send(reply.tree());\n    }\n\n    const onMessage = (msg) => {\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            console.log(\"rec message\", message)\n            setAllMessages(allMessages.splice(0, 0, message));\n\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n\n\n    return (\n        <React.Fragment>\n            <p className=\"userId\">To : {selectedContact}</p>\n            <button >search</button>\n            <div className=\"search-bar\">\n                <Search items={historyMessages}/>\n            </div>\n            <div className=\"all-messages\">\n\n                <div className=\"messages\">\n                    {allMessages !== [] ? <MessagePopUp\n                        type={allMessages.type}\n                        sentMsg={allMessages.message}\n                    /> : null}\n\n\n                </div>\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    onChange={handleChangeMsg}\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}