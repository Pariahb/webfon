{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = props => {\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const status = useSelector(state => state.status);\n\n  const _useState = useState(rosterStatus),\n        _useState2 = _slicedToArray(_useState, 2),\n        rosterStatusColor = _useState2[0],\n        setRosterStatusColor = _useState2[1];\n\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  useEffect(() => {\n    setRosterStatusColor(rosterStatus);\n  }, [rosterStatus]);\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n\n  const onPresence = presence => {\n    $(presence).each(function () {\n      let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n\n      if (from.split(\"/\", 1)[0] === props.item.jid) {\n        if (from !== connection.jid) {\n          let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n          console.log(\"presence\", presence);\n\n          if (!presence_type) {\n            let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n            if (!show) {\n              if (presence_type === \"unavailable\") {\n                // Mark contact as offline\n                changeRosterStatus(\"xa\");\n                console.log(\"presence_type2\", presence_type);\n                console.log(from + \"contact as unavailable\");\n              } else {\n                // Mark contact as offline\n                changeRosterStatus(\"chat\");\n                console.log(\"presence_type2\", presence_type);\n              }\n            } else {\n              switch (show) {\n                case \"chat\":\n                  changeRosterStatus(\"chat\"); // Mark contact as online\n\n                  console.log(from + \"contact as online\");\n                  break;\n\n                case \"away\":\n                  changeRosterStatus(\"away\");\n                  console.log(from + \"contact as away\");\n                  break;\n\n                case \"dnd\":\n                  changeRosterStatus(\"dnd\");\n                  console.log(from + \"contact as dnd\");\n                  break;\n\n                case \"xa\":\n                  changeRosterStatus(\"xa\");\n                  console.log(from + \"contact as xa\");\n                  break;\n\n                default:\n                  changeRosterStatus(\"chat\");\n              }\n            }\n          }\n        }\n      }\n    });\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    \"data-id\": props.item.jid,\n    className: rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","$","ContactItem","props","rosterStatus","state","status","rosterStatusColor","setRosterStatusColor","dispatch","showMainPage","connection","handleRosterClick","contact","console","log","type","onPresence","presence","each","from","attr","split","item","jid","presence_type","show","find","text","changeRosterStatus","addHandler","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = (props) => {\n        const rosterStatus = useSelector(state => state.rosterStatus);\n        const status = useSelector(state => state.status);\n        const [rosterStatusColor, setRosterStatusColor] = useState(rosterStatus);\n        const dispatch = useDispatch();\n        const showMainPage = useSelector(state => state.showMainPage);\n        const connection = useSelector(state => state.connection);\n\n        useEffect(() => {\n            setRosterStatusColor(rosterStatus)\n        }, [rosterStatus]);\n\n        const handleRosterClick = (contact) => {\n            console.log(contact)\n            dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n        };\n        /*----------get contact presence-----------*/\n        //use presences from xmpp server\n        const onPresence = (presence) => {\n\n            $(presence).each(function () {\n                let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n\n                if (from.split(\"/\", 1)[0] === props.item.jid) {\n                        if (from !== connection.jid) {\n                            let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n                            console.log(\"presence\", presence)\n                            if (!presence_type) {\n                                let show = $(presence)\n                                    .find(\"show\")\n                                    .text(); // this is what gives away, dnd, etc.\n                                if (!show) {\n                                    if (presence_type === \"unavailable\") {\n                                        // Mark contact as offline\n                                        changeRosterStatus(\"xa\");\n                                        console.log(\"presence_type2\", presence_type)\n\n                                        console.log(from + \"contact as unavailable\");\n\n                                    } else {\n                                        // Mark contact as offline\n                                        changeRosterStatus(\"chat\");\n                                        console.log(\"presence_type2\", presence_type);\n                                    }\n                                } else {\n                                    switch (show) {\n                                        case \"chat\" :\n                                            changeRosterStatus(\"chat\");\n                                            // Mark contact as online\n                                            console.log(from + \"contact as online\");\n                                            break;\n                                        case \"away\" :\n                                            changeRosterStatus(\"away\");\n                                            console.log(from + \"contact as away\");\n                                            break;\n                                        case \"dnd\":\n                                            changeRosterStatus(\"dnd\");\n                                            console.log(from + \"contact as dnd\");\n                                            break;\n                                        case \"xa\":\n                                            changeRosterStatus(\"xa\");\n                                            console.log(from + \"contact as xa\");\n                                            break;\n                                        default :\n                                            changeRosterStatus(\"chat\");\n\n                                    }\n                                }\n\n                            }\n                        }\n                    }\n                }\n            )\n\n\n            return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n        }\n        /*---------------------------------*/\n//change each roster status.\n        const changeRosterStatus = (rosterStatus) => {\n            dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n        }\n        /*---------------------------------*/\n        useEffect(() => {\n            connection.addHandler(\n                onPresence,\n                null,\n                \"presence\",\n                null,\n                null,\n                null\n            );\n        }, [showMainPage]);\n        /*----------get contact presence-----------*/\n        return (\n            <React.Fragment>\n                <div\n                    onClick={() => handleRosterClick(props.item.jid)}\n                    className=\"row item\"\n                    id={props.item.jid}\n                >\n                    <div className=\"avatar\">\n\n                    <span data-id={props.item.jid}\n                          className={rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor}></span>\n                        <img alt=\"avatar\" src={avatarImage}/>\n                    </div>\n                    <div className=\"right-side\">\n                        <div className=\"extension\">\n                            <p>112</p>\n                        </div>\n\n                        <div className=\"contact-name\">\n                            <p>{props.item.name}</p>\n                        </div>\n                    </div>\n                </div>\n\n            </React.Fragment>\n        );\n\n\n    }\n;\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}