{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Search = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        filtered = _useState2[0],\n        setfiltered = _useState2[1];\n\n  const handleChange = e => {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    setfiltered(newList);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"input\",\n    onChange: handleChange,\n    placeholder: \"Search...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, filtered.map((item, i) => React.createElement(\"li\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"item\")))));\n};\n\nexport default Search;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js"],"names":["React","useEffect","useState","Search","props","filtered","setfiltered","handleChange","e","currentList","newList","target","value","items","filter","item","lc","toLowerCase","includes","map","i"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAGA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA,oBACUF,QAAQ,CAAC,EAAD,CADlB;AAAA;AAAA,QACfG,QADe;AAAA,QACLC,WADK;;AAEtB,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxB;AACA,QAAIC,WAAW,GAAG,EAAlB,CAFwB,CAGxB;;AACA,QAAIC,OAAO,GAAG,EAAd,CAJwB,CAMxB;;AACA,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACvB;AACAH,MAAAA,WAAW,GAAGL,KAAK,CAACS,KAApB,CAFuB,CAIvB;AACA;;AACAH,MAAAA,OAAO,GAAGD,WAAW,CAACK,MAAZ,CAAmBC,IAAI,IAAI;AACjC;AACA,cAAMC,EAAE,GAAGD,IAAI,CAACE,WAAL,EAAX,CAFiC,CAGjC;;AACA,cAAMH,MAAM,GAAGN,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeK,WAAf,EAAf,CAJiC,CAKjC;AACA;AACA;;AACA,eAAOD,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP;AACH,OATS,CAAV;AAUH,KAhBD,MAgBO;AACH;AACAJ,MAAAA,OAAO,GAAGN,KAAK,CAACS,KAAhB;AACH,KA1BuB,CA2BxB;;;AACAP,IAAAA,WAAW,CAACI,OAAD,CAAX;AAGH,GA/BD;;AAgCA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,SAAS,EAAC,OAA7B;AAAqC,IAAA,QAAQ,EAAEH,YAA/C;AAA6D,IAAA,WAAW,EAAC,WAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,QAAQ,CAACc,GAAT,CAAa,CAACJ,IAAD,EAAOK,CAAP,KAAa;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADuB,CAA1B,CADL,CALJ,CADJ;AAeH,CAjDD;;AAoDA,eAAejB,MAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\n\nconst Search = (props) => {\n    const [filtered, setfiltered] = useState('')\n    const handleChange = (e) => {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        setfiltered(newList);\n\n\n    };\n    return (\n        <React.Fragment>\n            <div>\n\n                <input type=\"text\" className=\"input\" onChange={handleChange} placeholder=\"Search...\"/>\n            </div>\n            <ul>\n                {filtered.map((item, i) => <li key={i}>\n                    <span>item</span>\n                </li>)}\n            </ul>\n          \n\n        </React.Fragment>\n    )\n}\n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}