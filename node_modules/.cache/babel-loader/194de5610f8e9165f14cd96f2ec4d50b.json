{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPhone, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./style.css\";\n\nconst MakeCall = () => {\n  let JsSIP = require('jssip');\n\n  const socket = new JsSIP.WebSocketInterface('wss://77.104.116.187:7000/');\n  let configuration = {\n    'uri': '704@admin',\n    // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n    'password': '704704',\n    // FILL PASSWORD HERE,\n    'sockets': [socket]\n  };\n  const ua = new JsSIP.UA(configuration);\n  const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n  incomingCallAudio.loop = true;\n  const remoteAudio = new window.Audio();\n  remoteAudio.autoplay = true;\n  const callOptions = {\n    mediaConstraints: {\n      audio: true,\n      video: false\n    }\n  };\n  console.log('ua', ua); // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n  console.log(ua._status);\n  ua.on('connected', function (e) {\n    alert(\"connected\");\n  }); // Register callbacks to desired call events\n\n  const eventHandlers = {\n    'progress': function (e) {\n      console.log('call is in progress');\n    },\n    'failed': function (e) {\n      console.log('call failed with cause: ' + e.data.cause);\n    },\n    'ended': function (e) {\n      console.log('call ended with cause: ' + e.data.cause);\n    },\n    'confirmed': function (e) {\n      console.log('call confirmed');\n    }\n  };\n  let options = {\n    'eventHandlers': eventHandlers,\n    'mediaConstraints': {\n      'audio': true,\n      'video': true\n    }\n  };\n  let session = ua.call('sip:712@admin', options);\n  console.log(\"session\", session);\n\n  const onSipConnect = () => {\n    JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n    phone.on('registrationFailed', function (ev) {\n      alert('Registering on SIP server failed with error: ' + ev.cause);\n      configuration.uri = null;\n      configuration.password = null;\n      updateUI();\n    });\n    phone.on('newRTCSession', function (ev) {\n      var newSession = ev.session;\n\n      if (session) {\n        // hangup any existing call\n        session.terminate();\n      }\n\n      session = newSession;\n\n      var completeSession = function () {\n        session = null;\n        updateUI();\n      };\n\n      session.on('ended', completeSession);\n      session.on('failed', completeSession);\n      session.on('accepted', updateUI);\n      session.on('confirmed', function () {\n        var localStream = session.connection.getLocalStreams()[0];\n        var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0]);\n\n        session.sendDTMF = function (tone) {\n          dtmfSender.insertDTMF(tone);\n        };\n\n        updateUI();\n      });\n      session.on('addstream', function (e) {\n        incomingCallAudio.pause();\n        remoteAudio.src = window.URL.createObjectURL(e.stream);\n      });\n\n      if (session.direction === 'incoming') {\n        incomingCallAudio.play();\n      }\n\n      updateUI();\n    });\n    phone.start();\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"callControl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"toField\",\n    type: \"text\",\n    placeholder: \"Enter number here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: onSipConnect,\n    id: \"connectCall\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    className: \"fap fa-phone\",\n    icon: faPhone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }))));\n};\n\nexport default MakeCall;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js"],"names":["React","FontAwesomeIcon","faPhone","faSpinner","MakeCall","JsSIP","require","socket","WebSocketInterface","configuration","ua","UA","incomingCallAudio","window","Audio","loop","remoteAudio","autoplay","callOptions","mediaConstraints","audio","video","console","log","_status","on","e","alert","eventHandlers","data","cause","options","session","call","onSipConnect","debug","enable","phone","ev","uri","password","updateUI","newSession","terminate","completeSession","localStream","connection","getLocalStreams","dtmfSender","createDTMFSender","getAudioTracks","sendDTMF","tone","insertDTMF","pause","src","URL","createObjectURL","stream","direction","play","start"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPhone, faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./style.css\"\n\nconst MakeCall = () => {\n    let JsSIP = require('jssip');\n\n    const socket = new JsSIP.WebSocketInterface('wss://77.104.116.187:7000/');\n    let configuration = {\n        'uri': '704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n        'password': '704704', // FILL PASSWORD HERE,\n        'sockets': [socket]\n    };\n    const ua = new JsSIP.UA(configuration);\n\n    const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n    incomingCallAudio.loop = true;\n    const remoteAudio = new window.Audio();\n    remoteAudio.autoplay = true;\n\n    const callOptions = {\n        mediaConstraints: {audio: true, video: false}\n    };\n\n\n    console.log('ua', ua);\n    // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    console.log(ua._status)\n    ua.on('connected', function (e) {\n        alert(\"connected\")\n    });\n// Register callbacks to desired call events\n    const eventHandlers = {\n        'progress': function (e) {\n            console.log('call is in progress');\n        },\n        'failed': function (e) {\n            console.log('call failed with cause: ' + e.data.cause);\n        },\n        'ended': function (e) {\n            console.log('call ended with cause: ' + e.data.cause);\n        },\n        'confirmed': function (e) {\n            console.log('call confirmed');\n        }\n    };\n\n    let options = {\n        'eventHandlers': eventHandlers,\n        'mediaConstraints': {'audio': true, 'video': true}\n    };\n\n    let session = ua.call('sip:712@admin', options);\n    console.log(\"session\", session);\n\n    const onSipConnect = () => {\n        JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n        phone.on('registrationFailed', function(ev){\n            alert('Registering on SIP server failed with error: ' + ev.cause);\n            configuration.uri = null;\n            configuration.password = null;\n            updateUI();\n        });\n        phone.on('newRTCSession',function(ev){\n            var newSession = ev.session;\n            if(session){ // hangup any existing call\n                session.terminate();\n            }\n            session = newSession;\n            var completeSession = function(){\n                session = null;\n                updateUI();\n            };\n            session.on('ended', completeSession);\n            session.on('failed', completeSession);\n            session.on('accepted',updateUI);\n            session.on('confirmed',function(){\n                var localStream = session.connection.getLocalStreams()[0];\n                var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n                session.sendDTMF = function(tone){\n                    dtmfSender.insertDTMF(tone);\n                };\n                updateUI();\n            });\n            session.on('addstream', function(e){\n                incomingCallAudio.pause();\n                remoteAudio.src = window.URL.createObjectURL(e.stream);\n            });\n            if(session.direction === 'incoming'){\n                incomingCallAudio.play();\n            }\n            updateUI();\n        });\n        phone.start();\n    };\n    return (\n\n        <React.Fragment>\n            <div id=\"callControl\">\n                <div id=\"to\">\n                    <input id=\"toField\" type=\"text\" placeholder=\"Enter number here\"/>\n                </div>\n                <button onClick={onSipConnect} id=\"connectCall\">\n                    <FontAwesomeIcon className=\"fap fa-phone\"\n                                     icon={faPhone}/>\n\n                </button>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default MakeCall;\n"]},"metadata":{},"sourceType":"module"}