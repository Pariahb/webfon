{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\nimport HistoryDetailLogs from \"../history-detail-logs\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n  const selectedLogContact = useSelector(state => state.selectedLogContact);\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        grouped = _useState2[0],\n        setgrouped = _useState2[1];\n\n  const jalali = require('moment-jalaali');\n\n  const _renderLogs = group => {\n    console.log(\"cdr\", cdrsData);\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, key), console.log(\"group[key]\", group[key]) // group[key].map((item, i) => (\n    //\n    //     // console.log(\"group[key]\", group[key])\n    //     <LogItem item={item} key={i}/>\n    //\n    // ))\n    ));\n  };\n\n  const reduceKey = key => {\n    const result = [...key.reduce((mp, o) => {\n      const key = JSON.stringify([o.direction, o.from]);\n      if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n        count: 0\n      }));\n      mp.get(key).count++;\n      return mp;\n    }, new Map()).values()];\n    console.log(\"result0\", result);\n  };\n\n  const clearDuplicates = group => {\n    console.log(\"objjjjj\", Object.values(group));\n    return Object.values(group).map((key, index) => {\n      console.log(\"key\", key);\n      const result = [...key.reduce((mp, o) => {\n        const key = JSON.stringify([o.direction, o.from]);\n        if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n          count: 0\n        }));\n        mp.get(key).count++;\n        return mp;\n      }, new Map()).values()]; // console.log(\"grouped\", grouped);\n      // console.log(result);\n      // result.map((ele, i) => (\n      //     <LogItem item={ele} key={i}/>\n      // ));\n\n      console.log(\"result0\", result);\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, clearDuplicates(cdrsData), _renderLogs(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","HistoryDetailLogs","GroupedLog","cdrsData","state","selectedLogContact","grouped","setgrouped","jalali","require","_renderLogs","group","console","log","Object","keys","map","key","index","reduceKey","result","reduce","mp","o","JSON","stringify","direction","from","has","set","count","get","Map","values","clearDuplicates"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;AACA,QAAME,kBAAkB,GAAGN,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,kBAAhB,CAAtC;;AAFqB,oBAGSP,QAAQ,CAAC,EAAD,CAHjB;AAAA;AAAA,QAGdQ,OAHc;AAAA,QAGLC,UAHK;;AAIrB,QAAMC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AAEA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBV,QAAnB;AACA,WAAOW,MAAM,CACRC,IADE,CACGJ,KADH,EAEFK,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAED;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,GAAJ,CADJ,EAGQL,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAAK,CAACM,GAAD,CAA/B,CAHR,CAKQ;AACA;AACA;AACA;AACA;AACA;AAVR,KAJD,CAAP;AAmBH,GArBD;;AAsBA,QAAME,SAAS,GAAIF,GAAD,IAAS;AACvB,UAAMG,MAAM,GAAG,CAAC,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAACC,EAAD,EAAKC,CAAL,KAAW;AACrC,YAAMN,GAAG,GAAGO,IAAI,CAACC,SAAL,CAAe,CAACF,CAAC,CAACG,SAAH,EAAcH,CAAC,CAACI,IAAhB,CAAf,CAAZ;AACA,UAAI,CAACL,EAAE,CAACM,GAAH,CAAOX,GAAP,CAAL,EAAkBK,EAAE,CAACO,GAAH,CAAOZ,GAAP,oBAAgBM,CAAhB;AAAmBO,QAAAA,KAAK,EAAE;AAA1B;AAClBR,MAAAA,EAAE,CAACS,GAAH,CAAOd,GAAP,EAAYa,KAAZ;AACA,aAAOR,EAAP;AACH,KALkB,EAKhB,IAAIU,GAAJ,EALgB,EAKPC,MALO,EAAJ,CAAf;AAMArB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,MAAvB;AAEH,GATD;;AAUA,QAAMc,eAAe,GAAIvB,KAAD,IAAW;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,MAAM,CAACmB,MAAP,CAActB,KAAd,CAAvB;AACA,WAAOG,MAAM,CACRmB,MADE,CACKtB,KADL,EAEFK,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACbN,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBI,GAAlB;AACA,YAAMG,MAAM,GAAG,CAAC,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAACC,EAAD,EAAKC,CAAL,KAAW;AACrC,cAAMN,GAAG,GAAGO,IAAI,CAACC,SAAL,CAAe,CAACF,CAAC,CAACG,SAAH,EAAcH,CAAC,CAACI,IAAhB,CAAf,CAAZ;AACA,YAAI,CAACL,EAAE,CAACM,GAAH,CAAOX,GAAP,CAAL,EAAkBK,EAAE,CAACO,GAAH,CAAOZ,GAAP,oBAAgBM,CAAhB;AAAmBO,UAAAA,KAAK,EAAE;AAA1B;AAClBR,QAAAA,EAAE,CAACS,GAAH,CAAOd,GAAP,EAAYa,KAAZ;AACA,eAAOR,EAAP;AACH,OALkB,EAKhB,IAAIU,GAAJ,EALgB,EAKPC,MALO,EAAJ,CAAf,CAFa,CASb;AACA;AACA;AACA;AACA;;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBO,MAAvB;AACH,KAjBF,CAAP;AAmBH,GArBD;;AAuBA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQc,eAAe,CAAC/B,QAAD,CAFvB,EAKQO,WAAW,CAACP,QAAD,CALnB,CADJ;AAWH,CAxED;;AA2EA,eAAeD,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\nimport HistoryDetailLogs from \"../history-detail-logs\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n    const selectedLogContact = useSelector(state => state.selectedLogContact);\n    const [grouped, setgrouped] = useState([]);\n    const jalali = require('moment-jalaali');\n\n    const _renderLogs = (group) => {\n        console.log(\"cdr\", cdrsData)\n        return Object\n            .keys(group)\n            .map((key, index) => (\n        \n                <div key={index}>\n                    <p>{key}</p>\n                    {\n                        console.log(\"group[key]\", group[key])\n\n                        // group[key].map((item, i) => (\n                        //\n                        //     // console.log(\"group[key]\", group[key])\n                        //     <LogItem item={item} key={i}/>\n                        //\n                        // ))\n                    }\n\n                </div>\n            ));\n    };\n    const reduceKey = (key) => {\n        const result = [...key.reduce((mp, o) => {\n            const key = JSON.stringify([o.direction, o.from]);\n            if (!mp.has(key)) mp.set(key, {...o, count: 0});\n            mp.get(key).count++;\n            return mp;\n        }, new Map).values()];\n        console.log(\"result0\", result);\n\n    }\n    const clearDuplicates = (group) => {\n        console.log(\"objjjjj\", Object.values(group));\n        return Object\n            .values(group)\n            .map((key, index) => {\n                    console.log(\"key\",key)\n                    const result = [...key.reduce((mp, o) => {\n                        const key = JSON.stringify([o.direction, o.from]);\n                        if (!mp.has(key)) mp.set(key, {...o, count: 0});\n                        mp.get(key).count++;\n                        return mp;\n                    }, new Map).values()];\n\n                    // console.log(\"grouped\", grouped);\n                    // console.log(result);\n                    // result.map((ele, i) => (\n                    //     <LogItem item={ele} key={i}/>\n                    // ));\n                    console.log(\"result0\", result);\n                }\n            )\n    };\n\n    return (\n        <React.Fragment>\n            {\n                clearDuplicates(cdrsData)\n            }\n            {\n                _renderLogs(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}