{"ast":null,"code":"const JsSIP_C = require('./Constants');\n\nconst Utils = require('./Utils');\n\nconst Grammar = require('./Grammar');\n/**\n * -param {String} [scheme]\n * -param {String} [user]\n * -param {String} host\n * -param {String} [port]\n * -param {Object} [parameters]\n * -param {Object} [headers]\n *\n */\n\n\nmodule.exports = class URI {\n  /**\n    * Parse the given string and returns a JsSIP.URI instance or undefined if\n    * it is an invalid URI.\n    */\n  static parse(uri) {\n    uri = Grammar.parse(uri, 'SIP_URI');\n\n    if (uri !== -1) {\n      return uri;\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(scheme, user, host, port, parameters = {}, headers = {}) {\n    // Checks.\n    if (!host) {\n      throw new TypeError('missing or invalid \"host\" parameter');\n    } // Initialize parameters.\n\n\n    this._parameters = {};\n    this._headers = {};\n    this._scheme = scheme || JsSIP_C.SIP;\n    this._user = user;\n    this._host = host;\n    this._port = port;\n\n    for (const param in parameters) {\n      if (Object.prototype.hasOwnProperty.call(parameters, param)) {\n        this.setParam(param, parameters[param]);\n      }\n    }\n\n    for (const header in headers) {\n      if (Object.prototype.hasOwnProperty.call(headers, header)) {\n        this.setHeader(header, headers[header]);\n      }\n    }\n  }\n\n  get scheme() {\n    return this._scheme;\n  }\n\n  set scheme(value) {\n    this._scheme = value.toLowerCase();\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  set user(value) {\n    this._user = value;\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(value) {\n    this._host = value.toLowerCase();\n  }\n\n  get port() {\n    return this._port;\n  }\n\n  set port(value) {\n    this._port = value === 0 ? value : parseInt(value, 10) || null;\n  }\n\n  setParam(key, value) {\n    if (key) {\n      this._parameters[key.toLowerCase()] = typeof value === 'undefined' || value === null ? null : value.toString();\n    }\n  }\n\n  getParam(key) {\n    if (key) {\n      return this._parameters[key.toLowerCase()];\n    }\n  }\n\n  hasParam(key) {\n    if (key) {\n      return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;\n    }\n  }\n\n  deleteParam(parameter) {\n    parameter = parameter.toLowerCase();\n\n    if (this._parameters.hasOwnProperty(parameter)) {\n      const value = this._parameters[parameter];\n      delete this._parameters[parameter];\n      return value;\n    }\n  }\n\n  clearParams() {\n    this._parameters = {};\n  }\n\n  setHeader(name, value) {\n    this._headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];\n  }\n\n  getHeader(name) {\n    if (name) {\n      return this._headers[Utils.headerize(name)];\n    }\n  }\n\n  hasHeader(name) {\n    if (name) {\n      return this._headers.hasOwnProperty(Utils.headerize(name)) && true || false;\n    }\n  }\n\n  deleteHeader(header) {\n    header = Utils.headerize(header);\n\n    if (this._headers.hasOwnProperty(header)) {\n      const value = this._headers[header];\n      delete this._headers[header];\n      return value;\n    }\n  }\n\n  clearHeaders() {\n    this._headers = {};\n  }\n\n  clone() {\n    return new URI(this._scheme, this._user, this._host, this._port, JSON.parse(JSON.stringify(this._parameters)), JSON.parse(JSON.stringify(this._headers)));\n  }\n\n  toString() {\n    const headers = [];\n    let uri = \"\".concat(this._scheme, \":\");\n\n    if (this._user) {\n      uri += \"\".concat(Utils.escapeUser(this._user), \"@\");\n    }\n\n    uri += this._host;\n\n    if (this._port || this._port === 0) {\n      uri += \":\".concat(this._port);\n    }\n\n    for (const parameter in this._parameters) {\n      if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {\n        uri += \";\".concat(parameter);\n\n        if (this._parameters[parameter] !== null) {\n          uri += \"=\".concat(this._parameters[parameter]);\n        }\n      }\n    }\n\n    for (const header in this._headers) {\n      if (Object.prototype.hasOwnProperty.call(this._headers, header)) {\n        for (const item of this._headers[header]) {\n          headers.push(\"\".concat(header, \"=\").concat(item));\n        }\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += \"?\".concat(headers.join('&'));\n    }\n\n    return uri;\n  }\n\n  toAor(show_port) {\n    let aor = \"\".concat(this._scheme, \":\");\n\n    if (this._user) {\n      aor += \"\".concat(Utils.escapeUser(this._user), \"@\");\n    }\n\n    aor += this._host;\n\n    if (show_port && (this._port || this._port === 0)) {\n      aor += \":\".concat(this._port);\n    }\n\n    return aor;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}