{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js\";\nimport React, { useState } from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\"; // import \"./style.css\";\n\nconst MainPage = () => {\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n\n  const _useState = useState('false'),\n        _useState2 = _slicedToArray(_useState, 2),\n        showMainPage = _useState2[0],\n        setShowMainPage = _useState2[1];\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === this.state.strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\"); // this.setState({\n      //     showMainPage: true,\n      //     jid: this.state.connection.jid\n      // });\n      // this.getRoster();\n      // this.sendPriority();\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, this.state.showMainPage ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"mystatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(RadioButtonList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"user-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"button\",\n    value: \"logout\",\n    className: \"btn btn-primary\",\n    id: \"logout\",\n    onClick: this.handleDisconnect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(StatusDetector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"current-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, this.state.jid.split(\"@\", 1))), React.createElement(TabsSection, {\n    contacts: this.state.contacts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })) : React.createElement(LoginPage, {\n    onConnect: this.onConnect,\n    connection: this.state.connection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })));\n};\n\nexport default MainPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js"],"names":["React","useState","LoginPage","TabsSection","Button","RadioButtonList","StatusDetector","$","useSelector","MainPage","connection","state","$pres","$iq","strophe","showMainPage","setShowMainPage","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","handleDisconnect","jid","split","contacts"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButtonList from \"../radio-button\";\nimport StatusDetector from \"../status-detector\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\n\n// import \"./style.css\";\n\nconst MainPage = () => {\n    const connection = useSelector(state => state.connection)\n    const $pres = useSelector(state => state.$pres)\n    const $iq = useSelector(state => state.$iq)\n    const strophe = useSelector(state => state.strophe)\n    const [showMainPage, setShowMainPage] = useState('false')\n\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === this.state.strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            // this.setState({\n            //     showMainPage: true,\n            //     jid: this.state.connection.jid\n            // });\n            // this.getRoster();\n            // this.sendPriority();\n\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"container\">\n                {this.state.showMainPage ? (\n                    <React.Fragment>\n                        <div className=\"mystatus\">\n                            <RadioButtonList/>\n                        </div>\n                        <div className=\"user-info\">\n\n                            <Button\n                                type=\"button\"\n                                value=\"logout\"\n                                className=\"btn btn-primary\"\n                                id=\"logout\"\n                                onClick={this.handleDisconnect}\n                            />\n                            <StatusDetector/>\n                            <p className=\"current-user\">{this.state.jid.split(\"@\", 1)}</p>\n                        </div>\n                        <TabsSection\n                            contacts={this.state.contacts}\n                        />\n                    </React.Fragment>\n                ) : (\n                    <LoginPage\n                        onConnect={this.onConnect}\n                        connection={this.state.connection}\n                    />\n                )}\n            </div>\n        </React.Fragment>\n    );\n\n}\n\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}