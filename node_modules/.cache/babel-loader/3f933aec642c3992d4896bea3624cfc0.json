{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPhone, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./style.css\";\n\nconst MakeCall = () => {\n  let JsSIP = require('jssip');\n\n  const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7001/');\n  let configuration = {\n    'uri': '704@admin',\n    // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n    'password': '704704',\n    // FILL PASSWORD HERE,\n    'sockets': [socket],\n    'register': true\n  };\n  const ua = new JsSIP.UA(configuration);\n  const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n  incomingCallAudio.loop = true;\n  const remoteAudio = new window.Audio();\n  remoteAudio.autoplay = true;\n  const callOptions = {\n    mediaConstraints: {\n      audio: true,\n      video: false\n    }\n  };\n  console.log('ua', ua); // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n  console.log(ua._status);\n  /*------New incoming or outgoing call event-----*/\n  // ua.on('newRTCSession', function (e) {\n  //     console.log(\"newRTCSession\")\n  //\n  // });\n\n  /*------New incoming or outgoing call event-----*/\n\n  /*------WebSocket connection events-----*/\n\n  ua.on('connected', function (e) {\n    console.log(\"connect\");\n  });\n  ua.on('connecting', function (e) {\n    console.log(\"connecting\");\n  });\n  ua.on('disconnected', function (e) {\n    console.log(\"disconnected\");\n  });\n  /*------WebSocket connection events-----*/\n\n  /*------SIP registration events-----*/\n  // ua.on(\"registered\", function (e) {\n  //     console.log(\"registered\")\n  // });\n  // ua.on(\"unregistered\", function (e) {\n  //     console.log(\"registered\")\n  // });\n  // ua.on('registrationFailed', function (e) {\n  //     alert(\"registrationFailed\")\n  // });\n\n  /*--------SIP registration events-----------*/\n  // ua.start();\n  // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n  // Register callbacks to desired call events\n  //     const eventHandlers = {\n  //         'progress': function (e) {\n  //             console.log('call is in progress');\n  //         },\n  //         'failed': function (e) {\n  //             console.log('call failed with cause: ' + e.data.cause);\n  //         },\n  //         'ended': function (e) {\n  //             console.log('call ended with cause: ' + e.data.cause);\n  //         },\n  //         'confirmed': function (e) {\n  //             console.log('call confirmed');\n  //         }\n  //     };\n  //\n  //     let options = {\n  //         'eventHandlers': eventHandlers,\n  //         'mediaConstraints': {'audio': true, 'video': true}\n  //     };\n  //\n  //     const session = ua.call('712@admin', options);\n  //     console.log(\"sip\", ua.status);\n\n  const onSipConnect = () => {\n    JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n    ua.on('registrationFailed', function (ev) {\n      alert('Registering on SIP server failed with error: ' + ev.cause);\n      configuration.uri = null;\n      configuration.password = null;\n    });\n    ua.on('newRTCSession', function (ev) {\n      let newSession = ev.session;\n\n      if (session) {\n        // hangup any existing call\n        session.terminate();\n      }\n\n      let session = newSession;\n\n      let completeSession = function () {\n        session = null;\n      };\n\n      session.on('ended', completeSession);\n      session.on('failed', completeSession); // session.on('accepted',updateUI);\n\n      session.on('confirmed', function () {\n        var localStream = session.connection.getLocalStreams()[0];\n        var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0]);\n\n        session.sendDTMF = function (tone) {\n          dtmfSender.insertDTMF(tone);\n        };\n      });\n      session.on('addstream', function (e) {\n        // incomingCallAudio.pause();\n        remoteAudio.src = window.URL.createObjectURL(e.stream);\n      });\n\n      if (session.direction === 'incoming') {} // incomingCallAudio.play();\n      // updateUI();\n\n    });\n    ua.start();\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"callControl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"toField\",\n    type: \"text\",\n    placeholder: \"Enter number here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: onSipConnect,\n    id: \"connectCall\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    className: \"fap fa-phone\",\n    icon: faPhone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }))));\n};\n\nexport default MakeCall;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js"],"names":["React","FontAwesomeIcon","faPhone","faSpinner","MakeCall","JsSIP","require","socket","WebSocketInterface","configuration","ua","UA","incomingCallAudio","window","Audio","loop","remoteAudio","autoplay","callOptions","mediaConstraints","audio","video","console","log","_status","on","e","onSipConnect","debug","enable","ev","alert","cause","uri","password","newSession","session","terminate","completeSession","localStream","connection","getLocalStreams","dtmfSender","createDTMFSender","getAudioTracks","sendDTMF","tone","insertDTMF","src","URL","createObjectURL","stream","direction","start"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,OAAR,EAAiBC,SAAjB,QAAiC,mCAAjC;AAEA,OAAO,aAAP;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,MAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,QAAMC,MAAM,GAAG,IAAIF,KAAK,CAACG,kBAAV,CAA6B,2BAA7B,CAAf;AACA,MAAIC,aAAa,GAAG;AAChB,WAAO,WADS;AACI;AACpB,gBAAY,QAFI;AAEM;AACtB,eAAW,CAACF,MAAD,CAHK;AAIhB,gBAAa;AAJG,GAApB;AAMA,QAAMG,EAAE,GAAG,IAAIL,KAAK,CAACM,EAAV,CAAaF,aAAb,CAAX;AAEA,QAAMG,iBAAiB,GAAG,IAAIC,MAAM,CAACC,KAAX,CAAiB,oDAAjB,CAA1B;AACAF,EAAAA,iBAAiB,CAACG,IAAlB,GAAyB,IAAzB;AACA,QAAMC,WAAW,GAAG,IAAIH,MAAM,CAACC,KAAX,EAApB;AACAE,EAAAA,WAAW,CAACC,QAAZ,GAAuB,IAAvB;AAEA,QAAMC,WAAW,GAAG;AAChBC,IAAAA,gBAAgB,EAAE;AAACC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB;AADF,GAApB;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBb,EAAlB,EApBmB,CAqBnB;;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYb,EAAE,CAACc,OAAf;AACA;AAEA;AACA;AACA;AACA;;AACA;;AACA;;AAEAd,EAAAA,EAAE,CAACe,EAAH,CAAM,WAAN,EAAmB,UAAUC,CAAV,EAAa;AAC5BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAFD;AAGAb,EAAAA,EAAE,CAACe,EAAH,CAAM,YAAN,EAAoB,UAAUC,CAAV,EAAa;AAC7BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,GAFD;AAGAb,EAAAA,EAAE,CAACe,EAAH,CAAM,cAAN,EAAsB,UAAUC,CAAV,EAAa;AAC/BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,GAFD;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAMI,YAAY,GAAG,MAAM;AACvBtB,IAAAA,KAAK,CAACuB,KAAN,CAAYC,MAAZ,CAAmB,SAAnB,EADuB,CACQ;;AAC/BnB,IAAAA,EAAE,CAACe,EAAH,CAAM,oBAAN,EAA4B,UAAUK,EAAV,EAAc;AACtCC,MAAAA,KAAK,CAAC,kDAAkDD,EAAE,CAACE,KAAtD,CAAL;AACAvB,MAAAA,aAAa,CAACwB,GAAd,GAAoB,IAApB;AACAxB,MAAAA,aAAa,CAACyB,QAAd,GAAyB,IAAzB;AACH,KAJD;AAKAxB,IAAAA,EAAE,CAACe,EAAH,CAAM,eAAN,EAAuB,UAAUK,EAAV,EAAc;AACjC,UAAIK,UAAU,GAAGL,EAAE,CAACM,OAApB;;AACA,UAAIA,OAAJ,EAAa;AAAE;AACXA,QAAAA,OAAO,CAACC,SAAR;AACH;;AACD,UAAID,OAAO,GAAGD,UAAd;;AACA,UAAIG,eAAe,GAAG,YAAY;AAC9BF,QAAAA,OAAO,GAAG,IAAV;AAEH,OAHD;;AAIAA,MAAAA,OAAO,CAACX,EAAR,CAAW,OAAX,EAAoBa,eAApB;AACAF,MAAAA,OAAO,CAACX,EAAR,CAAW,QAAX,EAAqBa,eAArB,EAXiC,CAYjC;;AACAF,MAAAA,OAAO,CAACX,EAAR,CAAW,WAAX,EAAwB,YAAY;AAChC,YAAIc,WAAW,GAAGH,OAAO,CAACI,UAAR,CAAmBC,eAAnB,GAAqC,CAArC,CAAlB;AACA,YAAIC,UAAU,GAAGN,OAAO,CAACI,UAAR,CAAmBG,gBAAnB,CAAoCJ,WAAW,CAACK,cAAZ,GAA6B,CAA7B,CAApC,CAAjB;;AACAR,QAAAA,OAAO,CAACS,QAAR,GAAmB,UAAUC,IAAV,EAAgB;AAC/BJ,UAAAA,UAAU,CAACK,UAAX,CAAsBD,IAAtB;AACH,SAFD;AAGH,OAND;AAOAV,MAAAA,OAAO,CAACX,EAAR,CAAW,WAAX,EAAwB,UAAUC,CAAV,EAAa;AACjC;AACAV,QAAAA,WAAW,CAACgC,GAAZ,GAAkBnC,MAAM,CAACoC,GAAP,CAAWC,eAAX,CAA2BxB,CAAC,CAACyB,MAA7B,CAAlB;AACH,OAHD;;AAIA,UAAIf,OAAO,CAACgB,SAAR,KAAsB,UAA1B,EAAsC,CAErC,CAFD,CACI;AAEJ;;AACH,KA5BD;AA6BA1C,IAAAA,EAAE,CAAC2C,KAAH;AACH,GArCD;;AAsCA,SAEI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,EAAE,EAAC,SAAV;AAAoB,IAAA,IAAI,EAAC,MAAzB;AAAgC,IAAA,WAAW,EAAC,mBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII;AAAQ,IAAA,OAAO,EAAE1B,YAAjB;AAA+B,IAAA,EAAE,EAAC,aAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAC,cAA3B;AACiB,IAAA,IAAI,EAAEzB,OADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJJ,CADJ,CAFJ;AAeH,CAvID;;AAyIA,eAAeE,QAAf","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPhone, faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./style.css\"\n\nconst MakeCall = () => {\n    let JsSIP = require('jssip');\n\n    const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7001/');\n    let configuration = {\n        'uri': '704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n        'password': '704704', // FILL PASSWORD HERE,\n        'sockets': [socket],\n        'register' : true\n    };\n    const ua = new JsSIP.UA(configuration);\n\n    const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n    incomingCallAudio.loop = true;\n    const remoteAudio = new window.Audio();\n    remoteAudio.autoplay = true;\n\n    const callOptions = {\n        mediaConstraints: {audio: true, video: false}\n    };\n    console.log('ua', ua);\n    // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    console.log(ua._status)\n    /*------New incoming or outgoing call event-----*/\n\n    // ua.on('newRTCSession', function (e) {\n    //     console.log(\"newRTCSession\")\n    //\n    // });\n    /*------New incoming or outgoing call event-----*/\n    /*------WebSocket connection events-----*/\n\n    ua.on('connected', function (e) {\n        console.log(\"connect\")\n    });\n    ua.on('connecting', function (e) {\n        console.log(\"connecting\")\n    });\n    ua.on('disconnected', function (e) {\n        console.log(\"disconnected\")\n    });\n    /*------WebSocket connection events-----*/\n\n    /*------SIP registration events-----*/\n    // ua.on(\"registered\", function (e) {\n    //     console.log(\"registered\")\n    // });\n    // ua.on(\"unregistered\", function (e) {\n    //     console.log(\"registered\")\n    // });\n    // ua.on('registrationFailed', function (e) {\n    //     alert(\"registrationFailed\")\n    // });\n    /*--------SIP registration events-----------*/\n\n    // ua.start();\n    // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n// Register callbacks to desired call events\n//     const eventHandlers = {\n//         'progress': function (e) {\n//             console.log('call is in progress');\n//         },\n//         'failed': function (e) {\n//             console.log('call failed with cause: ' + e.data.cause);\n//         },\n//         'ended': function (e) {\n//             console.log('call ended with cause: ' + e.data.cause);\n//         },\n//         'confirmed': function (e) {\n//             console.log('call confirmed');\n//         }\n//     };\n//\n//     let options = {\n//         'eventHandlers': eventHandlers,\n//         'mediaConstraints': {'audio': true, 'video': true}\n//     };\n//\n//     const session = ua.call('712@admin', options);\n//     console.log(\"sip\", ua.status);\n\n    const onSipConnect = () => {\n        JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n        ua.on('registrationFailed', function (ev) {\n            alert('Registering on SIP server failed with error: ' + ev.cause);\n            configuration.uri = null;\n            configuration.password = null;\n        });\n        ua.on('newRTCSession', function (ev) {\n            let newSession = ev.session;\n            if (session) { // hangup any existing call\n                session.terminate();\n            }\n            let session = newSession;\n            let completeSession = function () {\n                session = null;\n\n            };\n            session.on('ended', completeSession);\n            session.on('failed', completeSession);\n            // session.on('accepted',updateUI);\n            session.on('confirmed', function () {\n                var localStream = session.connection.getLocalStreams()[0];\n                var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n                session.sendDTMF = function (tone) {\n                    dtmfSender.insertDTMF(tone);\n                };\n            });\n            session.on('addstream', function (e) {\n                // incomingCallAudio.pause();\n                remoteAudio.src = window.URL.createObjectURL(e.stream);\n            });\n            if (session.direction === 'incoming') {\n                // incomingCallAudio.play();\n            }\n            // updateUI();\n        });\n        ua.start();\n    };\n    return (\n\n        <React.Fragment>\n            <div id=\"callControl\">\n                <div id=\"to\">\n                    <input id=\"toField\" type=\"text\" placeholder=\"Enter number here\"/>\n                </div>\n                <button onClick={onSipConnect} id=\"connectCall\">\n                    <FontAwesomeIcon className=\"fap fa-phone\"\n                                     icon={faPhone}/>\n\n                </button>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default MakeCall;\n"]},"metadata":{},"sourceType":"module"}