{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useDebugValue, useEffect, useState } from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHistoryMessages } from \"../../../redux/action\";\n\nconst ChatBox = () => {\n  const selectedContact = useSelector(state => state.selectedContact);\n  const historyMessages = useSelector(state => state.historyMessages);\n  const newMessage = useSelector(state => state.newMessage);\n  const strophe = useSelector(state => state.strophe);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  const $iq = useSelector(state => state.$iq);\n  const $msg = useSelector(state => state.$msg);\n  const connection = useSelector(state => state.connection);\n\n  const _useState = useState({\n    item: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        allMessages = _useState2[0],\n        setAllMessages = _useState2[1];\n\n  const _useState3 = useState({\n    item: []\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        recMessages = _useState4[0],\n        setRecMessages = _useState4[1];\n\n  const _useState5 = useState({\n    txt: ''\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        messageText = _useState6[0],\n        changeMessageText = _useState6[1];\n\n  const _useState7 = useState({\n    from: '',\n    time: ''\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        lastActivity = _useState8[0],\n        setLastActivity = _useState8[1];\n\n  const dispatch = useDispatch();\n\n  const _useState9 = useState({\n    item: []\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messageList = _useState10[0],\n        setMessageList = _useState10[1];\n\n  const scrollToBottom = () => {\n    let chatDiv = document.querySelector(\".all-messages\");\n    chatDiv.scrollTo(0, chatDiv.scrollHeight);\n    console.log(\"hi\");\n  };\n\n  useEffect(() => {\n    getLog();\n  }, [selectedContact]);\n\n  const getLog = () => {\n    let mySentMessages,\n        myRecMessages,\n        recHistory = [],\n        sentHistory = [];\n    connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n      with: selectedContact,\n      onMessage: function (message) {\n        console.log(\"mam\");\n        $(message).each(function () {\n          if ($(this).find(\"forwarded message\").attr(\"from\").split(\"/\", 1)[0] === selectedContact) {\n            myRecMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"rec\"\n            };\n            recHistory = messageList.item;\n            recHistory.push(myRecMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: recHistory\n            }));\n          } else if ($(this).find(\"forwarded message\").attr(\"to\").split(\"/\", 1)[0] === selectedContact) {\n            mySentMessages = {\n              text: $(this).find(\"forwarded message body\").text(),\n              stamp: $(this).find(\"delay\").attr(\"stamp\"),\n              type: \"sent\"\n            };\n            sentHistory = messageList.item;\n            sentHistory.push(mySentMessages);\n            setMessageList(_objectSpread({}, messageList, {\n              item: sentHistory\n            }));\n          }\n        });\n        dispatch({\n          historyMessages: sentHistory,\n          type: \"FETCH_HISTORY_MESSAGES\"\n        });\n        return true;\n      },\n      onComplete: function (response) {\n        scrollToBottom();\n      }\n    });\n  };\n\n  const handleSubmit = () => {\n    console.log(\"selectedContact\", selectedContact);\n    let txtJID = selectedContact,\n        txtMsg = messageText.txt,\n        message,\n        sents = [];\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      let newMsg = {\n        text: message.message,\n        stamp: message.time.toString(),\n        type: message.type\n      };\n      let reply = $msg({\n        to: message.to,\n        from: connection.jid,\n        type: \"chat\",\n        id: \"message-1\"\n      }).c(\"body\").t(message.message);\n      connection.send(reply.tree());\n      const text = message.message;\n      dispatch({\n        newMessage: text,\n        type: 'GET_NEW_MESSAGE'\n      });\n      dispatch({\n        newMessage: newMsg,\n        type: 'PUSH_HISTORY_MESSAGES'\n      });\n      scrollToBottom();\n      sents = allMessages.item;\n      sents.push(message);\n      setAllMessages(_objectSpread({}, allMessages, {\n        item: sents\n      }));\n    }\n  }; // const handler = () => {\n  //     connection.addHandler(onReceiveMessage, null, \"message\", null, null);\n  // };\n  // useEffect(() => {\n  //     handler();\n  // }, [newMessage]);\n\n  /*----------------RECENT ACTIVITY------------------*/\n\n\n  const onLastActivity = iq => {\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime,\n          type: errorType,\n          errorMessage: null\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        lastActivityObj = {\n          from: from,\n          time: null,\n          type: errorType,\n          errorMessage: errorMessage\n        };\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time,\n          type: lastActivityObj.type,\n          errorMessage: lastActivityObj.errorMessage\n        }));\n      }\n    });\n    return true;\n  };\n\n  const getLastActivity = () => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: selectedContact,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq);\n    connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n  };\n\n  useEffect(() => {\n    getLastActivity();\n  }, [selectedContact]);\n  useEffect(() => {\n    getLastActivity();\n  }, [rosterStatus]);\n  useEffect(() => {\n    console.log('render');\n  }, []);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"userInfo-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"userId\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, selectedContact), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\" : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\" : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\" : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\" : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\")), React.createElement(\"div\", {\n    className: \"all-messages\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"archive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, historyMessages.length > 0 ? historyMessages.map((item, i) => {\n    return React.createElement(MessagePopUp, {\n      key: i,\n      sentMsg: item.text,\n      type: item.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    });\n  }) : null)), React.createElement(\"div\", {\n    className: \"textbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: messageText.txt,\n    onChange: event => {\n      changeMessageText(_objectSpread({}, messageText, {\n        txt: event.target.value\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatBox;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/chat-box/index.js"],"names":["React","useDebugValue","useEffect","useState","MessagePopUp","$","useSelector","useDispatch","fetchHistoryMessages","ChatBox","selectedContact","state","historyMessages","newMessage","strophe","rosterStatus","$iq","$msg","connection","item","allMessages","setAllMessages","recMessages","setRecMessages","txt","messageText","changeMessageText","from","time","lastActivity","setLastActivity","dispatch","messageList","setMessageList","scrollToBottom","chatDiv","document","querySelector","scrollTo","scrollHeight","console","log","getLog","mySentMessages","myRecMessages","recHistory","sentHistory","mam","query","jid","split","with","onMessage","message","each","find","attr","text","stamp","type","push","onComplete","response","handleSubmit","txtJID","txtMsg","sents","undefined","alert","to","Date","newMsg","toString","reply","id","c","t","send","tree","onLastActivity","iq","lastActivityObj","errorType","lastActivityTime","errorMessage","getLastActivity","xmlns","sendIQ","addHandler","Math","floor","length","map","i","event","target","value"],"mappings":"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","sourcesContent":["import React, {useDebugValue, useEffect, useState} from \"react\";\nimport MessagePopUp from \"../message-popup\";\nimport \"./style.css\";\nimport $ from \"jquery\";\nimport {useSelector} from \"react-redux\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchHistoryMessages} from \"../../../redux/action\";\n\nconst ChatBox = () => {\n    const selectedContact = useSelector(state => state.selectedContact);\n    const historyMessages = useSelector(state => state.historyMessages);\n    const newMessage = useSelector(state => state.newMessage);\n    const strophe = useSelector(state => state.strophe);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const $iq = useSelector(state => state.$iq);\n    const $msg = useSelector(state => state.$msg);\n    const connection = useSelector(state => state.connection);\n    const [allMessages, setAllMessages] = useState({item: []});\n    const [recMessages, setRecMessages] = useState({item: []});\n    const [messageText, changeMessageText] = useState({txt:''});\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const dispatch = useDispatch();\n\n    const [messageList, setMessageList] = useState({item: []});\n\n\n    const scrollToBottom = () => {\n        let chatDiv = document.querySelector(\".all-messages\");\n        chatDiv.scrollTo(0, chatDiv.scrollHeight);\n        console.log(\"hi\")\n    };\n    useEffect(() => {\n        getLog();\n    }, [selectedContact]);\n\n\n    const getLog = () => {\n        let mySentMessages,\n            myRecMessages,\n            recHistory = [],\n            sentHistory = [];\n\n        connection.mam.query(connection.jid.split(\"/\", 1)[0], {\n            with: selectedContact,\n            onMessage: function (message) {\n                console.log(\"mam\");\n                $(message).each(function () {\n\n                    if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"from\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        myRecMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"rec\"\n                        };\n                        recHistory = messageList.item;\n                        recHistory.push(myRecMessages);\n                        setMessageList({...messageList, item: recHistory});\n                    } else if (\n                        $(this)\n                            .find(\"forwarded message\")\n                            .attr(\"to\")\n                            .split(\"/\", 1)[0] === selectedContact\n                    ) {\n                        mySentMessages = {\n                            text: $(this)\n                                .find(\"forwarded message body\")\n                                .text(),\n                            stamp: $(this)\n                                .find(\"delay\")\n                                .attr(\"stamp\"),\n                            type: \"sent\"\n                        };\n                        sentHistory = messageList.item;\n                        sentHistory.push(mySentMessages);\n                        setMessageList({...messageList, item: sentHistory});\n                    }\n\n\n                });\n\n                dispatch({historyMessages: sentHistory, type: \"FETCH_HISTORY_MESSAGES\"});\n\n                return true;\n            },\n            onComplete: function (response) {\n                scrollToBottom();\n\n            }\n        });\n    };\n\n\n    const handleSubmit = () => {\n\n        console.log(\"selectedContact\", selectedContact);\n        let txtJID = selectedContact,\n            txtMsg = messageText.txt,\n            message,\n            sents = [];\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            let newMsg = {\n                text: message.message,\n                stamp: message.time.toString(),\n                type: message.type\n            };\n            let reply = $msg({\n                to: message.to,\n                from: connection.jid,\n                type: \"chat\",\n                id: \"message-1\"\n            })\n                .c(\"body\")\n                .t(message.message);\n            connection.send(reply.tree());\n            const text = message.message\n            dispatch({newMessage: text, type: 'GET_NEW_MESSAGE'})\n            dispatch({newMessage: newMsg, type: 'PUSH_HISTORY_MESSAGES'});\n            scrollToBottom();\n\n            sents = allMessages.item;\n            sents.push(message);\n            setAllMessages({...allMessages, item: sents});\n        }\n\n    };\n    // const handler = () => {\n    //     connection.addHandler(onReceiveMessage, null, \"message\", null, null);\n    // };\n    // useEffect(() => {\n    //     handler();\n    // }, [newMessage]);\n\n\n    /*----------------RECENT ACTIVITY------------------*/\n    const onLastActivity = (iq) => {\n\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime,\n                    type: errorType,\n                    errorMessage: null\n                };\n                setLastActivity({\n                    ...lastActivity, from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                lastActivityObj = {\n                    from: from,\n                    time: null,\n                    type: errorType,\n                    errorMessage: errorMessage\n                };\n                setLastActivity({\n                    ...lastActivity,\n                    from: lastActivityObj.from,\n                    time: lastActivityObj.time,\n                    type: lastActivityObj.type,\n                    errorMessage: lastActivityObj.errorMessage\n                });\n\n            }\n\n        });\n        return true\n\n    };\n    const getLastActivity = () => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: selectedContact,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq);\n        connection.addHandler(onLastActivity, null, \"iq\", null, null, null);\n    };\n    useEffect(() => {\n        getLastActivity();\n    }, [selectedContact]);\n\n    useEffect(() => {\n        getLastActivity();\n    }, [rosterStatus]);\n\n    useEffect(() => {\n       console.log('render')\n    },[])\n    return (\n        <React.Fragment>\n            <div className=\"userInfo-bar\">\n                <p className=\"userId\">{selectedContact}</p>\n                <p>{lastActivity.type === \"error\" ? \"Last seen recently\" : lastActivity.time === \"0\" ? \"online\"\n                    : lastActivity.time < 60 ? \"last seen \" + lastActivity.time + \" seconds ago\"\n                        : Math.floor(lastActivity.time / 60) < 60 ? \"last seen \" + Math.floor(lastActivity.time / 60) + \" minutes ago\"\n                            : Math.floor(lastActivity.time / 3600) < 24 ? \"last seen \" + Math.floor(lastActivity.time / 3600) + \" hours ago\"\n                                : Math.floor(lastActivity.time / 86400) < 7 ? \"last seen \" + Math.floor(lastActivity.time / 86400) + \" days ago\" : \"last seen over a week ago\"\n                }</p>\n            </div>\n\n            {/*<div className=\"search-bar\">*/}\n            {/*    <Search items={historyMessages}/>*/}\n            {/*</div>*/}\n\n            <div className=\"all-messages\">\n                <div className=\"archive\">\n\n                    {\n                        historyMessages.length > 0 ? historyMessages.map((item, i) => {\n                            return (\n                                <MessagePopUp\n                                    key={i}\n                                    sentMsg={item.text}\n                                    type={item.type}\n                                />\n                            );\n                        }) : null\n                    }\n                </div>\n\n            </div>\n\n            <div className=\"textbox\">\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={messageText.txt}\n                    onChange={(event) => {\n                        changeMessageText({\n                            ...messageText,\n                            txt: event.target.value\n                        })\n                    } }\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                >send\n                </button>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ChatBox;\n"]},"metadata":{},"sourceType":"module"}