{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar Utils = require('./Utils');\n\nvar JsSIP_C = require('./Constants');\n\nvar SIPMessage = require('./SIPMessage');\n\nvar RequestSender = require('./RequestSender');\n\nvar debug = require('debug')('JsSIP:Registrator');\n\nvar MIN_REGISTER_EXPIRES = 10; // In seconds.\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function Registrator(ua, transport) {\n    _classCallCheck(this, Registrator);\n\n    var reg_id = 1; // Force reg_id to 1.\n\n    this._ua = ua;\n    this._transport = transport;\n    this._registrar = ua.configuration.registrar_server;\n    this._expires = ua.configuration.register_expires; // Call-ID and CSeq values RFC3261 10.2.\n\n    this._call_id = Utils.createRandomToken(22);\n    this._cseq = 0;\n    this._to_uri = ua.configuration.uri;\n    this._registrationTimer = null; // Ongoing Register request.\n\n    this._registering = false; // Set status.\n\n    this._registered = false; // Contact header.\n\n    this._contact = this._ua.contact.toString(); // Sip.ice media feature tag (RFC 5768).\n\n    this._contact += ';+sip.ice'; // Custom headers for REGISTER and un-REGISTER.\n\n    this._extraHeaders = []; // Custom Contact header params for REGISTER and un-REGISTER.\n\n    this._extraContactParams = '';\n\n    if (reg_id) {\n      this._contact += \";reg-id=\".concat(reg_id);\n      this._contact += \";+sip.instance=\\\"<urn:uuid:\".concat(this._ua.configuration.instance_id, \">\\\"\");\n    }\n  }\n\n  _createClass(Registrator, [{\n    key: \"setExtraHeaders\",\n    value: function setExtraHeaders(extraHeaders) {\n      if (!Array.isArray(extraHeaders)) {\n        extraHeaders = [];\n      }\n\n      this._extraHeaders = extraHeaders.slice();\n    }\n  }, {\n    key: \"setExtraContactParams\",\n    value: function setExtraContactParams(extraContactParams) {\n      if (!(extraContactParams instanceof Object)) {\n        extraContactParams = {};\n      } // Reset it.\n\n\n      this._extraContactParams = '';\n\n      for (var param_key in extraContactParams) {\n        if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key)) {\n          var param_value = extraContactParams[param_key];\n          this._extraContactParams += \";\".concat(param_key);\n\n          if (param_value) {\n            this._extraContactParams += \"=\".concat(param_value);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this = this;\n\n      if (this._registering) {\n        debug('Register request in progress...');\n        return;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=\").concat(this._expires).concat(this._extraContactParams));\n      extraHeaders.push(\"Expires: \".concat(this._expires));\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          // Discard responses to older REGISTER/un-REGISTER requests.\n          if (response.cseq !== _this._cseq) {\n            return;\n          } // Clear registration timer.\n\n\n          if (_this._registrationTimer !== null) {\n            clearTimeout(_this._registrationTimer);\n            _this._registrationTimer = null;\n          }\n\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              {\n                // Ignore provisional responses.\n                break;\n              }\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              {\n                _this._registering = false;\n\n                if (!response.hasHeader('Contact')) {\n                  debug('no Contact header in response to REGISTER, response ignored');\n                  break;\n                }\n\n                var contacts = response.headers['Contact'].reduce(function (a, b) {\n                  return a.concat(b.parsed);\n                }, []); // Get the Contact pointing to us and update the expires value accordingly.\n\n                var contact = contacts.find(function (element) {\n                  return element.uri.user === _this._ua.contact.uri.user;\n                });\n\n                if (!contact) {\n                  debug('no Contact header pointing to us, response ignored');\n                  break;\n                }\n\n                var expires = contact.getParam('expires');\n\n                if (!expires && response.hasHeader('expires')) {\n                  expires = response.getHeader('expires');\n                }\n\n                if (!expires) {\n                  expires = _this._expires;\n                }\n\n                expires = Number(expires);\n                if (expires < MIN_REGISTER_EXPIRES) expires = MIN_REGISTER_EXPIRES; // Re-Register or emit an event before the expiration interval has elapsed.\n                // For that, decrease the expires value. ie: 3 seconds.\n\n                _this._registrationTimer = setTimeout(function () {\n                  _this._registrationTimer = null; // If there are no listeners for registrationExpiring, renew registration.\n                  // If there are listeners, let the function listening do the register call.\n\n                  if (_this._ua.listeners('registrationExpiring').length === 0) {\n                    _this.register();\n                  } else {\n                    _this._ua.emit('registrationExpiring');\n                  }\n                }, expires * 1000 - 5000); // Save gruu values.\n\n                if (contact.hasParam('temp-gruu')) {\n                  _this._ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/\"/g, '');\n                }\n\n                if (contact.hasParam('pub-gruu')) {\n                  _this._ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/\"/g, '');\n                }\n\n                if (!_this._registered) {\n                  _this._registered = true;\n\n                  _this._ua.registered({\n                    response: response\n                  });\n                }\n\n                break;\n              }\n            // Interval too brief RFC3261 10.2.8.\n\n            case /^423$/.test(response.status_code):\n              {\n                if (response.hasHeader('min-expires')) {\n                  // Increase our registration interval to the suggested minimum.\n                  _this._expires = Number(response.getHeader('min-expires'));\n                  if (_this._expires < MIN_REGISTER_EXPIRES) _this._expires = MIN_REGISTER_EXPIRES; // Attempt the registration again immediately.\n\n                  _this.register();\n                } else {\n                  // This response MUST contain a Min-Expires header field.\n                  debug('423 response received for REGISTER without Min-Expires');\n\n                  _this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);\n                }\n\n                break;\n              }\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this._registrationFailure(response, cause);\n              }\n          }\n        }\n      });\n      this._registering = true;\n      request_sender.send();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._registered) {\n        debug('already unregistered');\n        return;\n      }\n\n      this._registered = false; // Clear the registration timer.\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      var extraHeaders = this._extraHeaders.slice();\n\n      if (options.all) {\n        extraHeaders.push(\"Contact: *\".concat(this._extraContactParams));\n      } else {\n        extraHeaders.push(\"Contact: \".concat(this._contact, \";expires=0\").concat(this._extraContactParams));\n      }\n\n      extraHeaders.push('Expires: 0');\n      var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {\n        'to_uri': this._to_uri,\n        'call_id': this._call_id,\n        'cseq': this._cseq += 1\n      }, extraHeaders);\n      var request_sender = new RequestSender(this._ua, request, {\n        onRequestTimeout: function onRequestTimeout() {\n          _this2._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n        },\n        onTransportError: function onTransportError() {\n          _this2._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);\n        },\n        // Increase the CSeq on authentication.\n        onAuthenticated: function onAuthenticated() {\n          _this2._cseq += 1;\n        },\n        onReceiveResponse: function onReceiveResponse(response) {\n          switch (true) {\n            case /^1[0-9]{2}$/.test(response.status_code):\n              // Ignore provisional responses.\n              break;\n\n            case /^2[0-9]{2}$/.test(response.status_code):\n              _this2._unregistered(response);\n\n              break;\n\n            default:\n              {\n                var cause = Utils.sipErrorCause(response.status_code);\n\n                _this2._unregistered(response, cause);\n              }\n          }\n        }\n      });\n      request_sender.send();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._registered) {\n        this.unregister();\n      }\n    }\n  }, {\n    key: \"onTransportClosed\",\n    value: function onTransportClosed() {\n      this._registering = false;\n\n      if (this._registrationTimer !== null) {\n        clearTimeout(this._registrationTimer);\n        this._registrationTimer = null;\n      }\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({});\n      }\n    }\n  }, {\n    key: \"_registrationFailure\",\n    value: function _registrationFailure(response, cause) {\n      this._registering = false;\n\n      this._ua.registrationFailed({\n        response: response || null,\n        cause: cause\n      });\n\n      if (this._registered) {\n        this._registered = false;\n\n        this._ua.unregistered({\n          response: response || null,\n          cause: cause\n        });\n      }\n    }\n  }, {\n    key: \"_unregistered\",\n    value: function _unregistered(response, cause) {\n      this._registering = false;\n      this._registered = false;\n\n      this._ua.unregistered({\n        response: response || null,\n        cause: cause || null\n      });\n    }\n  }, {\n    key: \"registered\",\n    get: function get() {\n      return this._registered;\n    }\n  }]);\n\n  return Registrator;\n}();","map":null,"metadata":{},"sourceType":"script"}