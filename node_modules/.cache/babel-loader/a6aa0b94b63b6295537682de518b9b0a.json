{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Search = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        query = _useState2[0],\n        setQuery = _useState2[1];\n\n  const handleInputChange = e => {\n    // Variable to hold the original version of the list\n    let currentList = []; // Variable to hold the filtered list before putting into state\n\n    let newList = []; // If the search bar isn't empty\n\n    if (e.target.value !== \"\") {\n      // Assign the original list to currentList\n      currentList = this.props.items; // Use .filter() to determine which items should be displayed\n      // based on the search terms\n\n      newList = currentList.filter(item => {\n        // change current item to lowercase\n        const lc = item.toLowerCase(); // change search term to lowercase\n\n        const filter = e.target.value.toLowerCase(); // check to see if the current list item includes the search term\n        // If it does, it will be added to newList. Using lowercase eliminates\n        // issues with capitalization in search terms and search content\n\n        return lc.includes(filter);\n      });\n    } else {\n      // If the search bar is empty, set newList to original task list\n      newList = this.props.items;\n    } // Set the filtered state based on what our rules added to newList\n\n\n    this.setState({\n      filtered: newList\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    placeholder: \"Search for...\",\n    onChange: handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, query))));\n};\n\nexport default Search;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/search/search.js"],"names":["React","useEffect","useState","Search","query","setQuery","handleInputChange","e","currentList","newList","target","value","props","items","filter","item","lc","toLowerCase","includes","setState","filtered"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAAA,oBACSD,QAAQ,CAAC,EAAD,CADjB;AAAA;AAAA,QACVE,KADU;AAAA,QACHC,QADG;;AAEjB,QAAMC,iBAAiB,GAAIC,CAAD,IAAO;AAC7B;AACA,QAAIC,WAAW,GAAG,EAAlB,CAF6B,CAG7B;;AACA,QAAIC,OAAO,GAAG,EAAd,CAJ6B,CAM7B;;AACA,QAAIF,CAAC,CAACG,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACvB;AACAH,MAAAA,WAAW,GAAG,KAAKI,KAAL,CAAWC,KAAzB,CAFuB,CAIvB;AACA;;AACAJ,MAAAA,OAAO,GAAGD,WAAW,CAACM,MAAZ,CAAmBC,IAAI,IAAI;AACjC;AACA,cAAMC,EAAE,GAAGD,IAAI,CAACE,WAAL,EAAX,CAFiC,CAGjC;;AACA,cAAMH,MAAM,GAAGP,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeM,WAAf,EAAf,CAJiC,CAKjC;AACA;AACA;;AACA,eAAOD,EAAE,CAACE,QAAH,CAAYJ,MAAZ,CAAP;AACH,OATS,CAAV;AAUH,KAhBD,MAgBO;AACH;AACAL,MAAAA,OAAO,GAAG,KAAKG,KAAL,CAAWC,KAArB;AACH,KA1B4B,CA2B7B;;;AACA,SAAKM,QAAL,CAAc;AACVC,MAAAA,QAAQ,EAAEX;AADA,KAAd;AAKH,GAjCD;;AAkCA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,WAAW,EAAC,eADhB;AAEI,IAAA,QAAQ,EAAEH,iBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAJ,CALJ,CADJ,CADJ,CADJ;AAcH,CAlDD;;AAqDA,eAAeD,MAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\n\n\nconst Search = () => {\n    const [query, setQuery] = useState('')\n    const handleInputChange = (e) => {\n        // Variable to hold the original version of the list\n        let currentList = [];\n        // Variable to hold the filtered list before putting into state\n        let newList = [];\n\n        // If the search bar isn't empty\n        if (e.target.value !== \"\") {\n            // Assign the original list to currentList\n            currentList = this.props.items;\n\n            // Use .filter() to determine which items should be displayed\n            // based on the search terms\n            newList = currentList.filter(item => {\n                // change current item to lowercase\n                const lc = item.toLowerCase();\n                // change search term to lowercase\n                const filter = e.target.value.toLowerCase();\n                // check to see if the current list item includes the search term\n                // If it does, it will be added to newList. Using lowercase eliminates\n                // issues with capitalization in search terms and search content\n                return lc.includes(filter);\n            });\n        } else {\n            // If the search bar is empty, set newList to original task list\n            newList = this.props.items;\n        }\n        // Set the filtered state based on what our rules added to newList\n        this.setState({\n            filtered: newList\n        });\n\n\n    };\n    return (\n        <React.Fragment>\n            <div className=\"container\">\n                <form>\n                    <input\n                        placeholder=\"Search for...\"\n                        onChange={handleInputChange}\n                    />\n                    <p>{query}</p>\n                </form>\n            </div>\n        </React.Fragment>\n    );\n\n}\n\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}