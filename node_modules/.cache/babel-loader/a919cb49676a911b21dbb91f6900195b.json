{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n\n  const _renderLogs = group => {\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, key.replace('Logs', '')), group[key].map((item, i) => React.createElement(LogItem, {\n      item: item,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }))));\n  };\n\n  const clearDuplicates = group => {\n    return Object.keys(group).map((key, index) => {\n      for (let i = 0; i < group[key].length; i++) {\n        let current = group[key][i];\n        console.log(\"current\", current);\n        console.log(\" group[key][i]\", group[key]);\n        const result = [...group[key][i].reduce((mp, o) => {\n          if (mp.direction === current.direction && mp.from === current.from) {\n            console.log(\"mp\", mp);\n            mp.set(o, _objectSpread({}, o, {\n              count: 0\n            }));\n          }\n\n          ;\n          mp.get(o).count++;\n          i++;\n          return mp;\n        }, new Map()).values()];\n        console.log(\"result\", result);\n      } // console.log(group[key])\n\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, _renderLogs(cdrsData), clearDuplicates(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","GroupedLog","cdrsData","state","_renderLogs","group","Object","keys","map","key","index","replace","item","i","clearDuplicates","length","current","console","log","result","reduce","mp","o","direction","from","set","count","get","Map","values"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;;AAEA,QAAME,WAAW,GAAIC,KAAD,IAAW;AAC3B,WAAOC,MAAM,CACRC,IADE,CACGF,KADH,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KACD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAJ,CADJ,EAEKN,KAAK,CAACI,GAAD,CAAL,CAAWD,GAAX,CAAe,CAACI,IAAD,EAAOC,CAAP,KACZ,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,GAAG,EAAEC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,CAHD,CAAP;AAUH,GAXD;;AAYA,QAAMC,eAAe,GAAIT,KAAD,IAAW;AAC/B,WAAOC,MAAM,CACRC,IADE,CACGF,KADH,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACb,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACI,GAAD,CAAL,CAAWM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,YAAIG,OAAO,GAAGX,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,CAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,OAAtB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Bb,KAAK,CAACI,GAAD,CAAnC;AAEA,cAAMU,MAAM,GAAG,CAAC,GAAGd,KAAK,CAACI,GAAD,CAAL,CAAWI,CAAX,EAAcO,MAAd,CAAsB,CAACC,EAAD,EAAKC,CAAL,KAAW;AAChD,cAAID,EAAE,CAACE,SAAH,KAAiBP,OAAO,CAACO,SAAzB,IAAsCF,EAAE,CAACG,IAAH,KAAYR,OAAO,CAACQ,IAA9D,EAAoE;AAChEP,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBG,EAAlB;AACAA,YAAAA,EAAE,CAACI,GAAH,CAAOH,CAAP,oBAAeA,CAAf;AAAkBI,cAAAA,KAAK,EAAE;AAAzB;AACH;;AAAA;AAEDL,UAAAA,EAAE,CAACM,GAAH,CAAOL,CAAP,EAAUI,KAAV;AACAb,UAAAA,CAAC;AACD,iBAAOQ,EAAP;AACH,SATkB,EAShB,IAAIO,GAAJ,EATgB,EASPC,MATO,EAAJ,CAAf;AAWAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBC,MAArB;AACH,OAlBY,CAmBb;;AACH,KAtBF,CAAP;AAwBH,GAzBD;;AA2BA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQf,WAAW,CAACF,QAAD,CAFnB,EAKQY,eAAe,CAACZ,QAAD,CALvB,CADJ;AAWH,CArDD;;AAwDA,eAAeD,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n\n    const _renderLogs = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => (\n                <div key={index} >\n                    <p>{key.replace('Logs', '')}</p>\n                    {group[key].map((item, i) => (\n                        <LogItem item={item} key={i}/>\n                    ))}\n                </div>\n            ));\n    };\n    const clearDuplicates = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => {\n                    for (let i = 0; i < group[key].length; i++) {\n                        let current = group[key][i];\n                        console.log(\"current\",current);\n                        console.log(\" group[key][i]\", group[key]);\n\n                        const result = [...group[key][i].reduce( (mp, o) => {\n                            if (mp.direction === current.direction && mp.from === current.from) {\n                                console.log(\"mp\", mp)\n                                mp.set(o, { ...o, count: 0 })\n                            };\n\n                            mp.get(o).count++;\n                            i++\n                            return mp;\n                        }, new Map).values()];\n\n                        console.log(\"result\",result);\n                    }\n                    // console.log(group[key])\n                }\n            )\n    }\n\n    return (\n        <React.Fragment>\n            {\n                _renderLogs(cdrsData)\n            }\n            {\n                clearDuplicates(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}