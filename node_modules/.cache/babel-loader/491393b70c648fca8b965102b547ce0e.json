{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport \"./style.css\";\n\nconst ContactItem = props => {\n  const dispatch = useDispatch();\n\n  const _useState = useState({\n    from: '',\n    time: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastActivity = _useState2[0],\n        setLastActivity = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        userStatus = _useState4[0],\n        setUserStatus = _useState4[1];\n\n  const rosterStatus = useSelector(state => state.rosterStatus);\n\n  const handleRosterClick = contact => {\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------find status for specific user------------------*/\n\n\n  const findRosterStatus = () => {\n    const item = rosterStatus.filter(i => i.id === props.item.jid)[0];\n    setUserStatus(item);\n  };\n  /*--------------/find status for specific user------------------*/\n\n\n  useEffect(() => {\n    findRosterStatus();\n  }, [rosterStatus]);\n\n  const millisToMinutesAndSeconds = millis => {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, lastActivity.time), React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, userStatus !== undefined ? React.createElement(RosterStatusDetector, {\n    status: userStatus.status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }) : React.createElement(\"span\", {\n    className: \"offline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","RosterStatusDetector","ContactItem","props","dispatch","from","time","lastActivity","setLastActivity","userStatus","setUserStatus","rosterStatus","state","handleRosterClick","contact","type","findRosterStatus","item","filter","i","id","jid","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","undefined","status","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport \"./style.css\";\n\nconst ContactItem = (props) => {\n    const dispatch = useDispatch();\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''});\n    const [userStatus, setUserStatus] = useState({})\n    const rosterStatus = useSelector(state => state.rosterStatus);\n\n    const handleRosterClick = (contact) => {\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n\n    /*----------find status for specific user------------------*/\n    const findRosterStatus = () => {\n        const item = rosterStatus.filter(i => i.id === props.item.jid)[0]\n        setUserStatus(item);\n    };\n    /*--------------/find status for specific user------------------*/\n\n\n    useEffect(() => {\n        findRosterStatus()\n    }, [rosterStatus]);\n\n    const millisToMinutesAndSeconds = (millis) => {\n        let minutes = Math.floor(millis / 60000);\n        let seconds = ((millis % 60000) / 1000).toFixed(0);\n\n        return minutes;\n    };\n    return (\n        <React.Fragment>\n\n            <p>{lastActivity.time}</p>\n            <div\n                onClick={() => handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n                    {\n                        userStatus !== undefined ? <RosterStatusDetector status={userStatus.status}/> :\n                            <span className=\"offline\"></span>\n                    }\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n    );\n\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}