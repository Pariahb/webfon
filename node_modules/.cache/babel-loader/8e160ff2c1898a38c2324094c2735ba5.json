{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  const contacts = useSelector(state => state.contacts);\n  const rosterStatus = useSelector(state => state.rosterStatus);\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n  const onPresence = presence => {\n    $(presence).each(function () {\n      let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n\n      if (from !== connection.jid) {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n        console.log(\"presence\", presence);\n\n        if (!presence_type) {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (!show) {\n            if (presence_type === \"unavailable\") {\n              // Mark contact as offline\n              const rosterStatusItem = {\n                id: from,\n                status: \"xa\"\n              };\n              const rosterStatusLi = rosterStatus.push(rosterStatusItem);\n              dispatch({\n                rosterStatusLi,\n                type: \"CHANGE_EACH_ROSTER_STATUS\"\n              });\n              console.log(\"presence_type2\", presence_type);\n              console.log(from + \"contact as unavailable\");\n            } else {\n              // Mark contact as offline\n              changeRosterStatus(\"chat\");\n              console.log(\"presence_type2\", presence_type);\n            }\n          } else {\n            switch (show) {\n              case \"chat\":\n                changeRosterStatus(\"chat\"); // Mark contact as online\n\n                console.log(from + \"contact as online\");\n                break;\n\n              case \"away\":\n                changeRosterStatus(\"away\");\n                console.log(from + \"contact as away\");\n                break;\n\n              case \"dnd\":\n                changeRosterStatus(\"dnd\");\n                console.log(from + \"contact as dnd\");\n                break;\n\n              case \"xa\":\n                changeRosterStatus(\"xa\");\n                console.log(from + \"contact as xa\");\n                break;\n\n              default:\n                changeRosterStatus(\"chat\");\n            }\n          }\n        }\n      }\n    });\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-sm-4 contacts\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"\\u0644\\u06CC\\u0633\\u062A \\u067E\\u06CC\\u0627\\u0645 \\u0647\\u0627\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"\\u0627\\u0641\\u0631\\u0627\\u062F \\u0622\\u0646\\u0644\\u0627\\u06CC\\u0646 (\\u06F4 \\u0646\\u0641\\u0631)\")), contacts.map((item, i) => {\n    console.log(item); // Return the element. Also pass key\n\n    return React.createElement(ContactItem, {\n      key: i,\n      item: item,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  })));\n};\n\nexport default ContactsList;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contacts-list/index.js"],"names":["React","useEffect","useState","ContactItem","useDispatch","useSelector","$","ContactsList","dispatch","showMainPage","state","connection","contacts","rosterStatus","onPresence","presence","each","from","attr","jid","presence_type","console","log","show","find","text","rosterStatusItem","id","status","rosterStatusLi","push","type","changeRosterStatus","addHandler","map","item","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport ContactItem from \"../contact-item\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactsList = () => {\n    const dispatch = useDispatch();\n    const showMainPage = useSelector(state => state.showMainPage);\n    const connection = useSelector(state => state.connection);\n    const contacts = useSelector(state => state.contacts);\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n\n        $(presence).each(function () {\n                let from = $(presence).attr(\"from\"); // the jabber_id of the contact\\\n                if (from !== connection.jid) {\n                    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n                    console.log(\"presence\", presence)\n                    if (!presence_type) {\n                        let show = $(presence)\n                            .find(\"show\")\n                            .text(); // this is what gives away, dnd, etc.\n                        if (!show) {\n                            if (presence_type === \"unavailable\") {\n                                // Mark contact as offline\n                                const rosterStatusItem = {\n                                    id : from,\n                                    status : \"xa\"\n                                }\n\n                                const rosterStatusLi = rosterStatus.push(rosterStatusItem);\n                                dispatch( {rosterStatusLi, type: \"CHANGE_EACH_ROSTER_STATUS\"});\n\n                                console.log(\"presence_type2\", presence_type)\n\n                                console.log(from + \"contact as unavailable\");\n\n                            } else {\n                                // Mark contact as offline\n                                changeRosterStatus(\"chat\");\n                                console.log(\"presence_type2\", presence_type);\n                            }\n                        } else {\n                            switch (show) {\n                                case \"chat\" :\n                                    changeRosterStatus(\"chat\");\n                                    // Mark contact as online\n                                    console.log(from + \"contact as online\");\n                                    break;\n                                case \"away\" :\n                                    changeRosterStatus(\"away\");\n                                    console.log(from + \"contact as away\");\n                                    break;\n                                case \"dnd\":\n                                    changeRosterStatus(\"dnd\");\n                                    console.log(from + \"contact as dnd\");\n                                    break;\n                                case \"xa\":\n                                    changeRosterStatus(\"xa\");\n                                    console.log(from + \"contact as xa\");\n                                    break;\n                                default :\n                                    changeRosterStatus(\"chat\");\n\n                            }\n                        }\n\n                    }\n                }\n\n            }\n        );\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*---------------------------------*/\n\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div className=\"col-sm-4 contacts\">\n                <div className=\"header\">\n                    <p>لیست پیام ها</p>\n                    <p>افراد آنلاین (۴ نفر)</p>\n                </div>\n                {contacts.map((item, i) => {\n                    console.log(item)\n                    // Return the element. Also pass key\n                    return (\n                        <ContactItem\n                            key={i}\n                            item={item}\n                        />\n\n                    );\n                })}\n\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default ContactsList;\n"]},"metadata":{},"sourceType":"module"}