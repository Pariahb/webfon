{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js\";\nimport React from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButton from \"../radio-button\";\nimport $ from \"jquery\"; // import \"./style.css\";\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connection: new window.Strophe.Connection(\"http://77.104.116.225:5280/http-bind\"),\n      strophe: window.Strophe,\n      $iq: window.$iq,\n      $pres: window.$pres,\n      showMainPage: false,\n      contacts: [],\n      contactStatus: \"\",\n      iq: null,\n      jid: \"\",\n      contactJID: \"\",\n      statuses: [\"online\", \"away\", \"dnd\", \"offline\"]\n    };\n    this.onConnect = this.onConnect.bind(this);\n    this.getRoster = this.getRoster.bind(this);\n    this.rosterReceived = this.rosterReceived.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n    this.onPresence = this.onPresence.bind(this);\n    this.onSubscriptionRequest = this.onSubscriptionRequest.bind(this);\n  } //strophe connection process\n\n\n  onConnect(status) {\n    console.log(\"window.Strophe.Status\", this.state.strophe.Status);\n\n    if (status === this.state.strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === this.state.strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === this.state.strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === this.state.strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === this.state.strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === this.state.strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\"); // $(\"#connect\").get(0).value = \"connect\";\n    } else if (status === this.state.strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\");\n      this.setState({\n        showMainPage: true,\n        jid: this.state.connection.jid\n      });\n      this.getRoster();\n      this.sendPriority();\n    }\n  }\n  /*-----------------Log Out Button action----------------=*/\n\n\n  handleDisconnect() {\n    this.state.connection.disconnect();\n    this.setState({\n      showMainPage: false\n    });\n  }\n  /*-----------------/Log Out Button action----------------=*/\n\n  /*-----------------Get Contacts List (step1)----------------=*/\n\n\n  getRoster() {\n    this.setState({\n      contacts: [],\n      iq: this.state.$iq({\n        type: \"get\",\n        id: \"r1\"\n      }).c(\"query\", {\n        xmlns: \"jabber:iq:roster\"\n      })\n    });\n    this.state.connection.sendIQ(this.state.iq, this.rosterReceived);\n  }\n  /*-----------------Get Contacts List (step1)----------------*/\n\n  /*-----------------Get priority ----------------*/\n\n\n  sendPriority() {\n    // let priority = $(\"#priority\").get(0).value;\n    //var selectedPriority = parseInt(priority.options[priority.selectedIndex].value);\n    this.state.connection.send(this.state.$pres().c(\"priority\").t(\"10\").up().c(\"rap\", {\n      xmlns: \"urn:xmpp:rap:0\",\n      ns: \"urn:xmpp:jingle:apps:rtp:0\",\n      num: '5'\n    }));\n    this.state.connection.sendIQ(this.state.$iq({\n      type: \"get\"\n    }).c(\"query\", {\n      xmlns: \"http://jabber.org/protocol/disco#info\"\n    }));\n  }\n  /*-----------------Get priority ----------------*/\n\n  /*-----------------Received contacts Time (step2)----------------*/\n\n\n  rosterReceived(iq) {\n    let jid;\n    let rosterName;\n    let mycontacts = [];\n    $(iq).find(\"item\").each(function () {\n      jid = $(this).attr(\"jid\"); // The jabber_id of your contact\n\n      if ($(this).attr(\"name\")) {\n        rosterName = $(this).attr(\"name\");\n      } else {\n        rosterName = \"\";\n      } // The jabber_id of your contact\n      // You can probably put them in a unordered list and and use their jids as ids.\n\n\n      mycontacts = mycontacts.concat({\n        name: rosterName,\n        jid: jid\n      });\n    });\n    this.setState({\n      contacts: mycontacts\n    });\n    console.log(\"mycontacts\", this.state.contacts);\n    this.state.connection.send(window.$pres());\n    this.state.connection.addHandler(this.onPresence, null, \"presence\", null, null, null);\n  }\n  /*-----------------Received contacts (step2)----------------*/\n\n  /*----------response to subscription request-----------*/\n\n\n  onSubscriptionRequest(stanza) {\n    this.setState({\n      showPopUp: true\n    });\n\n    if (stanza.getAttribute(\"type\") === \"subscribe\") {\n      // Send a 'subscribed' notification back to accept the incoming\n      // subscription request\n      this.state.connection.send(window.$pres({\n        to: stanza.getAttribute(\"from\"),\n        type: \"subscribed\"\n      }));\n    }\n\n    return true;\n  }\n  /*----------/response to subscription request-----------*/\n\n  /*----------get contact presence-----------*/\n\n\n  onPresence(presence) {\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (!presence_type) presence_type = \"online\";\n\n    if (presence_type !== \"error\") {\n      if (presence_type === \"unavailable\") {\n        // Mark contact as offline\n        this.setState({\n          contactStatus: \"offline\"\n        });\n        console.log(\"contact as offline\");\n      } else {\n        let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n        if (show === \"online\") {\n          // Mark contact as online\n          console.log(\"contact as online\");\n          this.setState({\n            contactStatus: \"online\"\n          });\n        } else if (show === \"away\") {\n          // etc...\n          this.setState({\n            contactStatus: \"away\"\n          });\n        } else if (show === \"dnd\") {\n          // etc...\n          this.setState({\n            contactStatus: \"dnd\"\n          });\n        } else if (show === \"offline\") {\n          // etc...\n          this.setState({\n            contactStatus: \"offline\"\n          });\n        }\n      }\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  }\n  /*----------get contact presence-----------*/\n\n\n  render() {\n    localStorage.setItem(\"id\", \"\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.state.showMainPage ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mystatus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(RadioButton, {\n      connection: this.state.connection,\n      pres: this.state.$pres,\n      statuses: this.state.statuses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"user-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"button\",\n      value: \"logout\",\n      className: \"btn btn-primary\",\n      id: \"logout\",\n      onClick: this.handleDisconnect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"current-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.state.jid.split(\"@\", 1))), React.createElement(TabsSection, {\n      contacts: this.state.contacts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })) : React.createElement(LoginPage, {\n      onConnect: this.onConnect,\n      connection: this.state.connection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default MainPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/main-page/index.js"],"names":["React","LoginPage","TabsSection","Button","RadioButton","$","MainPage","Component","constructor","props","state","connection","window","Strophe","Connection","strophe","$iq","$pres","showMainPage","contacts","contactStatus","iq","jid","contactJID","statuses","onConnect","bind","getRoster","rosterReceived","handleDisconnect","onPresence","onSubscriptionRequest","status","console","log","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","setState","sendPriority","disconnect","type","id","c","xmlns","sendIQ","send","t","up","ns","num","rosterName","mycontacts","find","each","attr","concat","name","addHandler","stanza","showPopUp","getAttribute","to","presence","presence_type","from","show","text","render","localStorage","setItem","split"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport LoginPage from \"../login-page\";\nimport TabsSection from \"../tabs\";\nimport Button from \"../button\";\nimport RadioButton from \"../radio-button\";\nimport $ from \"jquery\";\n\n// import \"./style.css\";\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            connection: new window.Strophe.Connection(\n                \"http://77.104.116.225:5280/http-bind\"\n            ),\n            strophe: window.Strophe,\n            $iq: window.$iq,\n            $pres: window.$pres,\n            showMainPage: false,\n            contacts: [],\n            contactStatus: \"\",\n            iq: null,\n            jid: \"\",\n            contactJID: \"\",\n            statuses: [\"online\",\"away\",\"dnd\",\"offline\"]\n\n        };\n\n        this.onConnect = this.onConnect.bind(this);\n        this.getRoster = this.getRoster.bind(this);\n        this.rosterReceived = this.rosterReceived.bind(this);\n        this.handleDisconnect = this.handleDisconnect.bind(this);\n        this.onPresence = this.onPresence.bind(this);\n        this.onSubscriptionRequest = this.onSubscriptionRequest.bind(this);\n    }\n\n\n    //strophe connection process\n    onConnect(status) {\n        console.log(\"window.Strophe.Status\", this.state.strophe.Status);\n        if (status === this.state.strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === this.state.strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === this.state.strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === this.state.strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === this.state.strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === this.state.strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            // $(\"#connect\").get(0).value = \"connect\";\n        } else if (status === this.state.strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            this.setState({\n                showMainPage: true,\n                jid: this.state.connection.jid\n            });\n            this.getRoster();\n            this.sendPriority();\n\n        }\n    }\n\n    /*-----------------Log Out Button action----------------=*/\n    handleDisconnect() {\n        this.state.connection.disconnect();\n        this.setState({\n            showMainPage: false\n        });\n    }\n\n    /*-----------------/Log Out Button action----------------=*/\n\n    /*-----------------Get Contacts List (step1)----------------=*/\n    getRoster() {\n        this.setState({\n            contacts: [],\n            iq: this.state\n                .$iq({type: \"get\", id: \"r1\"})\n                .c(\"query\", {xmlns: \"jabber:iq:roster\"})\n        });\n        this.state.connection.sendIQ(this.state.iq, this.rosterReceived);\n    }\n\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Get priority ----------------*/\n    sendPriority() {\n        // let priority = $(\"#priority\").get(0).value;\n        //var selectedPriority = parseInt(priority.options[priority.selectedIndex].value);\n        this.state.connection.send(\n            this.state.$pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:0\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        this.state.connection.sendIQ(this.state.$iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    }\n\n    /*-----------------Get priority ----------------*/\n\n    /*-----------------Received contacts Time (step2)----------------*/\n    rosterReceived(iq) {\n        let jid;\n        let rosterName;\n        let mycontacts = [];\n        $(iq)\n            .find(\"item\")\n            .each(function () {\n                jid = $(this).attr(\"jid\"); // The jabber_id of your contact\n                if ($(this).attr(\"name\")) {\n                    rosterName = $(this).attr(\"name\");\n                } else {\n                    rosterName = \"\";\n                }\n                // The jabber_id of your contact\n                // You can probably put them in a unordered list and and use their jids as ids.\n                mycontacts = mycontacts.concat({\n                    name: rosterName,\n                    jid: jid\n                });\n            });\n\n        this.setState({\n            contacts: mycontacts\n        });\n        console.log(\"mycontacts\", this.state.contacts)\n        this.state.connection.send(window.$pres());\n\n        this.state.connection.addHandler(\n            this.onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }\n\n    /*-----------------Received contacts (step2)----------------*/\n\n\n    /*----------response to subscription request-----------*/\n    onSubscriptionRequest(stanza) {\n        this.setState({\n            showPopUp: true\n        })\n        if (stanza.getAttribute(\"type\") === \"subscribe\") {\n            // Send a 'subscribed' notification back to accept the incoming\n            // subscription request\n            this.state.connection.send(window.$pres({to: stanza.getAttribute(\"from\"), type: \"subscribed\"}));\n        }\n        return true;\n    }\n\n    /*----------/response to subscription request-----------*/\n\n    /*----------get contact presence-----------*/\n    onPresence(presence) {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n        if (!presence_type) presence_type = \"online\";\n        if (presence_type !== \"error\") {\n            if (presence_type === \"unavailable\") {\n                // Mark contact as offline\n                this.setState({\n                    contactStatus: \"offline\"\n                });\n                console.log(\"contact as offline\");\n\n            } else {\n                let show = $(presence)\n                    .find(\"show\")\n                    .text(); // this is what gives away, dnd, etc.\n                if (show === \"online\") {\n                    // Mark contact as online\n                    console.log(\"contact as online\");\n                    this.setState({\n                        contactStatus: \"online\"\n                    });\n                } else if (show === \"away\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"away\"\n                    });\n                } else if (show === \"dnd\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"dnd\"\n                    });\n                } else if (show === \"offline\") {\n                    // etc...\n                    this.setState({\n                        contactStatus: \"offline\"\n                    });\n                }\n            }\n        }\n\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n\n    /*----------get contact presence-----------*/\n\n    render() {\n        localStorage.setItem(\"id\", \"\");\n\n        return (\n            <React.Fragment>\n                <div className=\"container\">\n                    {this.state.showMainPage ? (\n                        <React.Fragment>\n                            <div className=\"mystatus\">\n                                <RadioButton connection={this.state.connection} pres={this.state.$pres} statuses={this.state.statuses} />\n                            </div>\n                            <div className=\"user-info\">\n                                <Button\n                                    type=\"button\"\n                                    value=\"logout\"\n                                    className=\"btn btn-primary\"\n                                    id=\"logout\"\n                                    onClick={this.handleDisconnect}\n                                />\n                                <p className=\"current-user\">{this.state.jid.split(\"@\", 1)}</p>\n                            </div>\n                            <TabsSection\n                                contacts={this.state.contacts}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <LoginPage\n                            onConnect={this.onConnect}\n                            connection={this.state.connection}\n                        />\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default MainPage;\n"]},"metadata":{},"sourceType":"module"}