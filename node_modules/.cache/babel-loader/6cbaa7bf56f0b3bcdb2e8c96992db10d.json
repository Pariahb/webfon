{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n\n  const _renderLogs = group => {\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, key.replace('Logs', '')), group[key].map((item, i) => React.createElement(LogItem, {\n      item: item,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }))));\n  };\n\n  const clearDuplicates = group => {\n    return Object.values(group).map((key, index) => {\n      if (key.direction === \"inbound\") {\n        const inboundResult = [...key.reduce((mp, o) => {\n          const key = JSON.stringify([o.direction, o.from]);\n          if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n            count: 0\n          }));\n          mp.get(key).count++;\n          return mp;\n        }, new Map()).values()];\n        console.log(\"inboundResult\", inboundResult);\n      } else if (key.direction === \"outbound\") {\n        const outboundResult = [...key.reduce((mp, o) => {\n          const key = JSON.stringify([o.direction, o.from]);\n          if (!mp.has(key)) mp.set(key, _objectSpread({}, o, {\n            count: 0\n          }));\n          mp.get(key).count++;\n          return mp;\n        }, new Map()).values()];\n        console.log(\"outboundResult\", outboundResult);\n      }\n    });\n  };\n\n  function filterArr(data, key) {\n    data.forEach(element => {\n      let countedData = data.filter(el => {\n        return el[key] == element[key];\n      }).length;\n      console.log(element[key] + \": \" + countedData);\n    });\n    data = data.filter((item, index, self) => self.findIndex(t => t[key] === item[key] && item[key] != null) === index);\n    console.log(data);\n    return data;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, _renderLogs(cdrsData), clearDuplicates(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","GroupedLog","cdrsData","state","_renderLogs","group","Object","keys","map","key","index","replace","item","i","clearDuplicates","values","direction","inboundResult","reduce","mp","o","JSON","stringify","from","has","set","count","get","Map","console","log","outboundResult","filterArr","data","forEach","element","countedData","filter","el","length","self","findIndex","t"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;;AAEA,QAAME,WAAW,GAAIC,KAAD,IAAW;AAC3B,WAAOC,MAAM,CACRC,IADE,CACGF,KADH,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KACD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAJ,CADJ,EAEKN,KAAK,CAACI,GAAD,CAAL,CAAWD,GAAX,CAAe,CAACI,IAAD,EAAOC,CAAP,KAEZ,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,GAAG,EAAEC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CAFL,CAHD,CAAP;AAYH,GAbD;;AAcA,QAAMC,eAAe,GAAIT,KAAD,IAAW;AAC/B,WAAOC,MAAM,CACRS,MADE,CACKV,KADL,EAEFG,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACb,UAAID,GAAG,CAACO,SAAJ,KAAkB,SAAtB,EAAiC;AAC7B,cAAMC,aAAa,GAAG,CAAC,GAAGR,GAAG,CAACS,MAAJ,CAAW,CAACC,EAAD,EAAKC,CAAL,KAAW;AAC5C,gBAAMX,GAAG,GAAGY,IAAI,CAACC,SAAL,CAAe,CAACF,CAAC,CAACJ,SAAH,EAAcI,CAAC,CAACG,IAAhB,CAAf,CAAZ;AACA,cAAI,CAACJ,EAAE,CAACK,GAAH,CAAOf,GAAP,CAAL,EAAkBU,EAAE,CAACM,GAAH,CAAOhB,GAAP,oBAAgBW,CAAhB;AAAmBM,YAAAA,KAAK,EAAE;AAA1B;AAClBP,UAAAA,EAAE,CAACQ,GAAH,CAAOlB,GAAP,EAAYiB,KAAZ;AACA,iBAAOP,EAAP;AACH,SALyB,EAKvB,IAAIS,GAAJ,EALuB,EAKdb,MALc,EAAJ,CAAtB;AAOAc,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bb,aAA7B;AACH,OATD,MASO,IAAIR,GAAG,CAACO,SAAJ,KAAkB,UAAtB,EAAkC;AACrC,cAAMe,cAAc,GAAG,CAAC,GAAGtB,GAAG,CAACS,MAAJ,CAAW,CAACC,EAAD,EAAKC,CAAL,KAAW;AAC7C,gBAAMX,GAAG,GAAGY,IAAI,CAACC,SAAL,CAAe,CAACF,CAAC,CAACJ,SAAH,EAAcI,CAAC,CAACG,IAAhB,CAAf,CAAZ;AACA,cAAI,CAACJ,EAAE,CAACK,GAAH,CAAOf,GAAP,CAAL,EAAkBU,EAAE,CAACM,GAAH,CAAOhB,GAAP,oBAAgBW,CAAhB;AAAmBM,YAAAA,KAAK,EAAE;AAA1B;AAClBP,UAAAA,EAAE,CAACQ,GAAH,CAAOlB,GAAP,EAAYiB,KAAZ;AACA,iBAAOP,EAAP;AACH,SAL0B,EAKxB,IAAIS,GAAJ,EALwB,EAKfb,MALe,EAAJ,CAAvB;AAOAc,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,cAA9B;AACH;AAEJ,KAvBF,CAAP;AAyBH,GA1BD;;AA4BA,WAASC,SAAT,CAAmBC,IAAnB,EAAyBxB,GAAzB,EAA8B;AAE1BwB,IAAAA,IAAI,CAACC,OAAL,CAAaC,OAAO,IAAI;AAEpB,UAAIC,WAAW,GAAGH,IAAI,CAACI,MAAL,CAAaC,EAAD,IAAQ;AAClC,eAAOA,EAAE,CAAC7B,GAAD,CAAF,IAAW0B,OAAO,CAAC1B,GAAD,CAAzB;AACH,OAFiB,EAEf8B,MAFH;AAIAV,MAAAA,OAAO,CAACC,GAAR,CAAYK,OAAO,CAAC1B,GAAD,CAAP,GAAe,IAAf,GAAsB2B,WAAlC;AACH,KAPD;AASAH,IAAAA,IAAI,GAAGA,IAAI,CAACI,MAAL,CAAY,CAACzB,IAAD,EAAOF,KAAP,EAAc8B,IAAd,KAAuBA,IAAI,CAACC,SAAL,CAAeC,CAAC,IAAIA,CAAC,CAACjC,GAAD,CAAD,KAAWG,IAAI,CAACH,GAAD,CAAf,IAAwBG,IAAI,CAACH,GAAD,CAAJ,IAAa,IAAzD,MAAmEC,KAAtG,CAAP;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AAEA,WAAOA,IAAP;AACH;;AAED,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ7B,WAAW,CAACF,QAAD,CAFnB,EAKQY,eAAe,CAACZ,QAAD,CALvB,CADJ;AAWH,CAzED;;AA4EA,eAAeD,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n\n    const _renderLogs = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => (\n                <div key={index}>\n                    <p>{key.replace('Logs', '')}</p>\n                    {group[key].map((item, i) => (\n\n                        <LogItem item={item} key={i}/>\n                    ))}\n\n                </div>\n            ));\n    };\n    const clearDuplicates = (group) => {\n        return Object\n            .values(group)\n            .map((key, index) => {\n                    if (key.direction === \"inbound\") {\n                        const inboundResult = [...key.reduce((mp, o) => {\n                            const key = JSON.stringify([o.direction, o.from]);\n                            if (!mp.has(key)) mp.set(key, {...o, count: 0});\n                            mp.get(key).count++;\n                            return mp;\n                        }, new Map).values()];\n\n                        console.log(\"inboundResult\", inboundResult);\n                    } else if (key.direction === \"outbound\") {\n                        const outboundResult = [...key.reduce((mp, o) => {\n                            const key = JSON.stringify([o.direction, o.from]);\n                            if (!mp.has(key)) mp.set(key, {...o, count: 0});\n                            mp.get(key).count++;\n                            return mp;\n                        }, new Map).values()];\n\n                        console.log(\"outboundResult\", outboundResult);\n                    }\n\n                }\n            )\n    }\n\n    function filterArr(data, key) {\n\n        data.forEach(element => {\n\n            let countedData = data.filter((el) => {\n                return el[key] == element[key]\n            }).length;\n\n            console.log(element[key] + \": \" + countedData);\n        });\n\n        data = data.filter((item, index, self) => self.findIndex(t => t[key] === item[key] && item[key] != null) === index)\n        console.log(data);\n\n        return data;\n    }\n\n    return (\n        <React.Fragment>\n            {\n                _renderLogs(cdrsData)\n            }\n            {\n                clearDuplicates(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}