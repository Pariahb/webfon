{"ast":null,"code":"import _defineProperty from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport $ from \"jquery\";\nimport \"./style.css\";\n\nconst ContactItem = props => {\n  const dispatch = useDispatch();\n  const connection = useSelector(state => state.connection);\n  const $iq = useSelector(state => state.$iq);\n  const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState({\n    from: '',\n    time: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        lastActivity = _useState2[0],\n        setLastActivity = _useState2[1];\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n\n  const onLastActivity = iq => {\n    debugger;\n    let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n\n    let lastActivityObj;\n    let errorType = $(iq).attr('type');\n    console.log(\"errorType\", errorType);\n    $(iq).find(\"query\").each(function () {\n      if (errorType === \"result\") {\n        let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n        lastActivityObj = {\n          from: from,\n          time: lastActivityTime\n        };\n        console.log(\"lastActivityObj\", lastActivityObj);\n        setLastActivity(_objectSpread({}, lastActivity, {\n          from: lastActivityObj.from,\n          time: lastActivityObj.time\n        }));\n      }\n\n      if (errorType === \"error\") {\n        let errorMessage = $(iq).find(\"text\").text();\n        console.log(\"errorMessage\", errorMessage);\n      }\n    });\n  }; // const getLastActivity = () => {\n  //\n  //\n  //     console.log(\"iq\", iq)\n  // };\n\n\n  useEffect(() => {\n    const iq = $iq({\n      type: \"get\",\n      from: connection.jid,\n      to: props.item.jid,\n      id: \"last1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:last\"\n    });\n    connection.sendIQ(iq, onLastActivity);\n  });\n\n  const millisToMinutesAndSeconds = millis => {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, lastActivity.time), React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(RosterStatusDetector, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","RosterStatusDetector","$","ContactItem","props","dispatch","connection","state","$iq","showMainPage","from","time","lastActivity","setLastActivity","handleRosterClick","contact","console","log","type","onLastActivity","iq","attr","lastActivityObj","errorType","find","each","lastActivityTime","errorMessage","text","jid","to","item","id","c","xmlns","sendIQ","millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport RosterStatusDetector from \"../roster-status-detector\";\nimport $ from \"jquery\";\nimport \"./style.css\";\n\nconst ContactItem = (props) => {\n    const dispatch = useDispatch();\n    const connection = useSelector(state => state.connection);\n    const $iq = useSelector(state => state.$iq);\n    const showMainPage = useSelector(state => state.showMainPage);\n    const [lastActivity, setLastActivity] = useState({from: '', time: ''})\n    const handleRosterClick = (contact) => {\n        console.log(contact);\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n    const onLastActivity = (iq) => {\n        debugger\n        let from = $(iq).attr(\"from\"); // the jabber_id of the contact\\+\n        let lastActivityObj;\n        let errorType = $(iq).attr('type');\n        console.log(\"errorType\", errorType);\n\n        $(iq).find(\"query\").each(function () {\n\n            if (errorType === \"result\") {\n                let lastActivityTime = $(iq).find(\"query\").attr('seconds');\n                lastActivityObj = {\n                    from: from,\n                    time: lastActivityTime\n                };\n                console.log(\"lastActivityObj\", lastActivityObj);\n                setLastActivity({...lastActivity, from: lastActivityObj.from, time: lastActivityObj.time});\n            }\n            if (errorType === \"error\") {\n                let errorMessage = $(iq).find(\"text\").text();\n                console.log(\"errorMessage\", errorMessage)\n            }\n\n        });\n\n\n    };\n    // const getLastActivity = () => {\n    //\n    //\n    //     console.log(\"iq\", iq)\n    // };\n\n    useEffect(() => {\n        const iq = $iq({\n            type: \"get\",\n            from: connection.jid,\n            to: props.item.jid,\n            id: \"last1\"\n        }).c(\"query\", {xmlns: \"jabber:iq:last\"});\n        connection.sendIQ(iq, onLastActivity);\n\n    });\n\n    const millisToMinutesAndSeconds = (millis) => {\n        let minutes = Math.floor(millis / 60000);\n        let seconds = ((millis % 60000) / 1000).toFixed(0);\n        return minutes;\n    };\n    return (\n        <React.Fragment>\n            {/*<button onClick={getLastActivity}>last activity</button>*/}\n            {/*<p>{lastActivity === 0 ? \"online\" : millisToMinutesAndSeconds(lastActivity.time) <= 30*/}\n            {/*    ? \"last seen recently\" : millisToMinutesAndSeconds(lastActivity.time) < 1440*/}\n            {/*        ? \"last seen within a day\" : \"last seen long time ago\"}</p>*/}\n            <p>{lastActivity.time}</p>\n            <div\n                onClick={() => handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n\n                    <RosterStatusDetector/>\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n    );\n\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}