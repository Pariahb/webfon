{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n  const cdrsData = useSelector(state => state.cdrsData);\n\n  const jalali = require('moment-jalaali');\n\n  const moment = require('persian-date');\n\n  const orgMoment = require('moment');\n\n  const selectedLogContact = useSelector(state => state.selectedLogContact);\n\n  const _renderLogs = group => {\n    console.log(\"cdrsData\", cdrsData);\n    return Object.keys(group).map((key, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, key.replace('Logs', '')), group[key].map((item, i) => React.createElement(LogItem, {\n      item: item,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }))));\n  };\n\n  const clearDuplicates = group => {\n    return Object.keys(group).map((key, index) => {\n      for (let i = 0; i < group[key].length; i++) {\n        let current = group[key][i];\n        console.log(\"current\", current);\n        const item = group[key].filter(i => i.direction === current.direction && i.to === current.to)[0];\n        console.log(\"item\", item); // if (group[key][i].direction === \"outbound\" && current.from === group[key][i].from) {\n        //     console.log(\"group[key][i]\", group[key][i]);\n        //     num++\n        //     console.log(\"count\", count);\n        //\n        // }\n      } // console.log(group[key])\n\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, _renderLogs(cdrsData), clearDuplicates(cdrsData));\n};\n\nexport default GroupedLog;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/grouped-log/index.js"],"names":["React","useEffect","useState","useSelector","LogItem","GroupedLog","cdrsData","state","jalali","require","moment","orgMoment","selectedLogContact","_renderLogs","group","console","log","Object","keys","map","key","index","replace","item","i","clearDuplicates","length","current","filter","direction","to"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACrB,QAAMC,QAAQ,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,QAAhB,CAA5B;;AACA,QAAME,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAAtB;;AACA,QAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAtB;;AACA,QAAME,SAAS,GAAGF,OAAO,CAAC,QAAD,CAAzB;;AACA,QAAMG,kBAAkB,GAAGT,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACK,kBAAhB,CAAtC;;AAEA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,QAAxB;AACA,WAAOW,MAAM,CACRC,IADE,CACGJ,KADH,EAEFK,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KACD;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,GAAG,CAACE,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAJ,CADJ,EAEKR,KAAK,CAACM,GAAD,CAAL,CAAWD,GAAX,CAAe,CAACI,IAAD,EAAOC,CAAP,KACZ,oBAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,GAAG,EAAEC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAFL,CAHD,CAAP;AAUH,GAZD;;AAaA,QAAMC,eAAe,GAAIX,KAAD,IAAW;AAC/B,WAAOG,MAAM,CACRC,IADE,CACGJ,KADH,EAEFK,GAFE,CAEE,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACb,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACM,GAAD,CAAL,CAAWM,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AACxC,YAAIG,OAAO,GAAGb,KAAK,CAACM,GAAD,CAAL,CAAWI,CAAX,CAAd;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,OAAvB;AAEA,cAAMJ,IAAI,GAAGT,KAAK,CAACM,GAAD,CAAL,CAAWQ,MAAX,CAAkBJ,CAAC,IAAIA,CAAC,CAACK,SAAF,KAAgBF,OAAO,CAACE,SAAxB,IAAqCL,CAAC,CAACM,EAAF,KAASH,OAAO,CAACG,EAA7E,EAAiF,CAAjF,CAAb;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBO,IAApB,EALwC,CAMxC;AACA;AACA;AACA;AACA;AACA;AACH,OAbY,CAcb;;AACH,KAjBF,CAAP;AAmBH,GApBD;;AAsBA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQV,WAAW,CAACP,QAAD,CAFnB,EAKQmB,eAAe,CAACnB,QAAD,CALvB,CADJ;AAWH,CArDD;;AAwDA,eAAeD,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector} from \"react-redux\";\nimport LogItem from \"../log-item\";\n\nconst GroupedLog = () => {\n    const cdrsData = useSelector(state => state.cdrsData);\n    const jalali = require('moment-jalaali');\n    const moment = require('persian-date');\n    const orgMoment = require('moment');\n    const selectedLogContact = useSelector(state => state.selectedLogContact);\n\n    const _renderLogs = (group) => {\n        console.log(\"cdrsData\", cdrsData)\n        return Object\n            .keys(group)\n            .map((key, index) => (\n                <div key={index}>\n                    <p>{key.replace('Logs', '')}</p>\n                    {group[key].map((item, i) => (\n                        <LogItem item={item} key={i}/>\n                    ))}\n                </div>\n            ));\n    };\n    const clearDuplicates = (group) => {\n        return Object\n            .keys(group)\n            .map((key, index) => {\n                    for (let i = 0; i < group[key].length; i++) {\n                        let current = group[key][i];\n                        console.log(\"current\", current)\n\n                        const item = group[key].filter(i => i.direction === current.direction && i.to === current.to)[0]\n                        console.log(\"item\", item)\n                        // if (group[key][i].direction === \"outbound\" && current.from === group[key][i].from) {\n                        //     console.log(\"group[key][i]\", group[key][i]);\n                        //     num++\n                        //     console.log(\"count\", count);\n                        //\n                        // }\n                    }\n                    // console.log(group[key])\n                }\n            )\n    }\n\n    return (\n        <React.Fragment>\n            {\n                _renderLogs(cdrsData)\n            }\n            {\n                clearDuplicates(cdrsData)\n            }\n        </React.Fragment>\n    );\n\n};\n\n\nexport default GroupedLog;\n"]},"metadata":{},"sourceType":"module"}