{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar JsSIP_C = require('../Constants');\n\nvar Grammar = require('../Grammar');\n\nvar Utils = require('../Utils');\n\nvar debug = require('debug')('JsSIP:RTCSession:ReferSubscriber');\n\nmodule.exports =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(ReferSubscriber, _EventEmitter);\n\n  function ReferSubscriber(session) {\n    var _this;\n\n    _classCallCheck(this, ReferSubscriber);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReferSubscriber).call(this));\n    _this._id = null;\n    _this._session = session;\n    return _this;\n  }\n\n  _createClass(ReferSubscriber, [{\n    key: \"sendRefer\",\n    value: function sendRefer(target) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      debug('sendRefer()');\n      var extraHeaders = Utils.cloneArray(options.extraHeaders);\n      var eventHandlers = options.eventHandlers || {}; // Set event handlers.\n\n      for (var event in eventHandlers) {\n        if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {\n          this.on(event, eventHandlers[event]);\n        }\n      } // Replaces URI header field.\n\n\n      var replaces = null;\n\n      if (options.replaces) {\n        replaces = options.replaces._request.call_id;\n        replaces += \";to-tag=\".concat(options.replaces._to_tag);\n        replaces += \";from-tag=\".concat(options.replaces._from_tag);\n        replaces = encodeURIComponent(replaces);\n      } // Refer-To header field.\n\n\n      var referTo = \"Refer-To: <\".concat(target).concat(replaces ? \"?Replaces=\".concat(replaces) : '', \">\");\n      extraHeaders.push(referTo); // Referred-By header field.\n\n      var referredBy = \"Referred-By: <\".concat(this._session._ua._configuration.uri._scheme, \":\").concat(this._session._ua._configuration.uri._user, \"@\").concat(this._session._ua._configuration.uri._host, \">\");\n      extraHeaders.push(referredBy);\n      extraHeaders.push(\"Contact: \".concat(this._session.contact));\n\n      var request = this._session.sendRequest(JsSIP_C.REFER, {\n        extraHeaders: extraHeaders,\n        eventHandlers: {\n          onSuccessResponse: function onSuccessResponse(response) {\n            _this2._requestSucceeded(response);\n          },\n          onErrorResponse: function onErrorResponse(response) {\n            _this2._requestFailed(response, JsSIP_C.causes.REJECTED);\n          },\n          onTransportError: function onTransportError() {\n            _this2._requestFailed(null, JsSIP_C.causes.CONNECTION_ERROR);\n          },\n          onRequestTimeout: function onRequestTimeout() {\n            _this2._requestFailed(null, JsSIP_C.causes.REQUEST_TIMEOUT);\n          },\n          onDialogError: function onDialogError() {\n            _this2._requestFailed(null, JsSIP_C.causes.DIALOG_ERROR);\n          }\n        }\n      });\n\n      this._id = request.cseq;\n    }\n  }, {\n    key: \"receiveNotify\",\n    value: function receiveNotify(request) {\n      debug('receiveNotify()');\n\n      if (!request.body) {\n        return;\n      }\n\n      var status_line = Grammar.parse(request.body.trim(), 'Status_Line');\n\n      if (status_line === -1) {\n        debug(\"receiveNotify() | error parsing NOTIFY body: \\\"\".concat(request.body, \"\\\"\"));\n        return;\n      }\n\n      switch (true) {\n        case /^100$/.test(status_line.status_code):\n          this.emit('trying', {\n            request: request,\n            status_line: status_line\n          });\n          break;\n\n        case /^1[0-9]{2}$/.test(status_line.status_code):\n          this.emit('progress', {\n            request: request,\n            status_line: status_line\n          });\n          break;\n\n        case /^2[0-9]{2}$/.test(status_line.status_code):\n          this.emit('accepted', {\n            request: request,\n            status_line: status_line\n          });\n          break;\n\n        default:\n          this.emit('failed', {\n            request: request,\n            status_line: status_line\n          });\n          break;\n      }\n    }\n  }, {\n    key: \"_requestSucceeded\",\n    value: function _requestSucceeded(response) {\n      debug('REFER succeeded');\n      debug('emit \"requestSucceeded\"');\n      this.emit('requestSucceeded', {\n        response: response\n      });\n    }\n  }, {\n    key: \"_requestFailed\",\n    value: function _requestFailed(response, cause) {\n      debug('REFER failed');\n      debug('emit \"requestFailed\"');\n      this.emit('requestFailed', {\n        response: response || null,\n        cause: cause\n      });\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }]);\n\n  return ReferSubscriber;\n}(EventEmitter);","map":null,"metadata":{},"sourceType":"script"}