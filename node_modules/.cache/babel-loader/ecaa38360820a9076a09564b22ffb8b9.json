{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-input/index.js\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst ChatInput = props => {\n  const dispatch = useDispatch();\n  const $msg = useSelector(state => state.$msg);\n  const selectedContact = useSelector(state => state.selectedContact);\n  const connection = useSelector(state => state.connection);\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSubmit(event);\n    }\n  };\n\n  const handleSubmit = () => {\n    let txtJID = selectedContact,\n        txtMsg = props.messageText.txt,\n        message,\n        sents = [];\n    if (txtMsg === undefined || txtMsg === \"\") alert(\"Empty Message, please type something\");else {\n      let reply = $msg({\n        to: txtJID,\n        from: connection.jid,\n        type: \"chat\",\n        id: \"message-1\"\n      }).c(\"body\").t(txtMsg);\n      connection.send(reply.tree());\n      message = {\n        to: txtJID,\n        message: txtMsg,\n        time: new Date(),\n        type: \"sent\"\n      };\n      let newMsg = {\n        text: txtMsg,\n        stamp: new Date(),\n        type: \"sent\"\n      };\n      const text = message.message;\n      dispatch({\n        newMessage: text,\n        type: 'GET_NEW_MESSAGE'\n      });\n      dispatch({\n        newMessages: newMsg,\n        type: 'PUSH_HISTORY_MESSAGES'\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"msg-here\",\n    className: \"form-control\",\n    placeholder: \"Message here...\",\n    rows: \"4\",\n    value: props.messageText.txt,\n    onChange: props.onInputChange,\n    onKeyDown: handleKeyDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    value: \"send\",\n    className: \"primary\",\n    id: \"sendButton\",\n    onClick: handleSubmit,\n    onKeyDown: handleKeyDown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"send\")));\n};\n\nexport default ChatInput;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat-input/index.js"],"names":["React","useDispatch","useSelector","ChatInput","props","dispatch","$msg","state","selectedContact","connection","handleKeyDown","event","key","handleSubmit","txtJID","txtMsg","messageText","txt","message","sents","undefined","alert","reply","to","from","jid","type","id","c","t","send","tree","time","Date","newMsg","text","stamp","newMessage","newMessages","onInputChange"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst ChatInput = (props) => {\n    const dispatch = useDispatch();\n    const $msg = useSelector(state => state.$msg);\n    const selectedContact = useSelector(state => state.selectedContact);\n    const connection = useSelector(state => state.connection);\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleSubmit(event);\n        }\n    };\n    const handleSubmit = () => {\n\n        let txtJID = selectedContact,\n            txtMsg = props.messageText.txt,\n            message,\n            sents = [];\n\n        if (txtMsg === undefined || txtMsg === \"\")\n            alert(\"Empty Message, please type something\");\n        else {\n            let reply = $msg({\n                to: txtJID,\n                from: connection.jid,\n                type: \"chat\",\n                id: \"message-1\"\n            })\n                .c(\"body\")\n                .t(txtMsg);\n            connection.send(reply.tree());\n\n            message = {\n                to: txtJID,\n                message: txtMsg,\n                time: new Date(),\n                type: \"sent\"\n            };\n            let newMsg = {\n                text: txtMsg,\n                stamp: new Date(),\n                type: \"sent\"\n            };\n\n            const text = message.message;\n            dispatch({newMessage: text, type: 'GET_NEW_MESSAGE'})\n            dispatch({newMessages: newMsg, type: 'PUSH_HISTORY_MESSAGES'});\n        }\n\n    };\n\n    return (\n        <React.Fragment>\n            <form>\n                <input\n                    type=\"text\"\n                    id=\"msg-here\"\n                    className=\"form-control\"\n                    placeholder=\"Message here...\"\n                    rows=\"4\"\n                    value={props.messageText.txt}\n                    onChange={props.onInputChange}\n                    onKeyDown={handleKeyDown}\n\n                />\n\n                <button\n                    type=\"button\"\n                    value=\"send\"\n                    className=\"primary\"\n                    id=\"sendButton\"\n                    onClick={handleSubmit}\n                    onKeyDown={handleKeyDown}\n\n                >send\n                </button>\n            </form>\n        </React.Fragment>\n    )\n};\n\nexport default ChatInput;\n"]},"metadata":{},"sourceType":"module"}