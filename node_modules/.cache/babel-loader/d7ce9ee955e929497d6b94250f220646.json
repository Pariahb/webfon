{"ast":null,"code":"import React from\"react\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faPhone,faSpinner}from\"@fortawesome/free-solid-svg-icons\";import\"./style.css\";var MakeCall=function MakeCall(){var JsSIP=require('jssip');var register=function register(){console.log('Registering to SIP');console.log('JsSIP',JsSIP);JsSIP.debug.disable('JsSIP:*');// const address = GLOBAL.jssip_server + ':' + GLOBAL.jssip_port\nvar socket=new JsSIP.WebSocketInterface('ws://77.104.116.187:5064');console.log(\"socket\",socket);var configuration={sockets:[socket],uri:'sip:704@admin',authorization_user:'704',password:'704704',connection_recovery_min_interval:3,register:true,display_name:\"paria\",realm:\"admin\"};var ua=new JsSIP.UA(configuration);ua.start();// cb(ua)\nsocket.onconnect(function(){console.log(\"socket connected\");});socket.ondisconnect(function(){console.log(\"socket connected\");});ua.on(\"registered\",function(e){console.log(\"registered\");console.log(\"err\",JsSIP.REASON_PHRASE);});ua.on(\"unregistered\",function(e){console.log(\"registered\");console.log(\"err\",JsSIP.REASON_PHRASE);});ua.on('registrationFailed',function(e){alert(\"registrationFailed\");console.log(\"err\",JsSIP.REASON_PHRASE);});/*------WebSocket connection events-----*/ua.on('connected',function(e){console.log(\"connect\");ua.call('sip:712@admin',options);});ua.on('connecting',function(e){console.log(\"connecting\");console.log(\"err\",JsSIP.REASON_PHRASE);});ua.on('disconnected',function(e){console.log(\"disconnected\");console.log(\"err\",JsSIP.REASON_PHRASE);});/*------WebSocket connection events-----*/ // Register callbacks to desired call events\nvar eventHandlers={'progress':function progress(e){console.log('call is in progress');},'failed':function failed(e){console.log('call failed with cause: '+e.data.cause);},'ended':function ended(e){console.log('call ended with cause: '+e.data.cause);},'confirmed':function confirmed(e){console.log('call confirmed');}};var options={'eventHandlers':eventHandlers,'mediaConstraints':{'audio':true,'video':true}};};// const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7000/');\n// let configuration = {\n//     'uri': 'sip:704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n//     'password': '704704', // FILL PASSWORD HERE,\n//     'sockets': [socket]\n// };\n// const ua = new JsSIP.UA(configuration);\n//\n// const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n// incomingCallAudio.loop = true;\n// const remoteAudio = new window.Audio();\n// remoteAudio.autoplay = true;\n//\n// const callOptions = {\n//     mediaConstraints: {audio: true, video: false}\n// };\n// console.log('ua', ua);\n// // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n// console.log(ua._status)\n/*------New incoming or outgoing call event-----*/ // ua.on('newRTCSession', function (e) {\n//     console.log(\"newRTCSession\")\n//\n// });\n/*------New incoming or outgoing call event-----*/ /*------SIP registration events-----*/ /*--------SIP registration events-----------*/ // ua.start();\n// JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n// Register callbacks to desired call events\n//     const eventHandlers = {\n//         'progress': function (e) {\n//             console.log('call is in progress');\n//         },\n//         'failed': function (e) {\n//             console.log('call failed with cause: ' + e.data.cause);\n//         },\n//         'ended': function (e) {\n//             console.log('call ended with cause: ' + e.data.cause);\n//         },\n//         'confirmed': function (e) {\n//             console.log('call confirmed');\n//         }\n//     };\n//\n//     let options = {\n//         'eventHandlers': eventHandlers,\n//         'mediaConstraints': {'audio': true, 'video': true}\n//     };\n//\n//     const session = ua.call('712@admin', options);\n//     console.log(\"sip\", ua.status);\n// const onSipConnect = () => {\n//     JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n//     ua.on('registrationFailed', function (ev) {\n//         alert('Registering on SIP server failed with error: ' + ev.cause);\n//         configuration.uri = null;\n//         configuration.password = null;\n//     });\n//     ua.on('newRTCSession', function (ev) {\n//         let newSession = ev.session;\n//         console.log(\"newSession\",newSession)\n//         if (session) { // hangup any existing call\n//             session.terminate();\n//         }\n//         let session = newSession;\n//         let completeSession = function () {\n//             session = null;\n//\n//         };\n//         session.on('ended', completeSession);\n//         session.on('failed', completeSession);\n//         // session.on('accepted',updateUI);\n//         session.on('confirmed', function () {\n//             var localStream = session.connection.getLocalStreams()[0];\n//             var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n//             session.sendDTMF = function (tone) {\n//                 dtmfSender.insertDTMF(tone);\n//             };\n//         });\n//         session.on('addstream', function (e) {\n//             // incomingCallAudio.pause();\n//             remoteAudio.src = window.URL.createObjectURL(e.stream);\n//         });\n//         if (session.direction === 'incoming') {\n//             // incomingCallAudio.play();\n//         }\n//         // updateUI();\n//     });\n//     ua.start();\n// };\nreturn React.createElement(React.Fragment,null,React.createElement(\"div\",{id:\"callControl\"},React.createElement(\"div\",{id:\"to\"},React.createElement(\"input\",{id:\"toField\",type:\"text\",placeholder:\"Enter number here\"})),React.createElement(\"button\",{onClick:register,id:\"connectCall\"},React.createElement(FontAwesomeIcon,{className:\"fap fa-phone\",icon:faPhone}))));};export default MakeCall;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js"],"names":["React","FontAwesomeIcon","faPhone","faSpinner","MakeCall","JsSIP","require","register","console","log","debug","disable","socket","WebSocketInterface","configuration","sockets","uri","authorization_user","password","connection_recovery_min_interval","display_name","realm","ua","UA","start","onconnect","ondisconnect","on","e","REASON_PHRASE","alert","call","options","eventHandlers","data","cause"],"mappings":"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gB,QAAS,IAAzB,CAFV,CAAd,CAKH,CAnFD,CAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDA3GmB,CA6GnB;AACA;AACA;AACA;AACA,kDAjHmB,CAoHnB,sCApHmB,CAsHnB,8CAtHmB,CAwHnB;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAEI,qBAAC,KAAD,CAAO,QAAP,MACI,2BAAK,EAAE,CAAC,aAAR,EACI,2BAAK,EAAE,CAAC,IAAR,EACI,6BAAO,EAAE,CAAC,SAAV,CAAoB,IAAI,CAAC,MAAzB,CAAgC,WAAW,CAAC,mBAA5C,EADJ,CADJ,CAII,8BAAQ,OAAO,CAAE1B,QAAjB,CAA2B,EAAE,CAAC,aAA9B,EACI,oBAAC,eAAD,EAAiB,SAAS,CAAC,cAA3B,CACiB,IAAI,CAAEL,OADvB,EADJ,CAJJ,CADJ,CAFJ,CAeH,CAzMD,CA2MA,cAAeE,CAAAA,QAAf","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPhone, faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./style.css\"\n\nconst MakeCall = () => {\n    let JsSIP = require('jssip');\n\n    const register = () => {\n        console.log('Registering to SIP');\n        console.log('JsSIP',JsSIP);\n        JsSIP.debug.disable('JsSIP:*');\n        // const address = GLOBAL.jssip_server + ':' + GLOBAL.jssip_port\n        let socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:5064');\n        console.log(\"socket\",socket)\n        const configuration = {\n            sockets: [socket],\n            uri: 'sip:704@admin',\n            authorization_user: '704',\n            password: '704704',\n            connection_recovery_min_interval: 3,\n            register: true,\n            display_name: \"paria\",\n            realm: \"admin\"\n        };\n        let ua = new JsSIP.UA(configuration);\n        ua.start();\n        // cb(ua)\n        socket.onconnect(function (){\n            console.log(\"socket connected\");\n\n        });\n        socket.ondisconnect(function (){\n            console.log(\"socket connected\");\n\n        });\n        ua.on(\"registered\", function (e) {\n            console.log(\"registered\");\n            console.log(\"err\",JsSIP.REASON_PHRASE)\n\n        });\n        ua.on(\"unregistered\", function (e) {\n            console.log(\"registered\")\n            console.log(\"err\",JsSIP.REASON_PHRASE)\n        });\n        ua.on('registrationFailed', function (e) {\n            alert(\"registrationFailed\");\n            console.log(\"err\",JsSIP.REASON_PHRASE)\n\n        });\n\n        /*------WebSocket connection events-----*/\n\n        ua.on('connected', function (e) {\n            console.log(\"connect\")\n            ua.call('sip:712@admin', options);\n\n        });\n        ua.on('connecting', function (e) {\n            console.log(\"connecting\");\n            console.log(\"err\",JsSIP.REASON_PHRASE);\n\n        });\n        ua.on('disconnected', function (e) {\n            console.log(\"disconnected\");\n            console.log(\"err\",JsSIP.REASON_PHRASE);\n\n        });\n        /*------WebSocket connection events-----*/\n\n        // Register callbacks to desired call events\n        let eventHandlers = {\n            'progress': function (e) {\n                console.log('call is in progress');\n            },\n            'failed': function (e) {\n                console.log('call failed with cause: ' + e.data.cause);\n            },\n            'ended': function (e) {\n                console.log('call ended with cause: ' + e.data.cause);\n            },\n            'confirmed': function (e) {\n                console.log('call confirmed');\n            }\n        };\n\n        let options = {\n            'eventHandlers': eventHandlers,\n            'mediaConstraints': {'audio': true, 'video': true}\n        };\n\n    };\n\n    // const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7000/');\n    // let configuration = {\n    //     'uri': 'sip:704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n    //     'password': '704704', // FILL PASSWORD HERE,\n    //     'sockets': [socket]\n    // };\n    // const ua = new JsSIP.UA(configuration);\n    //\n    // const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n    // incomingCallAudio.loop = true;\n    // const remoteAudio = new window.Audio();\n    // remoteAudio.autoplay = true;\n    //\n    // const callOptions = {\n    //     mediaConstraints: {audio: true, video: false}\n    // };\n    // console.log('ua', ua);\n    // // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    // console.log(ua._status)\n    /*------New incoming or outgoing call event-----*/\n\n    // ua.on('newRTCSession', function (e) {\n    //     console.log(\"newRTCSession\")\n    //\n    // });\n    /*------New incoming or outgoing call event-----*/\n\n\n    /*------SIP registration events-----*/\n\n    /*--------SIP registration events-----------*/\n\n    // ua.start();\n    // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n// Register callbacks to desired call events\n//     const eventHandlers = {\n//         'progress': function (e) {\n//             console.log('call is in progress');\n//         },\n//         'failed': function (e) {\n//             console.log('call failed with cause: ' + e.data.cause);\n//         },\n//         'ended': function (e) {\n//             console.log('call ended with cause: ' + e.data.cause);\n//         },\n//         'confirmed': function (e) {\n//             console.log('call confirmed');\n//         }\n//     };\n//\n//     let options = {\n//         'eventHandlers': eventHandlers,\n//         'mediaConstraints': {'audio': true, 'video': true}\n//     };\n//\n//     const session = ua.call('712@admin', options);\n//     console.log(\"sip\", ua.status);\n\n    // const onSipConnect = () => {\n    //     JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    //     ua.on('registrationFailed', function (ev) {\n    //         alert('Registering on SIP server failed with error: ' + ev.cause);\n    //         configuration.uri = null;\n    //         configuration.password = null;\n    //     });\n    //     ua.on('newRTCSession', function (ev) {\n    //         let newSession = ev.session;\n    //         console.log(\"newSession\",newSession)\n    //         if (session) { // hangup any existing call\n    //             session.terminate();\n    //         }\n    //         let session = newSession;\n    //         let completeSession = function () {\n    //             session = null;\n    //\n    //         };\n    //         session.on('ended', completeSession);\n    //         session.on('failed', completeSession);\n    //         // session.on('accepted',updateUI);\n    //         session.on('confirmed', function () {\n    //             var localStream = session.connection.getLocalStreams()[0];\n    //             var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n    //             session.sendDTMF = function (tone) {\n    //                 dtmfSender.insertDTMF(tone);\n    //             };\n    //         });\n    //         session.on('addstream', function (e) {\n    //             // incomingCallAudio.pause();\n    //             remoteAudio.src = window.URL.createObjectURL(e.stream);\n    //         });\n    //         if (session.direction === 'incoming') {\n    //             // incomingCallAudio.play();\n    //         }\n    //         // updateUI();\n    //     });\n    //     ua.start();\n    // };\n    return (\n\n        <React.Fragment>\n            <div id=\"callControl\">\n                <div id=\"to\">\n                    <input id=\"toField\" type=\"text\" placeholder=\"Enter number here\"/>\n                </div>\n                <button onClick={register} id=\"connectCall\">\n                    <FontAwesomeIcon className=\"fap fa-phone\"\n                                     icon={faPhone}/>\n\n                </button>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default MakeCall;\n"]},"metadata":{},"sourceType":"module"}