{"ast":null,"code":"const URI = require('./URI');\n\nconst Grammar = require('./Grammar');\n\nmodule.exports = class NameAddrHeader {\n  /**\n   * Parse the given string and returns a NameAddrHeader instance or undefined if\n   * it is an invalid NameAddrHeader.\n   */\n  static parse(name_addr_header) {\n    name_addr_header = Grammar.parse(name_addr_header, 'Name_Addr_Header');\n\n    if (name_addr_header !== -1) {\n      return name_addr_header;\n    } else {\n      return undefined;\n    }\n  }\n\n  constructor(uri, display_name, parameters) {\n    // Checks.\n    if (!uri || !(uri instanceof URI)) {\n      throw new TypeError('missing or invalid \"uri\" parameter');\n    } // Initialize parameters.\n\n\n    this._uri = uri;\n    this._parameters = {};\n    this.display_name = display_name;\n\n    for (const param in parameters) {\n      if (Object.prototype.hasOwnProperty.call(parameters, param)) {\n        this.setParam(param, parameters[param]);\n      }\n    }\n  }\n\n  get uri() {\n    return this._uri;\n  }\n\n  get display_name() {\n    return this._display_name;\n  }\n\n  set display_name(value) {\n    this._display_name = value === 0 ? '0' : value;\n  }\n\n  setParam(key, value) {\n    if (key) {\n      this._parameters[key.toLowerCase()] = typeof value === 'undefined' || value === null ? null : value.toString();\n    }\n  }\n\n  getParam(key) {\n    if (key) {\n      return this._parameters[key.toLowerCase()];\n    }\n  }\n\n  hasParam(key) {\n    if (key) {\n      return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;\n    }\n  }\n\n  deleteParam(parameter) {\n    parameter = parameter.toLowerCase();\n\n    if (this._parameters.hasOwnProperty(parameter)) {\n      const value = this._parameters[parameter];\n      delete this._parameters[parameter];\n      return value;\n    }\n  }\n\n  clearParams() {\n    this._parameters = {};\n  }\n\n  clone() {\n    return new NameAddrHeader(this._uri.clone(), this._display_name, JSON.parse(JSON.stringify(this._parameters)));\n  }\n\n  _quote(str) {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n  }\n\n  toString() {\n    let body = this._display_name ? \"\\\"\".concat(this._quote(this._display_name), \"\\\" \") : '';\n    body += \"<\".concat(this._uri.toString(), \">\");\n\n    for (const parameter in this._parameters) {\n      if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {\n        body += \";\".concat(parameter);\n\n        if (this._parameters[parameter] !== null) {\n          body += \"=\".concat(this._parameters[parameter]);\n        }\n      }\n    }\n\n    return body;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}