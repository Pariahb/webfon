{"ast":null,"code":"const SIPMessage = require('./SIPMessage');\n\nconst JsSIP_C = require('./Constants');\n\nconst Transactions = require('./Transactions');\n\nconst Dialog_RequestSender = require('./Dialog/RequestSender');\n\nconst Utils = require('./Utils');\n\nconst debug = require('debug')('JsSIP:Dialog');\n\nconst C = {\n  // Dialog states.\n  STATUS_EARLY: 1,\n  STATUS_CONFIRMED: 2\n}; // RFC 3261 12.1.\n\nmodule.exports = class Dialog {\n  // Expose C object.\n  static get C() {\n    return C;\n  }\n\n  constructor(owner, message, type, state = C.STATUS_CONFIRMED) {\n    this._owner = owner;\n    this._ua = owner._ua;\n    this._uac_pending_reply = false;\n    this._uas_pending_reply = false;\n\n    if (!message.hasHeader('contact')) {\n      return {\n        error: 'unable to create a Dialog without Contact header field'\n      };\n    }\n\n    if (message instanceof SIPMessage.IncomingResponse) {\n      state = message.status_code < 200 ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n    }\n\n    const contact = message.parseHeader('contact'); // RFC 3261 12.1.1.\n\n    if (type === 'UAS') {\n      this._id = {\n        call_id: message.call_id,\n        local_tag: message.to_tag,\n        remote_tag: message.from_tag,\n\n        toString() {\n          return this.call_id + this.local_tag + this.remote_tag;\n        }\n\n      };\n      this._state = state;\n      this._remote_seqnum = message.cseq;\n      this._local_uri = message.parseHeader('to').uri;\n      this._remote_uri = message.parseHeader('from').uri;\n      this._remote_target = contact.uri;\n      this._route_set = message.getHeaders('record-route');\n      this._ack_seqnum = this._remote_seqnum;\n    } // RFC 3261 12.1.2.\n    else if (type === 'UAC') {\n        this._id = {\n          call_id: message.call_id,\n          local_tag: message.from_tag,\n          remote_tag: message.to_tag,\n\n          toString() {\n            return this.call_id + this.local_tag + this.remote_tag;\n          }\n\n        };\n        this._state = state;\n        this._local_seqnum = message.cseq;\n        this._local_uri = message.parseHeader('from').uri;\n        this._remote_uri = message.parseHeader('to').uri;\n        this._remote_target = contact.uri;\n        this._route_set = message.getHeaders('record-route').reverse();\n        this._ack_seqnum = null;\n      }\n\n    this._ua.newDialog(this);\n\n    debug(\"new \".concat(type, \" dialog created with status \").concat(this._state === C.STATUS_EARLY ? 'EARLY' : 'CONFIRMED'));\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get local_seqnum() {\n    return this._local_seqnum;\n  }\n\n  set local_seqnum(num) {\n    this._local_seqnum = num;\n  }\n\n  get owner() {\n    return this._owner;\n  }\n\n  get uac_pending_reply() {\n    return this._uac_pending_reply;\n  }\n\n  set uac_pending_reply(pending) {\n    this._uac_pending_reply = pending;\n  }\n\n  get uas_pending_reply() {\n    return this._uas_pending_reply;\n  }\n\n  update(message, type) {\n    this._state = C.STATUS_CONFIRMED;\n    debug(\"dialog \".concat(this._id.toString(), \"  changed to CONFIRMED state\"));\n\n    if (type === 'UAC') {\n      // RFC 3261 13.2.2.4.\n      this._route_set = message.getHeaders('record-route').reverse();\n    }\n  }\n\n  terminate() {\n    debug(\"dialog \".concat(this._id.toString(), \" deleted\"));\n\n    this._ua.destroyDialog(this);\n  }\n\n  sendRequest(method, options = {}) {\n    const extraHeaders = Utils.cloneArray(options.extraHeaders);\n    const eventHandlers = options.eventHandlers || {};\n    const body = options.body || null;\n\n    const request = this._createRequest(method, extraHeaders, body); // Increase the local CSeq on authentication.\n\n\n    eventHandlers.onAuthenticated = () => {\n      this._local_seqnum += 1;\n    };\n\n    const request_sender = new Dialog_RequestSender(this, request, eventHandlers);\n    request_sender.send(); // Return the instance of OutgoingRequest.\n\n    return request;\n  }\n\n  receiveRequest(request) {\n    // Check in-dialog request.\n    if (!this._checkInDialogRequest(request)) {\n      return;\n    } // ACK received. Cleanup this._ack_seqnum.\n\n\n    if (request.method === JsSIP_C.ACK && this._ack_seqnum !== null) {\n      this._ack_seqnum = null;\n    } // INVITE received. Set this._ack_seqnum.\n    else if (request.method === JsSIP_C.INVITE) {\n        this._ack_seqnum = request.cseq;\n      }\n\n    this._owner.receiveRequest(request);\n  } // RFC 3261 12.2.1.1.\n\n\n  _createRequest(method, extraHeaders, body) {\n    extraHeaders = Utils.cloneArray(extraHeaders);\n\n    if (!this._local_seqnum) {\n      this._local_seqnum = Math.floor(Math.random() * 10000);\n    }\n\n    const cseq = method === JsSIP_C.CANCEL || method === JsSIP_C.ACK ? this._local_seqnum : this._local_seqnum += 1;\n    const request = new SIPMessage.OutgoingRequest(method, this._remote_target, this._ua, {\n      'cseq': cseq,\n      'call_id': this._id.call_id,\n      'from_uri': this._local_uri,\n      'from_tag': this._id.local_tag,\n      'to_uri': this._remote_uri,\n      'to_tag': this._id.remote_tag,\n      'route_set': this._route_set\n    }, extraHeaders, body);\n    return request;\n  } // RFC 3261 12.2.2.\n\n\n  _checkInDialogRequest(request) {\n    if (!this._remote_seqnum) {\n      this._remote_seqnum = request.cseq;\n    } else if (request.cseq < this._remote_seqnum) {\n      if (request.method === JsSIP_C.ACK) {\n        // We are not expecting any ACK with lower seqnum than the current one.\n        // Or this is not the ACK we are waiting for.\n        if (this._ack_seqnum === null || request.cseq !== this._ack_seqnum) {\n          return false;\n        }\n      } else {\n        request.reply(500);\n        return false;\n      }\n    } else if (request.cseq > this._remote_seqnum) {\n      this._remote_seqnum = request.cseq;\n    } // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-.\n\n\n    if (request.method === JsSIP_C.INVITE || request.method === JsSIP_C.UPDATE && request.body) {\n      if (this._uac_pending_reply === true) {\n        request.reply(491);\n      } else if (this._uas_pending_reply === true) {\n        const retryAfter = (Math.random() * 10 | 0) + 1;\n        request.reply(500, null, [\"Retry-After:\".concat(retryAfter)]);\n        return false;\n      } else {\n        this._uas_pending_reply = true;\n\n        const stateChanged = () => {\n          if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED || request.server_transaction.state === Transactions.C.STATUS_COMPLETED || request.server_transaction.state === Transactions.C.STATUS_TERMINATED) {\n            request.server_transaction.removeListener('stateChanged', stateChanged);\n            this._uas_pending_reply = false;\n          }\n        };\n\n        request.server_transaction.on('stateChanged', stateChanged);\n      } // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted.\n\n\n      if (request.hasHeader('contact')) {\n        request.server_transaction.on('stateChanged', () => {\n          if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED) {\n            this._remote_target = request.parseHeader('contact').uri;\n          }\n        });\n      }\n    } else if (request.method === JsSIP_C.NOTIFY) {\n      // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted.\n      if (request.hasHeader('contact')) {\n        request.server_transaction.on('stateChanged', () => {\n          if (request.server_transaction.state === Transactions.C.STATUS_COMPLETED) {\n            this._remote_target = request.parseHeader('contact').uri;\n          }\n        });\n      }\n    }\n\n    return true;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}