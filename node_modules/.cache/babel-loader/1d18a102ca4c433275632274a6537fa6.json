{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = props => {\n  const rosterStatus = useSelector(state => state.rosterStatus);\n\n  const _useState = useState(rosterStatus),\n        _useState2 = _slicedToArray(_useState, 2),\n        rosterStatusColor = _useState2[0],\n        setRosterStatusColor = _useState2[1];\n\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  useEffect(() => {\n    setRosterStatusColor(rosterStatus);\n  }, [rosterStatus]);\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n\n  const onPresence = presence => {\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    $(presence).each;\n\n    if (from !== connection.jid || from.split(\"/\", 1)[0] === props.item.jid) {\n      if (!presence_type) {\n        changeRosterStatus(\"chat\");\n      }\n\n      if (presence_type !== \"error\") {\n        if (presence_type === \"unavailable\") {\n          // Mark contact as offline\n          changeRosterStatus(\"offline\");\n          console.log(from + \"contact as unavailable\");\n        } else {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (show === \"chat\") {\n            changeRosterStatus(\"chat\"); // Mark contact as online\n\n            console.log(from + \"contact as online\");\n          } else if (show === \"away\") {\n            // etc...\n            changeRosterStatus(\"away\");\n            console.log(from + \"contact as away\");\n          } else if (show === \"dnd\") {\n            // etc...\n            changeRosterStatus(\"dnd\");\n            console.log(from + \"contact as dnd\");\n          } else if (show === \"xa\") {\n            // etc...\n            changeRosterStatus(\"xa\");\n            console.log(from + \"contact as xa\");\n          }\n        }\n      }\n    } else {\n      console.log(connection.jid);\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [showMainPage]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    onClick: () => handleRosterClick(props.item.jid),\n    className: \"row item\",\n    id: props.item.jid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"avatar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    alt: \"avatar\",\n    src: avatarImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"right-side\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"extension\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"112\")), React.createElement(\"div\", {\n    className: \"contact-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, props.item.name)))));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","$","ContactItem","props","rosterStatus","state","rosterStatusColor","setRosterStatusColor","dispatch","showMainPage","connection","handleRosterClick","contact","console","log","type","onPresence","presence","presence_type","attr","from","each","jid","split","item","changeRosterStatus","show","find","text","addHandler","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = (props) => {\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const [rosterStatusColor, setRosterStatusColor] = useState(rosterStatus);\n    const dispatch = useDispatch();\n    const showMainPage = useSelector(state => state.showMainPage)\n    const connection = useSelector(state => state.connection)\n\n    useEffect(() => {\n        setRosterStatusColor(rosterStatus)\n    }, [rosterStatus]);\n\n    const handleRosterClick = (contact) => {\n        console.log(contact)\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n        $(presence).each\n        if (from !== connection.jid || from.split(\"/\", 1)[0] === props.item.jid) {\n            if (!presence_type) {\n                changeRosterStatus(\"chat\")\n            }\n            if (presence_type !== \"error\") {\n                if (presence_type === \"unavailable\") {\n                    // Mark contact as offline\n                    changeRosterStatus(\"offline\");\n\n                    console.log(from + \"contact as unavailable\");\n\n                } else {\n                    let show = $(presence)\n                        .find(\"show\")\n                        .text(); // this is what gives away, dnd, etc.\n                    if (show === \"chat\") {\n                        changeRosterStatus(\"chat\");\n                        // Mark contact as online\n                        console.log(from + \"contact as online\");\n\n                    } else if (show === \"away\") {\n                        // etc...\n                        changeRosterStatus(\"away\");\n                        console.log(from + \"contact as away\");\n\n                    } else if (show === \"dnd\") {\n                        // etc...\n                        changeRosterStatus(\"dnd\");\n                        console.log(from + \"contact as dnd\");\n\n                    } else if (show === \"xa\") {\n                        // etc...\n                        changeRosterStatus(\"xa\");\n                        console.log(from + \"contact as xa\");\n\n                    }\n                }\n            }\n        } else {\n            console.log(connection.jid)\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    }\n    /*---------------------------------*/\n    //change each roster status.\n    const changeRosterStatus = (rosterStatus) => {\n        dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n    }\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [showMainPage]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            <div\n                onClick={() => handleRosterClick(props.item.jid)}\n                className=\"row item\"\n                id={props.item.jid}\n            >\n                <div className=\"avatar\">\n                                <span\n                                    className={rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor}></span>\n                    <img alt=\"avatar\" src={avatarImage}/>\n                </div>\n                <div className=\"right-side\">\n                    <div className=\"extension\">\n                        <p>112</p>\n                    </div>\n\n                    <div className=\"contact-name\">\n                        <p>{props.item.name}</p>\n                    </div>\n                </div>\n            </div>\n\n        </React.Fragment>\n    );\n\n\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}