{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = () => {\n  const rosterStatus = useSelector(state => state.rosterStatus);\n\n  const _useState = useState(rosterStatus),\n        _useState2 = _slicedToArray(_useState, 2),\n        rosterStatusColor = _useState2[0],\n        setRosterStatusColor = _useState2[1];\n\n  const dispatch = useDispatch();\n  const showMainPage = useSelector(state => state.showMainPage);\n  const connection = useSelector(state => state.connection);\n  const contacts = useSelector(state => state.contacts);\n  const selectedContact = useSelector(state => state.selectedContact);\n  useEffect(() => {\n    setRosterStatusColor(rosterStatus);\n  }, [rosterStatus]);\n\n  const handleRosterClick = contact => {\n    console.log(contact);\n    dispatch({\n      contact,\n      type: \"SET_SELECTED_ROSTER\"\n    });\n  };\n  /*----------get contact presence-----------*/\n  //use presences from xmpp server\n\n\n  const onPresence = presence => {\n    console.log(\"onPresence\");\n    let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n\n    let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n\n    if (from !== connection.jid) {\n      if (!presence_type) {\n        changeRosterStatus(\"chat\");\n      }\n\n      if (presence_type !== \"error\") {\n        if (presence_type === \"unavailable\") {\n          // Mark contact as offline\n          changeRosterStatus(\"offline\");\n          console.log(from + \"contact as unavailable\");\n        } else {\n          let show = $(presence).find(\"show\").text(); // this is what gives away, dnd, etc.\n\n          if (show === \"chat\") {\n            changeRosterStatus(\"chat\"); // Mark contact as online\n\n            console.log(from + \"contact as online\");\n          } else if (show === \"away\") {\n            // etc...\n            changeRosterStatus(\"away\");\n            console.log(from + \"contact as away\");\n          } else if (show === \"dnd\") {\n            // etc...\n            changeRosterStatus(\"dnd\");\n            console.log(from + \"contact as dnd\");\n          } else if (show === \"xa\") {\n            // etc...\n            changeRosterStatus(\"xa\");\n            console.log(from + \"contact as xa\");\n          }\n        }\n      }\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*---------------------------------*/\n  //change each roster status.\n\n\n  const changeRosterStatus = rosterStatus => {\n    console.log(\"rosterStatus\", rosterStatus);\n    dispatch({\n      rosterStatus,\n      type: 'CHANGE_EACH_ROSTER_STATUS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  useEffect(() => {\n    connection.addHandler(onPresence, null, \"presence\", null, null, null);\n  }, [selectedContact]);\n  /*----------get contact presence-----------*/\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, contacts.map((item, i) => {\n    console.log(\"item\", item);\n    return React.createElement(\"div\", {\n      key: i,\n      onClick: () => handleRosterClick(item.jid),\n      className: \"row item\",\n      id: item.jid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      alt: \"avatar\",\n      src: avatarImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"right-side\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"extension\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"112\")), React.createElement(\"div\", {\n      className: \"contact-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, item.name))));\n  }));\n};\n\nexport default ContactItem;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/contact-item/index.js"],"names":["React","useEffect","useState","avatarImage","useDispatch","useSelector","$","ContactItem","rosterStatus","state","rosterStatusColor","setRosterStatusColor","dispatch","showMainPage","connection","contacts","selectedContact","handleRosterClick","contact","console","log","type","onPresence","presence","presence_type","attr","from","jid","changeRosterStatus","show","find","text","addHandler","map","item","i","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAO,aAAP;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,YAAY,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,YAAhB,CAAhC;;AADsB,oBAE4BN,QAAQ,CAACM,YAAD,CAFpC;AAAA;AAAA,QAEfE,iBAFe;AAAA,QAEIC,oBAFJ;;AAGtB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,YAAY,GAAGR,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACI,YAAhB,CAAhC;AACA,QAAMC,UAAU,GAAGT,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACK,UAAhB,CAA9B;AACA,QAAMC,QAAQ,GAAGV,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACM,QAAhB,CAA5B;AACA,QAAMC,eAAe,GAAGX,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACO,eAAhB,CAAnC;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,oBAAoB,CAACH,YAAD,CAApB;AACH,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;;AAIA,QAAMS,iBAAiB,GAAIC,OAAD,IAAa;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAN,IAAAA,QAAQ,CAAC;AAACM,MAAAA,OAAD;AAAUG,MAAAA,IAAI,EAAE;AAAhB,KAAD,CAAR;AACH,GAHD;AAIA;AACA;;;AACA,QAAMC,UAAU,GAAIC,QAAD,IAAc;AAC7BJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,QAAII,aAAa,GAAGlB,CAAC,CAACiB,QAAD,CAAD,CAAYE,IAAZ,CAAiB,MAAjB,CAApB,CAH6B,CAGiB;;AAC9C,QAAIC,IAAI,GAAGpB,CAAC,CAACiB,QAAD,CAAD,CAAYE,IAAZ,CAAiB,MAAjB,CAAX,CAJ6B,CAIQ;;AACrC,QAAIC,IAAI,KAAKZ,UAAU,CAACa,GAAxB,EAA6B;AACzB,UAAI,CAACH,aAAL,EAAoB;AAChBI,QAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACH;;AACD,UAAIJ,aAAa,KAAK,OAAtB,EAA+B;AAC3B,YAAIA,aAAa,KAAK,aAAtB,EAAqC;AACjC;AACAI,UAAAA,kBAAkB,CAAC,SAAD,CAAlB;AAEAT,UAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,GAAG,wBAAnB;AAEH,SAND,MAMO;AACH,cAAIG,IAAI,GAAGvB,CAAC,CAACiB,QAAD,CAAD,CACNO,IADM,CACD,MADC,EAENC,IAFM,EAAX,CADG,CAGU;;AACb,cAAIF,IAAI,KAAK,MAAb,EAAqB;AACjBD,YAAAA,kBAAkB,CAAC,MAAD,CAAlB,CADiB,CAEjB;;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,GAAG,mBAAnB;AAEH,WALD,MAKO,IAAIG,IAAI,KAAK,MAAb,EAAqB;AACxB;AACAD,YAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,GAAG,iBAAnB;AAEH,WALM,MAKA,IAAIG,IAAI,KAAK,KAAb,EAAoB;AACvB;AACAD,YAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,GAAG,gBAAnB;AAEH,WALM,MAKA,IAAIG,IAAI,KAAK,IAAb,EAAmB;AACtB;AACAD,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAT,YAAAA,OAAO,CAACC,GAAR,CAAYM,IAAI,GAAG,eAAnB;AAEH;AACJ;AACJ;AACJ;;AAED,WAAO,IAAP,CA7C6B,CA6ChB;AAChB,GA9CD;AA+CA;AACA;;;AACA,QAAME,kBAAkB,GAAIpB,YAAD,IAAkB;AACzCW,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BZ,YAA5B;AACAI,IAAAA,QAAQ,CAAC;AAACJ,MAAAA,YAAD;AAAea,MAAAA,IAAI,EAAE;AAArB,KAAD,CAAR;AACH,GAHD;AAIA;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,UAAU,CAACkB,UAAX,CACIV,UADJ,EAEI,IAFJ,EAGI,UAHJ,EAII,IAJJ,EAKI,IALJ,EAMI,IANJ;AAQH,GATQ,EASN,CAACN,eAAD,CATM,CAAT;AAUA;;AACA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQD,QAAQ,CAACkB,GAAT,CAAa,CAACC,IAAD,EAAOC,CAAP,KAAa;AACtBhB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBc,IAApB;AACA,WACI;AAAK,MAAA,GAAG,EAAEC,CAAV;AACK,MAAA,OAAO,EAAE,MAAMlB,iBAAiB,CAACiB,IAAI,CAACP,GAAN,CADrC;AAEK,MAAA,SAAS,EAAC,UAFf;AAGK,MAAA,EAAE,EAAEO,IAAI,CAACP,GAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,SAAS,EAAEjB,iBAAiB,KAAK,IAAtB,GAA6B,SAA7B,GAAyCA,iBADxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAK,MAAA,GAAG,EAAC,QAAT;AAAkB,MAAA,GAAG,EAAEP,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CALJ,EAUI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ,EAKI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI+B,IAAI,CAACE,IAAT,CADJ,CALJ,CAVJ,CADJ;AAuBH,GAzBD,CAFR,CADJ;AAkCH,CAtHD;;AAyHA,eAAe7B,WAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport avatarImage from \"../../images/avatar.jpg\";\nimport \"./style.css\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst ContactItem = () => {\n    const rosterStatus = useSelector(state => state.rosterStatus);\n    const [rosterStatusColor, setRosterStatusColor] = useState(rosterStatus);\n    const dispatch = useDispatch();\n    const showMainPage = useSelector(state => state.showMainPage)\n    const connection = useSelector(state => state.connection)\n    const contacts = useSelector(state => state.contacts)\n    const selectedContact = useSelector(state => state.selectedContact)\n\n    useEffect(() => {\n        setRosterStatusColor(rosterStatus)\n    }, [rosterStatus]);\n\n    const handleRosterClick = (contact) => {\n        console.log(contact)\n        dispatch({contact, type: \"SET_SELECTED_ROSTER\"});\n    };\n    /*----------get contact presence-----------*/\n    //use presences from xmpp server\n    const onPresence = (presence) => {\n        console.log(\"onPresence\");\n\n        let presence_type = $(presence).attr(\"type\"); // unavailable, subscribed, etc...\n        let from = $(presence).attr(\"from\"); // the jabber_id of the contact\n        if (from !== connection.jid) {\n            if (!presence_type) {\n                changeRosterStatus(\"chat\")\n            }\n            if (presence_type !== \"error\") {\n                if (presence_type === \"unavailable\") {\n                    // Mark contact as offline\n                    changeRosterStatus(\"offline\");\n\n                    console.log(from + \"contact as unavailable\");\n\n                } else {\n                    let show = $(presence)\n                        .find(\"show\")\n                        .text(); // this is what gives away, dnd, etc.\n                    if (show === \"chat\") {\n                        changeRosterStatus(\"chat\");\n                        // Mark contact as online\n                        console.log(from + \"contact as online\");\n\n                    } else if (show === \"away\") {\n                        // etc...\n                        changeRosterStatus(\"away\");\n                        console.log(from + \"contact as away\");\n\n                    } else if (show === \"dnd\") {\n                        // etc...\n                        changeRosterStatus(\"dnd\");\n                        console.log(from + \"contact as dnd\");\n\n                    } else if (show === \"xa\") {\n                        // etc...\n                        changeRosterStatus(\"xa\");\n                        console.log(from + \"contact as xa\");\n\n                    }\n                }\n            }\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*---------------------------------*/\n    //change each roster status.\n    const changeRosterStatus = (rosterStatus) => {\n        console.log(\"rosterStatus\", rosterStatus);\n        dispatch({rosterStatus, type: 'CHANGE_EACH_ROSTER_STATUS'})\n    };\n    /*---------------------------------*/\n    useEffect(() => {\n        connection.addHandler(\n            onPresence,\n            null,\n            \"presence\",\n            null,\n            null,\n            null\n        );\n    }, [selectedContact]);\n    /*----------get contact presence-----------*/\n    return (\n        <React.Fragment>\n            {\n                contacts.map((item, i) => {\n                    console.log(\"item\", item)\n                    return (\n                        <div key={i}\n                             onClick={() => handleRosterClick(item.jid)}\n                             className=\"row item\"\n                             id={item.jid}\n                        >\n                            <div className=\"avatar\">\n                                <span\n                                    className={rosterStatusColor === \"xa\" ? \"offline\" : rosterStatusColor}></span>\n                                <img alt=\"avatar\" src={avatarImage}/>\n                            </div>\n                            <div className=\"right-side\">\n                                <div className=\"extension\">\n                                    <p>112</p>\n                                </div>\n\n                                <div className=\"contact-name\">\n                                    <p>{item.name}</p>\n                                </div>\n                            </div>\n                        </div>\n\n                    )\n                })\n            }\n\n        </React.Fragment>\n\n    );\n};\n\n\nexport default ContactItem;\n"]},"metadata":{},"sourceType":"module"}