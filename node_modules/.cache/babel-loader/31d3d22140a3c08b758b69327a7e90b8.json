{"ast":null,"code":"/** File: strophe.pubsub.js\n *  A Strophe plugin for XMPP Publish-Subscribe.\n *\n *  Provides Strophe.Connection.pubsub object,\n *  parially implementing XEP 0060.\n *\n *  Strophe.Builder.prototype methods should probably move to strophe.js\n */\nimport { $build, $iq, Strophe } from 'strophe.js';\n/** Function: Strophe.Builder.form\n *  Add an options form child element.\n *\n *  Does not change the current element.\n *\n *  Parameters:\n *    (String) ns - form namespace.\n *    (Object) options - form properties.\n *\n *  Returns:\n *    The Strophe.Builder object.\n */\n\nStrophe.Builder.prototype.form = function (ns, options) {\n  var aX = this.node.appendChild(Strophe.xmlElement('x', {\n    \"xmlns\": \"jabber:x:data\",\n    \"type\": \"submit\"\n  }));\n  aX.appendChild(Strophe.xmlElement('field', {\n    \"var\": \"FORM_TYPE\",\n    \"type\": \"hidden\"\n  })).appendChild(Strophe.xmlElement('value')).appendChild(Strophe.xmlTextNode(ns));\n\n  for (var i in options) {\n    aX.appendChild(Strophe.xmlElement('field', {\n      \"var\": i\n    })).appendChild(Strophe.xmlElement('value')).appendChild(Strophe.xmlTextNode(options[i]));\n  }\n\n  return this;\n};\n/** Function: Strophe.Builder.list\n *  Add many child elements.\n *\n *  Does not change the current element.\n *\n *  Parameters:\n *    (String) tag - tag name for children.\n *    (Array) array - list of objects with format:\n *          { attrs: { [string]:[string], ... }, // attributes of each tag element\n *             data: [string | XML_element] }    // contents of each tag element\n *\n *  Returns:\n *    The Strophe.Builder object.\n */\n\n\nStrophe.Builder.prototype.list = function (tag, array) {\n  for (var i = 0; i < array.length; ++i) {\n    this.c(tag, array[i].attrs);\n    this.node.appendChild(array[i].data.cloneNode ? array[i].data.cloneNode(true) : Strophe.xmlTextNode(array[i].data));\n    this.up();\n  }\n\n  return this;\n};\n\nStrophe.Builder.prototype.children = function (object) {\n  var key, value;\n\n  for (key in object) {\n    if (!object.hasOwnProperty(key)) continue;\n    value = object[key];\n\n    if (Array.isArray(value)) {\n      this.list(key, value);\n    } else if (typeof value === 'string') {\n      this.c(key, {}, value);\n    } else if (typeof value === 'number') {\n      this.c(key, {}, \"\" + value);\n    } else if (typeof value === 'object') {\n      this.c(key).children(value).up();\n    } else {\n      this.c(key).up();\n    }\n  }\n\n  return this;\n}; // TODO Ideas Adding possible conf values?\n\n/* Extend Strophe.Connection to have member 'pubsub'.\n */\n\n\nStrophe.addConnectionPlugin('pubsub', {\n  /*\n  Extend connection object to have plugin name 'pubsub'.\n  */\n  _connection: null,\n  _autoService: true,\n  service: null,\n  jid: null,\n  handler: {},\n  //The plugin must have the init function.\n  init: function (conn) {\n    this._connection = conn;\n    /*\n    Function used to setup plugin.\n    */\n\n    /* extend name space\n    *  NS.PUBSUB - XMPP Publish Subscribe namespace\n    *              from XEP 60.\n    *\n    *  NS.PUBSUB_SUBSCRIBE_OPTIONS - XMPP pubsub\n    *                                options namespace from XEP 60.\n    */\n\n    Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n    Strophe.addNamespace('PUBSUB_SUBSCRIBE_OPTIONS', Strophe.NS.PUBSUB + \"#subscribe_options\");\n    Strophe.addNamespace('PUBSUB_ERRORS', Strophe.NS.PUBSUB + \"#errors\");\n    Strophe.addNamespace('PUBSUB_EVENT', Strophe.NS.PUBSUB + \"#event\");\n    Strophe.addNamespace('PUBSUB_OWNER', Strophe.NS.PUBSUB + \"#owner\");\n    Strophe.addNamespace('PUBSUB_AUTO_CREATE', Strophe.NS.PUBSUB + \"#auto-create\");\n    Strophe.addNamespace('PUBSUB_PUBLISH_OPTIONS', Strophe.NS.PUBSUB + \"#publish-options\");\n    Strophe.addNamespace('PUBSUB_NODE_CONFIG', Strophe.NS.PUBSUB + \"#node_config\");\n    Strophe.addNamespace('PUBSUB_CREATE_AND_CONFIGURE', Strophe.NS.PUBSUB + \"#create-and-configure\");\n    Strophe.addNamespace('PUBSUB_SUBSCRIBE_AUTHORIZATION', Strophe.NS.PUBSUB + \"#subscribe_authorization\");\n    Strophe.addNamespace('PUBSUB_GET_PENDING', Strophe.NS.PUBSUB + \"#get-pending\");\n    Strophe.addNamespace('PUBSUB_MANAGE_SUBSCRIPTIONS', Strophe.NS.PUBSUB + \"#manage-subscriptions\");\n    Strophe.addNamespace('PUBSUB_META_DATA', Strophe.NS.PUBSUB + \"#meta-data\");\n    Strophe.addNamespace('ATOM', \"http://www.w3.org/2005/Atom\");\n    if (conn.disco) conn.disco.addFeature(Strophe.NS.PUBSUB);\n  },\n  // Called by Strophe on connection event\n  statusChanged: function (status, condition) {\n    var that = this._connection;\n\n    if (this._autoService && status === Strophe.Status.CONNECTED) {\n      this.service = 'pubsub.' + Strophe.getDomainFromJid(that.jid);\n      this.jid = that.jid;\n    }\n  },\n\n  /***Function\n   Parameters:\n  (String) jid - The node owner's jid.\n  (String) service - The name of the pubsub service.\n  */\n  connect: function (jid, service) {\n    var that = this._connection;\n\n    if (service === undefined) {\n      service = jid;\n      jid = undefined;\n    }\n\n    this.jid = jid || that.jid;\n    this.service = service || null;\n    this._autoService = false;\n  },\n\n  /***Function\n    Parameters:\n   (String) node - The name of node\n   (String) handler - reference to registered strophe handler\n   */\n  storeHandler: function (node, handler) {\n    if (!this.handler[node]) {\n      this.handler[node] = [];\n    }\n\n    this.handler[node].push(handler);\n  },\n\n  /***Function\n    Parameters:\n   (String) node - The name of node\n   */\n  removeHandler: function (node) {\n    var toberemoved = this.handler[node];\n    this.handler[node] = []; // remove handler\n\n    if (toberemoved && toberemoved.length > 0) {\n      for (var i = 0, l = toberemoved.length; i < l; i++) {\n        this._connection.deleteHandler(toberemoved[i]);\n      }\n    }\n  },\n\n  /***Function\n   Create a pubsub node on the given service with the given node\n  name.\n   Parameters:\n  (String) node -  The name of the pubsub node.\n  (Dictionary) options -  The configuration options for the  node.\n  (Function) call_back - Used to determine if node\n  creation was sucessful.\n   Returns:\n  Iq id used to send subscription.\n  */\n  createNode: function (node, options, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubcreatenode\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('create', {\n      node: node\n    });\n\n    if (options) {\n      iq.up().c('configure').form(Strophe.NS.PUBSUB_NODE_CONFIG, options);\n    }\n\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /** Function: deleteNode\n   *  Delete a pubsub node.\n   *\n   *  Parameters:\n   *    (String) node -  The name of the pubsub node.\n   *    (Function) call_back - Called on server response.\n   *\n   *  Returns:\n   *    Iq id\n   */\n  deleteNode: function (node, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubdeletenode\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB_OWNER\n    }).c('delete', {\n      node: node\n    });\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /** Function\n   *\n   * Get all nodes that currently exist.\n   *\n   * Parameters:\n   *   (Function) success - Used to determine if node creation was sucessful.\n   *   (Function) error - Used to determine if node\n   * creation had errors.\n   */\n  discoverNodes: function (success, error, timeout) {\n    //ask for all nodes\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get'\n    }).c('query', {\n      xmlns: Strophe.NS.DISCO_ITEMS\n    });\n    return this._connection.sendIQ(iq.tree(), success, error, timeout);\n  },\n\n  /** Function: getConfig\n   *  Get node configuration form.\n   *\n   *  Parameters:\n   *    (String) node -  The name of the pubsub node.\n   *    (Function) call_back - Receives config form.\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getConfig: function (node, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubconfigurenode\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB_OWNER\n    }).c('configure', {\n      node: node\n    });\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /**\n   *  Parameters:\n   *    (Function) call_back - Receives subscriptions.\n   *\n   *  http://xmpp.org/extensions/tmp/xep-0060-1.13.html\n   *  8.3 Request Default Node Configuration Options\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getDefaultNodeConfig: function (call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubdefaultnodeconfig\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', {\n      'xmlns': Strophe.NS.PUBSUB_OWNER\n    }).c('default');\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /***Function\n      Subscribe to a node in order to receive event items.\n       Parameters:\n      (String) node         - The name of the pubsub node.\n      (Array) options       - The configuration options for the  node.\n      (Function) event_cb   - Used to recieve subscription events.\n      (Function) success    - callback function for successful node creation.\n      (Function) error      - error callback function.\n      (Boolean) barejid     - use barejid creation was sucessful.\n       Returns:\n      Iq id used to send subscription.\n  */\n  subscribe: function (node, options, event_cb, success, error, barejid) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"subscribenode\");\n    var jid = this.jid;\n    if (barejid) jid = Strophe.getBareJidFromJid(jid);\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('subscribe', {\n      'node': node,\n      'jid': jid\n    });\n\n    if (options) {\n      iq.up().c('options').form(Strophe.NS.PUBSUB_SUBSCRIBE_OPTIONS, options);\n    } //add the event handler to receive items\n\n\n    var hand = that.addHandler(event_cb, null, 'message', null, null, null);\n    this.storeHandler(node, hand);\n    that.sendIQ(iq.tree(), success, error);\n    return iqid;\n  },\n\n  /***Function\n      Unsubscribe from a node.\n       Parameters:\n      (String) node       - The name of the pubsub node.\n      (Function) success  - callback function for successful node creation.\n      (Function) error    - error callback function.\n   */\n  unsubscribe: function (node, jid, subid, success, error) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubunsubscribenode\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('unsubscribe', {\n      'node': node,\n      'jid': jid\n    });\n    if (subid) iq.attrs({\n      subid: subid\n    });\n    that.sendIQ(iq.tree(), success, error);\n    this.removeHandler(node);\n    return iqid;\n  },\n\n  /***Function\n   Publish and item to the given pubsub node.\n   Parameters:\n  (String) node -  The name of the pubsub node.\n  (Array) items -  The list of items to be published.\n  (Function) call_back - Used to determine if node\n  creation was sucessful.\n  */\n  publish: function (node, items, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubpublishnode\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('publish', {\n      node: node,\n      jid: this.jid\n    }).list('item', items);\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /*Function: items\n  Used to retrieve the persistent items from the pubsub node.\n   */\n  items: function (node, success, error, timeout) {\n    //ask for all items\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get'\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('items', {\n      node: node\n    });\n    return this._connection.sendIQ(iq.tree(), success, error, timeout);\n  },\n\n  /** Function: getSubscriptions\n   *  Get subscriptions of a JID.\n   *\n   *  Parameters:\n   *    (Function) call_back - Receives subscriptions.\n   *\n   *  http://xmpp.org/extensions/tmp/xep-0060-1.13.html\n   *  5.6 Retrieve Subscriptions\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getSubscriptions: function (call_back, timeout) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubsubscriptions\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', {\n      'xmlns': Strophe.NS.PUBSUB\n    }).c('subscriptions');\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /** Function: getNodeSubscriptions\n   *  Get node subscriptions of a JID.\n   *\n   *  Parameters:\n   *    (Function) call_back - Receives subscriptions.\n   *\n   *  http://xmpp.org/extensions/tmp/xep-0060-1.13.html\n   *  5.6 Retrieve Subscriptions\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getNodeSubscriptions: function (node, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubsubscriptions\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', {\n      'xmlns': Strophe.NS.PUBSUB_OWNER\n    }).c('subscriptions', {\n      'node': node\n    });\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /** Function: getSubOptions\n   *  Get subscription options form.\n   *\n   *  Parameters:\n   *    (String) node -  The name of the pubsub node.\n   *    (String) subid - The subscription id (optional).\n   *    (Function) call_back - Receives options form.\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getSubOptions: function (node, subid, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubsuboptions\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', {\n      xmlns: Strophe.NS.PUBSUB\n    }).c('options', {\n      node: node,\n      jid: this.jid\n    });\n    if (subid) iq.attrs({\n      subid: subid\n    });\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /**\n   *  Parameters:\n   *    (String) node -  The name of the pubsub node.\n   *    (Function) call_back - Receives subscriptions.\n   *\n   *  http://xmpp.org/extensions/tmp/xep-0060-1.13.html\n   *  8.9 Manage Affiliations - 8.9.1.1 Request\n   *\n   *  Returns:\n   *    Iq id\n   */\n  getAffiliations: function (node, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubaffiliations\");\n\n    if (typeof node === 'function') {\n      call_back = node;\n      node = undefined;\n    }\n\n    var attrs = {},\n        xmlns = {\n      'xmlns': Strophe.NS.PUBSUB\n    };\n\n    if (node) {\n      attrs.node = node;\n      xmlns = {\n        'xmlns': Strophe.NS.PUBSUB_OWNER\n      };\n    }\n\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'get',\n      id: iqid\n    }).c('pubsub', xmlns).c('affiliations', attrs);\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /**\n   *  Parameters:\n   *    (String) node -  The name of the pubsub node.\n   *    (Function) call_back - Receives subscriptions.\n   *\n   *  http://xmpp.org/extensions/tmp/xep-0060-1.13.html\n   *  8.9.2 Modify Affiliation - 8.9.2.1 Request\n   *\n   *  Returns:\n   *    Iq id\n   */\n  setAffiliation: function (node, jid, affiliation, call_back) {\n    var that = this._connection;\n    var iqid = that.getUniqueId(\"pubsubaffiliations\");\n    var iq = $iq({\n      from: this.jid,\n      to: this.service,\n      type: 'set',\n      id: iqid\n    }).c('pubsub', {\n      'xmlns': Strophe.NS.PUBSUB_OWNER\n    }).c('affiliations', {\n      'node': node\n    }).c('affiliation', {\n      'jid': jid,\n      'affiliation': affiliation\n    });\n    that.addHandler(call_back, null, 'iq', null, iqid, null);\n    that.send(iq.tree());\n    return iqid;\n  },\n\n  /** Function: publishAtom\n   */\n  publishAtom: function (node, atoms, call_back) {\n    if (!Array.isArray(atoms)) atoms = [atoms];\n    var i,\n        atom,\n        entries = [];\n\n    for (i = 0; i < atoms.length; i++) {\n      atom = atoms[i];\n      atom.updated = atom.updated || new Date().toISOString();\n      if (atom.published && atom.published.toISOString) atom.published = atom.published.toISOString();\n      entries.push({\n        data: $build(\"entry\", {\n          xmlns: Strophe.NS.ATOM\n        }).children(atom).tree(),\n        attrs: atom.id ? {\n          id: atom.id\n        } : {}\n      });\n    }\n\n    return this.publish(node, entries, call_back);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}