{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/login-page/index.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport $ from \"jquery\";\n\nconst LoginPage = () => {\n  const connection = useSelector(state => state.connection);\n  const historyMessages = useSelector(state => state.historyMessages);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        jidValue = _useState2[0],\n        setJidValue = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        passValue = _useState4[0],\n        setPassValue = _useState4[1];\n\n  const _useState5 = useState('connect'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loginButton = _useState6[0],\n        changeLoginButton = _useState6[1];\n\n  const dispatch = useDispatch(); //strophe connection process\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\");\n      setShowStatus(true);\n      getRoster();\n      sendPriority();\n      connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n      console.log(\"jid\", connection.jid); // connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\n\n      connection.send($iq({\n        from: connection.jid,\n        id: \"v1\",\n        type: \"get\"\n      }).c(\"vCard\", {\n        xmlns: \"vcard-temp\"\n      }));\n      connection.send($iq({\n        from: connection.jid,\n        id: \"enable1\",\n        type: \"set\"\n      }).c(\"enable\", {\n        xmlns: \"urn:xmpp:carbons:2\"\n      }));\n    }\n  };\n\n  const onReceiveMessage = msg => {\n    console.log(\"msg\", msg);\n    let from = msg.getAttribute(\"from\");\n    let type = msg.getAttribute(\"type\");\n    let elems = msg.getElementsByTagName(\"body\");\n    let recs;\n\n    if (type === \"error\") {\n      alert(\"An error occured! \");\n      return;\n    }\n\n    if (type === \"chat\") {\n      let message = {\n        from: from,\n        message: elems[0].innerHTML,\n        time: new Date(),\n        type: \"rec\"\n      };\n      let recMsg = {\n        text: message.message,\n        stamp: message.time.toString(),\n        type: \"rec\"\n      };\n      dispatch({\n        newMessage: recMsg,\n        type: 'PUSH_HISTORY_MESSAGES'\n      });\n    }\n\n    return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n  };\n  /*-----------------Get Contacts List (step1)----------------=*/\n  //send xml to get contacts from xmpp server\n\n\n  const getRoster = () => {\n    const newIq = $iq({\n      type: \"get\",\n      id: \"r1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:roster\"\n    });\n    connection.sendIQ(newIq, rosterReceived);\n  };\n  /*-----------------Get Contacts List (step1)----------------*/\n\n  /*-----------------Received contacts (step2)----------------*/\n  //how to use received rosters from xmpp server\n\n\n  const rosterReceived = iq => {\n    let contactJid,\n        rosterName,\n        myContacts = [];\n    $(iq).find(\"item\").each(function () {\n      contactJid = $(this).attr(\"jid\"); // The jabber_id of your contact\n\n      if ($(this).attr(\"name\")) {\n        rosterName = $(this).attr(\"name\");\n      } else {\n        rosterName = \"\";\n      } // The jabber_id of your contact\n      // You can probably put them in a unordered list and and use their jids as ids.\n\n\n      myContacts = myContacts.concat({\n        name: rosterName,\n        jid: contactJid\n      });\n    });\n    getContacts(myContacts);\n  };\n  /*-----------------/Received contacts (step2)----------------*/\n\n  /*-----------------Set priority ----------------*/\n  //set priority to specify the device\n\n\n  const sendPriority = () => {\n    connection.send($pres().c(\"priority\").t(\"10\").up().c(\"rap\", {\n      xmlns: \"urn:xmpp:rap:3\",\n      ns: \"urn:xmpp:jingle:apps:rtp:0\",\n      num: '5'\n    })); //send request for available features\n\n    connection.sendIQ($iq({\n      type: \"get\"\n    }).c(\"query\", {\n      xmlns: \"http://jabber.org/protocol/disco#info\"\n    }));\n  };\n  /*-----------------/Get priority ----------------*/\n\n  /*---------------------------------*/\n  //Show Or hide Main page.\n\n\n  const setShowStatus = showMainPage => {\n    dispatch({\n      showMainPage,\n      type: 'SHOW_MAIN_PAGE'\n    });\n  };\n  /*---------------------------------*/\n\n  /*---------------------------------*/\n  //set received contacts from xmpp server to global state\n\n\n  const getContacts = contacts => {\n    dispatch({\n      contacts,\n      type: 'GET_CONTACTS'\n    });\n  };\n  /*---------------------------------*/\n\n\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSubmit(event);\n    }\n  };\n  /*-----------------------------------*/\n  //action for login form\n\n\n  const handleChangeJID = event => {\n    setJidValue(event.target.value);\n  };\n\n  const handleChangePass = event => {\n    // console.log(\"passValue\", event.target.value)\n    setPassValue(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (jidValue === undefined || jidValue === \"\") {\n      alert(\"Blank JID\");\n    } else if (passValue === undefined || passValue === \"\") alert(\"Empty pass, please type password\");else {\n      if (loginButton === \"connect\") {\n        changeLoginButton(\"disconnect\");\n        connection.connect(jidValue, passValue, onConnect);\n      } else {\n        connection.disconnect();\n        changeLoginButton(\"connect\");\n      }\n    }\n  };\n  /*-----------------------------------*/\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    label: \"JID\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"text\",\n    placeholder: \"enter your JID...\",\n    onChange: handleChangeJID,\n    onKeyDown: handleKeyDown,\n    value: jidValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    label: \"Password\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"password\",\n    placeholder: \"enter your password...\",\n    onChange: handleChangePass,\n    onKeyDown: handleKeyDown,\n    value: passValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    id: \"connect\",\n    value: loginButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, loginButton)))));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/chat/login-page/index.js"],"names":["React","useState","useDispatch","useSelector","$","LoginPage","connection","state","historyMessages","$pres","$iq","strophe","jidValue","setJidValue","passValue","setPassValue","loginButton","changeLoginButton","dispatch","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","setShowStatus","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","getRoster","sendPriority","addHandler","onReceiveMessage","jid","send","from","id","type","c","xmlns","msg","getAttribute","elems","getElementsByTagName","recs","alert","message","innerHTML","time","Date","recMsg","text","stamp","toString","newMessage","newIq","sendIQ","rosterReceived","iq","contactJid","rosterName","myContacts","find","each","attr","concat","name","getContacts","t","up","ns","num","showMainPage","contacts","handleKeyDown","event","key","handleSubmit","handleChangeJID","target","value","handleChangePass","preventDefault","undefined","connect","disconnect"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,UAAU,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AACA,QAAME,eAAe,GAAGL,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,eAAhB,CAAnC;AAEA,QAAMC,KAAK,GAAGN,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACE,KAAhB,CAAzB;AACA,QAAMC,GAAG,GAAGP,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACG,GAAhB,CAAvB;AACA,QAAMC,OAAO,GAAGR,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACI,OAAhB,CAA3B;;AANoB,oBAOYV,QAAQ,CAAC,EAAD,CAPpB;AAAA;AAAA,QAObW,QAPa;AAAA,QAOHC,WAPG;;AAAA,qBAQcZ,QAAQ,CAAC,EAAD,CARtB;AAAA;AAAA,QAQba,SARa;AAAA,QAQFC,YARE;;AAAA,qBASqBd,QAAQ,CAAC,SAAD,CAT7B;AAAA;AAAA,QASbe,WATa;AAAA,QASAC,iBATA;;AAUpB,QAAMC,QAAQ,GAAGhB,WAAW,EAA5B,CAVoB,CAYpB;;AACA,QAAMiB,SAAS,GAAIC,MAAD,IAAY;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCX,OAAO,CAACY,MAA7C;;AACA,QAAIH,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeC,UAA9B,EAA0C;AACtCH,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAFD,MAEO,IAAIF,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeE,QAA9B,EAAwC;AAC3CJ,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeI,cAA9B,EAA8C;AACjDN,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,KAFM,MAEA,IAAIF,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeK,QAA9B,EAAwC;AAC3CP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeM,aAA9B,EAA6C;AAChDR,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,KAFM,MAEA,IAAIF,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeO,YAA9B,EAA4C;AAC/CT,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKT,OAAO,CAACY,MAAR,CAAeQ,SAA9B,EAAyC;AAC5CV,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAI,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,MAAAA,SAAS;AACTC,MAAAA,YAAY;AACZ3B,MAAAA,UAAU,CAAC4B,UAAX,CAAsBC,gBAAtB,EAAwC,IAAxC,EAA8C,SAA9C,EAAyD,IAAzD,EAA+D,IAA/D,EAAqE,IAArE;AAEAd,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBhB,UAAU,CAAC8B,GAA9B,EAP4C,CAQ5C;;AAEA9B,MAAAA,UAAU,CAAC+B,IAAX,CAAgB3B,GAAG,CAAC;AAAC4B,QAAAA,IAAI,EAAEhC,UAAU,CAAC8B,GAAlB;AAAuBG,QAAAA,EAAE,EAAE,IAA3B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAAD,CAAH,CAAmDC,CAAnD,CAAqD,OAArD,EAA8D;AAACC,QAAAA,KAAK,EAAE;AAAR,OAA9D,CAAhB;AACApC,MAAAA,UAAU,CAAC+B,IAAX,CAAgB3B,GAAG,CAAC;AAChB4B,QAAAA,IAAI,EAAEhC,UAAU,CAAC8B,GADD;AAEhBG,QAAAA,EAAE,EAAE,SAFY;AAGhBC,QAAAA,IAAI,EAAE;AAHU,OAAD,CAAH,CAIbC,CAJa,CAIX,QAJW,EAID;AAACC,QAAAA,KAAK,EAAE;AAAR,OAJC,CAAhB;AAMH;AACJ,GAnCD;;AAoCA,QAAMP,gBAAgB,GAAIQ,GAAD,IAAS;AAC9BtB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBqB,GAAnB;AACA,QAAIL,IAAI,GAAGK,GAAG,CAACC,YAAJ,CAAiB,MAAjB,CAAX;AACA,QAAIJ,IAAI,GAAGG,GAAG,CAACC,YAAJ,CAAiB,MAAjB,CAAX;AACA,QAAIC,KAAK,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAZ;AACA,QAAIC,IAAJ;;AACA,QAAIP,IAAI,KAAK,OAAb,EAAsB;AAClBQ,MAAAA,KAAK,CAAC,oBAAD,CAAL;AACA;AACH;;AACD,QAAIR,IAAI,KAAK,MAAb,EAAqB;AACjB,UAAIS,OAAO,GAAG;AACVX,QAAAA,IAAI,EAAEA,IADI;AAEVW,QAAAA,OAAO,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASK,SAFR;AAGVC,QAAAA,IAAI,EAAE,IAAIC,IAAJ,EAHI;AAIVZ,QAAAA,IAAI,EAAE;AAJI,OAAd;AAMA,UAAIa,MAAM,GAAG;AACTC,QAAAA,IAAI,EAAEL,OAAO,CAACA,OADL;AAETM,QAAAA,KAAK,EAAEN,OAAO,CAACE,IAAR,CAAaK,QAAb,EAFE;AAGThB,QAAAA,IAAI,EAAE;AAHG,OAAb;AAKAtB,MAAAA,QAAQ,CAAC;AAACuC,QAAAA,UAAU,EAAEJ,MAAb;AAAqBb,QAAAA,IAAI,EAAE;AAA3B,OAAD,CAAR;AAEH;;AAED,WAAO,IAAP,CA1B8B,CA0BjB;AAChB,GA3BD;AA4BA;AACA;;;AACA,QAAMR,SAAS,GAAG,MAAM;AACpB,UAAM0B,KAAK,GAAGhD,GAAG,CAAC;AAAC8B,MAAAA,IAAI,EAAE,KAAP;AAAcD,MAAAA,EAAE,EAAE;AAAlB,KAAD,CAAH,CACTE,CADS,CACP,OADO,EACE;AAACC,MAAAA,KAAK,EAAE;AAAR,KADF,CAAd;AAEApC,IAAAA,UAAU,CAACqD,MAAX,CAAkBD,KAAlB,EAAyBE,cAAzB;AACH,GAJD;AAKA;;AAEA;AACA;;;AACA,QAAMA,cAAc,GAAIC,EAAD,IAAQ;AAC3B,QAAIC,UAAJ;AAAA,QACIC,UADJ;AAAA,QAEIC,UAAU,GAAG,EAFjB;AAGA5D,IAAAA,CAAC,CAACyD,EAAD,CAAD,CACKI,IADL,CACU,MADV,EAEKC,IAFL,CAEU,YAAY;AACdJ,MAAAA,UAAU,GAAG1D,CAAC,CAAC,IAAD,CAAD,CAAQ+D,IAAR,CAAa,KAAb,CAAb,CADc,CACoB;;AAClC,UAAI/D,CAAC,CAAC,IAAD,CAAD,CAAQ+D,IAAR,CAAa,MAAb,CAAJ,EAA0B;AACtBJ,QAAAA,UAAU,GAAG3D,CAAC,CAAC,IAAD,CAAD,CAAQ+D,IAAR,CAAa,MAAb,CAAb;AACH,OAFD,MAEO;AACHJ,QAAAA,UAAU,GAAG,EAAb;AACH,OANa,CAOd;AACA;;;AACAC,MAAAA,UAAU,GAAGA,UAAU,CAACI,MAAX,CAAkB;AAC3BC,QAAAA,IAAI,EAAEN,UADqB;AAE3B3B,QAAAA,GAAG,EAAE0B;AAFsB,OAAlB,CAAb;AAIH,KAfL;AAgBAQ,IAAAA,WAAW,CAACN,UAAD,CAAX;AACH,GArBD;AAuBA;;AAEA;AACA;;;AACA,QAAM/B,YAAY,GAAG,MAAM;AACvB3B,IAAAA,UAAU,CAAC+B,IAAX,CACI5B,KAAK,GACAgC,CADL,CACO,UADP,EAEK8B,CAFL,CAEO,IAFP,EAGKC,EAHL,GAIK/B,CAJL,CAIO,KAJP,EAIc;AAACC,MAAAA,KAAK,EAAE,gBAAR;AAA0B+B,MAAAA,EAAE,EAAE,4BAA9B;AAA4DC,MAAAA,GAAG,EAAE;AAAjE,KAJd,CADJ,EADuB,CAQvB;;AACApE,IAAAA,UAAU,CAACqD,MAAX,CAAkBjD,GAAG,CAAC;AAAC8B,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAH,CACbC,CADa,CACX,OADW,EACF;AAACC,MAAAA,KAAK,EAAE;AAAR,KADE,CAAlB;AAEH,GAXD;AAaA;;AACA;AACA;;;AACA,QAAMhB,aAAa,GAAIiD,YAAD,IAAkB;AACpCzD,IAAAA,QAAQ,CAAC;AAACyD,MAAAA,YAAD;AAAenC,MAAAA,IAAI,EAAE;AAArB,KAAD,CAAR;AACH,GAFD;AAGA;;AAGA;AACA;;;AACA,QAAM8B,WAAW,GAAIM,QAAD,IAAc;AAC9B1D,IAAAA,QAAQ,CAAC;AAAC0D,MAAAA,QAAD;AAAWpC,MAAAA,IAAI,EAAE;AAAjB,KAAD,CAAR;AACH,GAFD;AAGA;;;AAEA,QAAMqC,aAAa,GAAIC,KAAD,IAAW;AAC7B,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACvBC,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACH;AACJ,GAJD;AAKA;AACA;;;AACA,QAAMG,eAAe,GAAIH,KAAD,IAAW;AAC/BjE,IAAAA,WAAW,CAACiE,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAX;AAEH,GAHD;;AAIA,QAAMC,gBAAgB,GAAIN,KAAD,IAAW;AAChC;AACA/D,IAAAA,YAAY,CAAC+D,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAZ;AACH,GAHD;;AAIA,QAAMH,YAAY,GAAIF,KAAD,IAAW;AAE5BA,IAAAA,KAAK,CAACO,cAAN;;AACA,QAAIzE,QAAQ,KAAK0E,SAAb,IAA0B1E,QAAQ,KAAK,EAA3C,EAA+C;AAC3CoC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH,KAFD,MAEO,IAAIlC,SAAS,KAAKwE,SAAd,IAA2BxE,SAAS,KAAK,EAA7C,EACHkC,KAAK,CAAC,kCAAD,CAAL,CADG,KAEF;AACD,UAAIhC,WAAW,KAAK,SAApB,EAA+B;AAC3BC,QAAAA,iBAAiB,CAAC,YAAD,CAAjB;AACAX,QAAAA,UAAU,CAACiF,OAAX,CACI3E,QADJ,EAEIE,SAFJ,EAGIK,SAHJ;AAKH,OAPD,MAOO;AACHb,QAAAA,UAAU,CAACkF,UAAX;AACAvE,QAAAA,iBAAiB,CAAC,SAAD,CAAjB;AAEH;AACJ;AACJ,GArBD;AAsBA;;;AAEA,SAGI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,KAAK,EAAC,KADV;AAEI,IAAA,SAAS,EAAC,yBAFd;AAGI,IAAA,IAAI,EAAC,WAHT;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,WAAW,EAAC,mBALhB;AAMI,IAAA,QAAQ,EAAEgE,eANd;AAOI,IAAA,SAAS,EAAEJ,aAPf;AAQI,IAAA,KAAK,EAAEjE,QARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAWI;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,SAAS,EAAC,yBAFd;AAGI,IAAA,IAAI,EAAC,WAHT;AAII,IAAA,IAAI,EAAC,UAJT;AAKI,IAAA,WAAW,EAAC,wBALhB;AAMI,IAAA,QAAQ,EAAEwE,gBANd;AAOI,IAAA,SAAS,EAAEP,aAPf;AAQI,IAAA,KAAK,EAAE/D,SARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAsBI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,iBAFd;AAGI,IAAA,EAAE,EAAC,SAHP;AAII,IAAA,KAAK,EAAEE,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKEA,WALF,CAtBJ,CADJ,CADJ,CAFJ,CAHJ;AAwCH,CA/ND;;AAkOA,eAAeX,SAAf","sourcesContent":["import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport $ from \"jquery\";\n\nconst LoginPage = () => {\n    const connection = useSelector(state => state.connection);\n    const historyMessages = useSelector(state => state.historyMessages);\n\n    const $pres = useSelector(state => state.$pres);\n    const $iq = useSelector(state => state.$iq);\n    const strophe = useSelector(state => state.strophe);\n    const [jidValue, setJidValue] = useState('');\n    const [passValue, setPassValue] = useState('');\n    const [loginButton, changeLoginButton] = useState('connect');\n    const dispatch = useDispatch();\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            setShowStatus(true)\n            getRoster();\n            sendPriority();\n            connection.addHandler(onReceiveMessage, null, \"message\", null, null, null);\n\n            console.log(\"jid\", connection.jid)\n            // connection.send($iq({type : \"get\", from: connection.jid , id: \"profile1\"}).c(\"profile\",{xmlns: \"urn:xmpp:tmp:profile\"}))\n\n            connection.send($iq({from: connection.jid, id: \"v1\", type: \"get\"}).c(\"vCard\", {xmlns: \"vcard-temp\"}));\n            connection.send($iq({\n                from: connection.jid,\n                id: \"enable1\",\n                type: \"set\"\n            }).c(\"enable\", {xmlns: \"urn:xmpp:carbons:2\"}));\n\n        }\n    };\n    const onReceiveMessage = (msg) => {\n        console.log(\"msg\", msg)\n        let from = msg.getAttribute(\"from\");\n        let type = msg.getAttribute(\"type\");\n        let elems = msg.getElementsByTagName(\"body\");\n        let recs;\n        if (type === \"error\") {\n            alert(\"An error occured! \");\n            return;\n        }\n        if (type === \"chat\") {\n            let message = {\n                from: from,\n                message: elems[0].innerHTML,\n                time: new Date(),\n                type: \"rec\"\n            };\n            let recMsg = {\n                text: message.message,\n                stamp: message.time.toString(),\n                type: \"rec\"\n            };\n            dispatch({newMessage: recMsg, type: 'PUSH_HISTORY_MESSAGES'})\n\n        }\n\n        return true; //The handler should return true if it is to be invoked again; returning false will remove the handler after it returns\n    };\n    /*-----------------Get Contacts List (step1)----------------=*/\n    //send xml to get contacts from xmpp server\n    const getRoster = () => {\n        const newIq = $iq({type: \"get\", id: \"r1\"})\n            .c(\"query\", {xmlns: \"jabber:iq:roster\"})\n        connection.sendIQ(newIq, rosterReceived);\n    };\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Received contacts (step2)----------------*/\n    //how to use received rosters from xmpp server\n    const rosterReceived = (iq) => {\n        let contactJid,\n            rosterName,\n            myContacts = [];\n        $(iq)\n            .find(\"item\")\n            .each(function () {\n                contactJid = $(this).attr(\"jid\"); // The jabber_id of your contact\n                if ($(this).attr(\"name\")) {\n                    rosterName = $(this).attr(\"name\");\n                } else {\n                    rosterName = \"\";\n                }\n                // The jabber_id of your contact\n                // You can probably put them in a unordered list and and use their jids as ids.\n                myContacts = myContacts.concat({\n                    name: rosterName,\n                    jid: contactJid\n                });\n            });\n        getContacts(myContacts);\n    };\n\n    /*-----------------/Received contacts (step2)----------------*/\n\n    /*-----------------Set priority ----------------*/\n    //set priority to specify the device\n    const sendPriority = () => {\n        connection.send(\n            $pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:3\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        //send request for available features\n        connection.sendIQ($iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    };\n\n    /*-----------------/Get priority ----------------*/\n    /*---------------------------------*/\n    //Show Or hide Main page.\n    const setShowStatus = (showMainPage) => {\n        dispatch({showMainPage, type: 'SHOW_MAIN_PAGE'})\n    };\n    /*---------------------------------*/\n\n\n    /*---------------------------------*/\n    //set received contacts from xmpp server to global state\n    const getContacts = (contacts) => {\n        dispatch({contacts, type: 'GET_CONTACTS'})\n    }\n    /*---------------------------------*/\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleSubmit(event);\n        }\n    };\n    /*-----------------------------------*/\n    //action for login form\n    const handleChangeJID = (event) => {\n        setJidValue(event.target.value)\n\n    }\n    const handleChangePass = (event) => {\n        // console.log(\"passValue\", event.target.value)\n        setPassValue(event.target.value);\n    };\n    const handleSubmit = (event) => {\n\n        event.preventDefault();\n        if (jidValue === undefined || jidValue === \"\") {\n            alert(\"Blank JID\");\n        } else if (passValue === undefined || passValue === \"\")\n            alert(\"Empty pass, please type password\");\n        else {\n            if (loginButton === \"connect\") {\n                changeLoginButton(\"disconnect\")\n                connection.connect(\n                    jidValue,\n                    passValue,\n                    onConnect\n                );\n            } else {\n                connection.disconnect();\n                changeLoginButton(\"connect\")\n\n            }\n        }\n    };\n    /*-----------------------------------*/\n\n    return (\n\n\n        <React.Fragment>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <form>\n                        <input\n                            label=\"JID\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"text\"\n                            placeholder=\"enter your JID...\"\n                            onChange={handleChangeJID}\n                            onKeyDown={handleKeyDown}\n                            value={jidValue}\n                        />\n                        <input\n                            label=\"Password\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"password\"\n                            placeholder=\"enter your password...\"\n                            onChange={handleChangePass}\n                            onKeyDown={handleKeyDown}\n                            value={passValue}\n                        />\n\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-primary\"\n                            id=\"connect\"\n                            value={loginButton}\n                        >{loginButton}</button>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}