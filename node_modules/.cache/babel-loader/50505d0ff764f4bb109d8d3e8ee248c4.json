{"ast":null,"code":"import _slicedToArray from \"/home/paria/sandbox/projects/webfon-V2/webfonv2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Input from \"../input\";\nimport Button from \"../button\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst LoginPage = () => {\n  const connection = useSelector(state => state.connection);\n  const $pres = useSelector(state => state.$pres);\n  const $iq = useSelector(state => state.$iq);\n  const strophe = useSelector(state => state.strophe);\n  const showMainPage = useSelector(state => state.showMainPage);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        jidValue = _useState2[0],\n        setJidValue = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        passValue = _useState4[0],\n        setPassValue = _useState4[1];\n\n  const _useState5 = useState('connect'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loginButton = _useState6[0],\n        changeLoginButton = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        rosters = _useState8[0],\n        getRosters = _useState8[1];\n\n  const dispatch = useDispatch(); //strophe connection process\n\n  const onConnect = status => {\n    console.log(\"window.Strophe.Status\", strophe.Status);\n\n    if (status === strophe.Status.CONNECTING) {\n      console.log(\"Strophe is connecting.\");\n    } else if (status === strophe.Status.CONNFAIL) {\n      console.log(\"Strophe failed to connect.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.AUTHENTICATING) {\n      console.log(\"Strophe is AUTHENTICATING.\");\n    } else if (status === strophe.Status.AUTHFAIL) {\n      console.log(\"Strophe is AUTHFAIL.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.DISCONNECTING) {\n      console.log(\"Strophe is disconnecting.\");\n    } else if (status === strophe.Status.DISCONNECTED) {\n      console.log(\"Strophe is disconnected.\");\n      setShowStatus(false);\n    } else if (status === strophe.Status.CONNECTED) {\n      console.log(\"Strophe is connected.\");\n      setShowStatus(true);\n      getRoster();\n      sendPriority();\n    }\n  };\n  /*-----------------Get Contacts List (step1)----------------=*/\n\n\n  const getRoster = () => {\n    getRoster($iq({\n      type: \"get\",\n      id: \"r1\"\n    }).c(\"query\", {\n      xmlns: \"jabber:iq:roster\"\n    }));\n    connection.sendIQ(this.state.iq, rosterReceived);\n  };\n  /*-----------------Get Contacts List (step1)----------------*/\n\n  /*-----------------Get priority ----------------*/\n\n\n  const sendPriority = () => {\n    this.state.connection.send(this.state.$pres().c(\"priority\").t(\"10\").up().c(\"rap\", {\n      xmlns: \"urn:xmpp:rap:0\",\n      ns: \"urn:xmpp:jingle:apps:rtp:0\",\n      num: '5'\n    }));\n    this.state.connection.sendIQ(this.state.$iq({\n      type: \"get\"\n    }).c(\"query\", {\n      xmlns: \"http://jabber.org/protocol/disco#info\"\n    }));\n  };\n  /*-----------------Get priority ----------------*/\n\n\n  const setShowStatus = s => {\n    console.log(\"show\", s);\n    dispatch({\n      s,\n      type: 'SHOW_MAIN_PAGE'\n    });\n  };\n\n  const handleChangeJID = event => {\n    // console.log(\"jidValue\", event.target.value)\n    setJidValue(event.target.value);\n    console.log(\"jidValue\", jidValue);\n  };\n\n  const handleChangePass = event => {\n    // console.log(\"passValue\", event.target.value)\n    setPassValue(event.target.value);\n    console.log(\"passValue\", ...passValue);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (jidValue === undefined || jidValue === \"\") {\n      alert(\"Blank JID\");\n    } else if (passValue === undefined || passValue === \"\") alert(\"Empty pass, please type password\");else {\n      if (loginButton === \"connect\") {\n        changeLoginButton(\"disconnect\");\n        connection.connect(jidValue, passValue, onConnect);\n      } else {\n        connection.disconnect();\n        changeLoginButton(\"connect\");\n      }\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    label: \"JID\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"text\",\n    placeholder: \"enter your JID...\",\n    onChange: handleChangeJID,\n    value: jidValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    label: \"Password\",\n    className: \"col-sm-2 col-form-label\",\n    size: \"col-sm-10\",\n    type: \"password\",\n    placeholder: \"enter your password...\",\n    onChange: handleChangePass,\n    value: passValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    id: \"connect\",\n    value: loginButton,\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, loginButton)))));\n};\n\nexport default LoginPage;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/login-page/index.js"],"names":["React","useEffect","useState","Input","Button","useDispatch","useSelector","LoginPage","connection","state","$pres","$iq","strophe","showMainPage","jidValue","setJidValue","passValue","setPassValue","loginButton","changeLoginButton","rosters","getRosters","dispatch","onConnect","status","console","log","Status","CONNECTING","CONNFAIL","setShowStatus","AUTHENTICATING","AUTHFAIL","DISCONNECTING","DISCONNECTED","CONNECTED","getRoster","sendPriority","type","id","c","xmlns","sendIQ","iq","rosterReceived","send","t","up","ns","num","s","handleChangeJID","event","target","value","handleChangePass","handleSubmit","preventDefault","undefined","alert","connect","disconnect"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,UAAU,GAAGF,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACD,UAAhB,CAA9B;AACA,QAAME,KAAK,GAAGJ,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAzB;AACA,QAAMC,GAAG,GAAGL,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACE,GAAhB,CAAvB;AACA,QAAMC,OAAO,GAAGN,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACG,OAAhB,CAA3B;AACA,QAAMC,YAAY,GAAGP,WAAW,CAACG,KAAK,IAAIA,KAAK,CAACI,YAAhB,CAAhC;;AALoB,oBAMYX,QAAQ,CAAC,EAAD,CANpB;AAAA;AAAA,QAMbY,QANa;AAAA,QAMHC,WANG;;AAAA,qBAOcb,QAAQ,CAAC,EAAD,CAPtB;AAAA;AAAA,QAObc,SAPa;AAAA,QAOFC,YAPE;;AAAA,qBAQqBf,QAAQ,CAAC,SAAD,CAR7B;AAAA;AAAA,QAQbgB,WARa;AAAA,QAQAC,iBARA;;AAAA,qBASUjB,QAAQ,CAAC,EAAD,CATlB;AAAA;AAAA,QASbkB,OATa;AAAA,QASJC,UATI;;AAUpB,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B,CAVoB,CAYpB;;AACA,QAAMkB,SAAS,GAAIC,MAAD,IAAY;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCd,OAAO,CAACe,MAA7C;;AACA,QAAIH,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeC,UAA9B,EAA0C;AACtCH,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,KAFD,MAEO,IAAIF,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeE,QAA9B,EAAwC;AAC3CJ,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeI,cAA9B,EAA8C;AACjDN,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,KAFM,MAEA,IAAIF,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeK,QAA9B,EAAwC;AAC3CP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeM,aAA9B,EAA6C;AAChDR,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,KAFM,MAEA,IAAIF,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeO,YAA9B,EAA4C;AAC/CT,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAI,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHM,MAGA,IAAIN,MAAM,KAAKZ,OAAO,CAACe,MAAR,CAAeQ,SAA9B,EAAyC;AAC5CV,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAI,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,MAAAA,SAAS;AACTC,MAAAA,YAAY;AAEf;AACJ,GAxBD;AAyBA;;;AACA,QAAMD,SAAS,GAAG,MAAM;AACpBA,IAAAA,SAAS,CAACzB,GAAG,CAAC;AAAC2B,MAAAA,IAAI,EAAE,KAAP;AAAcC,MAAAA,EAAE,EAAE;AAAlB,KAAD,CAAH,CACLC,CADK,CACH,OADG,EACM;AAACC,MAAAA,KAAK,EAAE;AAAR,KADN,CAAD,CAAT;AAGAjC,IAAAA,UAAU,CAACkC,MAAX,CAAkB,KAAKjC,KAAL,CAAWkC,EAA7B,EAAiCC,cAAjC;AACH,GALD;AAOA;;AAEA;;;AACA,QAAMP,YAAY,GAAG,MAAM;AACvB,SAAK5B,KAAL,CAAWD,UAAX,CAAsBqC,IAAtB,CACI,KAAKpC,KAAL,CAAWC,KAAX,GACK8B,CADL,CACO,UADP,EAEKM,CAFL,CAEO,IAFP,EAGKC,EAHL,GAIKP,CAJL,CAIO,KAJP,EAIc;AAACC,MAAAA,KAAK,EAAE,gBAAR;AAA0BO,MAAAA,EAAE,EAAE,4BAA9B;AAA4DC,MAAAA,GAAG,EAAE;AAAjE,KAJd,CADJ;AAOA,SAAKxC,KAAL,CAAWD,UAAX,CAAsBkC,MAAtB,CAA6B,KAAKjC,KAAL,CAAWE,GAAX,CAAe;AAAC2B,MAAAA,IAAI,EAAE;AAAP,KAAf,EACxBE,CADwB,CACtB,OADsB,EACb;AAACC,MAAAA,KAAK,EAAE;AAAR,KADa,CAA7B;AAEH,GAVD;AAYA;;;AAEA,QAAMX,aAAa,GAAIoB,CAAD,IAAO;AACzBzB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBwB,CAApB;AACA5B,IAAAA,QAAQ,CAAC;AAAC4B,MAAAA,CAAD;AAAIZ,MAAAA,IAAI,EAAE;AAAV,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMa,eAAe,GAAIC,KAAD,IAAW;AAC/B;AACArC,IAAAA,WAAW,CAACqC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBZ,QAAxB;AAEH,GALD;;AAMA,QAAMyC,gBAAgB,GAAIH,KAAD,IAAW;AAChC;AACAnC,IAAAA,YAAY,CAACmC,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,GAAGV,SAA5B;AAEH,GALD;;AAOA,QAAMwC,YAAY,GAAIJ,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACK,cAAN;;AACA,QAAI3C,QAAQ,KAAK4C,SAAb,IAA0B5C,QAAQ,KAAK,EAA3C,EAA+C;AAC3C6C,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH,KAFD,MAEO,IAAI3C,SAAS,KAAK0C,SAAd,IAA2B1C,SAAS,KAAK,EAA7C,EACH2C,KAAK,CAAC,kCAAD,CAAL,CADG,KAEF;AACD,UAAIzC,WAAW,KAAK,SAApB,EAA+B;AAC3BC,QAAAA,iBAAiB,CAAC,YAAD,CAAjB;AACAX,QAAAA,UAAU,CAACoD,OAAX,CACI9C,QADJ,EAEIE,SAFJ,EAGIO,SAHJ;AAKH,OAPD,MAOO;AACHf,QAAAA,UAAU,CAACqD,UAAX;AACA1C,QAAAA,iBAAiB,CAAC,SAAD,CAAjB;AAEH;AACJ;AACJ,GApBD;;AAsBA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,KAAK,EAAC,KADV;AAEI,IAAA,SAAS,EAAC,yBAFd;AAGI,IAAA,IAAI,EAAC,WAHT;AAII,IAAA,IAAI,EAAC,MAJT;AAKI,IAAA,WAAW,EAAC,mBALhB;AAMI,IAAA,QAAQ,EAAEgC,eANd;AAOI,IAAA,KAAK,EAAErC,QAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAUI;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,SAAS,EAAC,yBAFd;AAGI,IAAA,IAAI,EAAC,WAHT;AAII,IAAA,IAAI,EAAC,UAJT;AAKI,IAAA,WAAW,EAAC,wBALhB;AAMI,IAAA,QAAQ,EAAEyC,gBANd;AAOI,IAAA,KAAK,EAAEvC,SAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAoBI;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAC,iBAFd;AAGI,IAAA,EAAE,EAAC,SAHP;AAII,IAAA,KAAK,EAAEE,WAJX;AAKI,IAAA,OAAO,EAAEsC,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMEtC,WANF,CApBJ,CADJ,CADJ,CADJ,CADJ;AAoCH,CA3ID;;AA8IA,eAAeX,SAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Input from \"../input\";\nimport Button from \"../button\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst LoginPage = () => {\n    const connection = useSelector(state => state.connection)\n    const $pres = useSelector(state => state.$pres)\n    const $iq = useSelector(state => state.$iq)\n    const strophe = useSelector(state => state.strophe)\n    const showMainPage = useSelector(state => state.showMainPage)\n    const [jidValue, setJidValue] = useState('')\n    const [passValue, setPassValue] = useState('')\n    const [loginButton, changeLoginButton] = useState('connect')\n    const [rosters, getRosters] = useState('')\n    const dispatch = useDispatch();\n\n    //strophe connection process\n    const onConnect = (status) => {\n        console.log(\"window.Strophe.Status\", strophe.Status);\n        if (status === strophe.Status.CONNECTING) {\n            console.log(\"Strophe is connecting.\");\n        } else if (status === strophe.Status.CONNFAIL) {\n            console.log(\"Strophe failed to connect.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.AUTHENTICATING) {\n            console.log(\"Strophe is AUTHENTICATING.\");\n        } else if (status === strophe.Status.AUTHFAIL) {\n            console.log(\"Strophe is AUTHFAIL.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.DISCONNECTING) {\n            console.log(\"Strophe is disconnecting.\");\n        } else if (status === strophe.Status.DISCONNECTED) {\n            console.log(\"Strophe is disconnected.\");\n            setShowStatus(false)\n        } else if (status === strophe.Status.CONNECTED) {\n            console.log(\"Strophe is connected.\");\n            setShowStatus(true)\n            getRoster();\n            sendPriority();\n\n        }\n    }\n    /*-----------------Get Contacts List (step1)----------------=*/\n    const getRoster = () => {\n        getRoster($iq({type: \"get\", id: \"r1\"})\n            .c(\"query\", {xmlns: \"jabber:iq:roster\"}))\n      \n        connection.sendIQ(this.state.iq, rosterReceived);\n    }\n\n    /*-----------------Get Contacts List (step1)----------------*/\n\n    /*-----------------Get priority ----------------*/\n    const sendPriority = () => {\n        this.state.connection.send(\n            this.state.$pres()\n                .c(\"priority\")\n                .t(\"10\")\n                .up()\n                .c(\"rap\", {xmlns: \"urn:xmpp:rap:0\", ns: \"urn:xmpp:jingle:apps:rtp:0\", num: '5'})\n        );\n        this.state.connection.sendIQ(this.state.$iq({type: \"get\"})\n            .c(\"query\", {xmlns: \"http://jabber.org/protocol/disco#info\"}))\n    }\n\n    /*-----------------Get priority ----------------*/\n\n    const setShowStatus = (s) => {\n        console.log(\"show\", s)\n        dispatch({s, type: 'SHOW_MAIN_PAGE'})\n    }\n\n    const handleChangeJID = (event) => {\n        // console.log(\"jidValue\", event.target.value)\n        setJidValue(event.target.value)\n        console.log(\"jidValue\", jidValue)\n\n    }\n    const handleChangePass = (event) => {\n        // console.log(\"passValue\", event.target.value)\n        setPassValue(event.target.value)\n        console.log(\"passValue\", ...passValue)\n\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (jidValue === undefined || jidValue === \"\") {\n            alert(\"Blank JID\");\n        } else if (passValue === undefined || passValue === \"\")\n            alert(\"Empty pass, please type password\");\n        else {\n            if (loginButton === \"connect\") {\n                changeLoginButton(\"disconnect\")\n                connection.connect(\n                    jidValue,\n                    passValue,\n                    onConnect\n                );\n            } else {\n                connection.disconnect();\n                changeLoginButton(\"connect\")\n\n            }\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <form>\n                        <input\n                            label=\"JID\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"text\"\n                            placeholder=\"enter your JID...\"\n                            onChange={handleChangeJID}\n                            value={jidValue}\n                        />\n                        <input\n                            label=\"Password\"\n                            className=\"col-sm-2 col-form-label\"\n                            size=\"col-sm-10\"\n                            type=\"password\"\n                            placeholder=\"enter your password...\"\n                            onChange={handleChangePass}\n                            value={passValue}\n                        />\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary\"\n                            id=\"connect\"\n                            value={loginButton}\n                            onClick={handleSubmit}\n                        >{loginButton}</button>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\n\nexport default LoginPage;\n"]},"metadata":{},"sourceType":"module"}