{"ast":null,"code":"var _jsxFileName = \"/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPhone, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./style.css\";\n\nconst MakeCall = () => {\n  let JsSIP = require('jssip');\n\n  const register = () => {\n    console.log('Registering to SIP');\n    JsSIP.debug.enable('JsSIP:*'); // const address = GLOBAL.jssip_server + ':' + GLOBAL.jssip_port\n\n    let socket = new JsSIP.RTC('http://77.104.116.187:5060');\n    const configuration = {\n      sockets: [socket],\n      uri: 'sip:704@admin',\n      authorization_user: '704',\n      password: '704704',\n      connection_recovery_min_interval: 3,\n      register: true,\n      display_name: \"paria\"\n    };\n    let ua = new JsSIP.UA(configuration);\n    ua.start(); // cb(ua)\n\n    ua.on(\"registered\", function (e) {\n      console.log(\"registered\");\n    });\n    ua.on(\"unregistered\", function (e) {\n      console.log(\"registered\");\n    });\n    ua.on('registrationFailed', function (e) {\n      alert(\"registrationFailed\");\n    });\n    /*------WebSocket connection events-----*/\n\n    ua.on('connected', function (e) {\n      console.log(\"connect\");\n      ua.call('sip:712@admin', options);\n    });\n    ua.on('connecting', function (e) {\n      console.log(\"connecting\");\n    });\n    ua.on('disconnected', function (e) {\n      console.log(\"disconnected\");\n    });\n    /*------WebSocket connection events-----*/\n    // Register callbacks to desired call events\n\n    let eventHandlers = {\n      'progress': function (e) {\n        console.log('call is in progress');\n      },\n      'failed': function (e) {\n        console.log('call failed with cause: ' + e.data.cause);\n      },\n      'ended': function (e) {\n        console.log('call ended with cause: ' + e.data.cause);\n      },\n      'confirmed': function (e) {\n        console.log('call confirmed');\n      }\n    };\n    let options = {\n      'eventHandlers': eventHandlers,\n      'mediaConstraints': {\n        'audio': true,\n        'video': true\n      }\n    };\n  }; // const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7000/');\n  // let configuration = {\n  //     'uri': 'sip:704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n  //     'password': '704704', // FILL PASSWORD HERE,\n  //     'sockets': [socket]\n  // };\n  // const ua = new JsSIP.UA(configuration);\n  //\n  // const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n  // incomingCallAudio.loop = true;\n  // const remoteAudio = new window.Audio();\n  // remoteAudio.autoplay = true;\n  //\n  // const callOptions = {\n  //     mediaConstraints: {audio: true, video: false}\n  // };\n  // console.log('ua', ua);\n  // // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n  // console.log(ua._status)\n\n  /*------New incoming or outgoing call event-----*/\n  // ua.on('newRTCSession', function (e) {\n  //     console.log(\"newRTCSession\")\n  //\n  // });\n\n  /*------New incoming or outgoing call event-----*/\n\n  /*------SIP registration events-----*/\n\n  /*--------SIP registration events-----------*/\n  // ua.start();\n  // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n  // Register callbacks to desired call events\n  //     const eventHandlers = {\n  //         'progress': function (e) {\n  //             console.log('call is in progress');\n  //         },\n  //         'failed': function (e) {\n  //             console.log('call failed with cause: ' + e.data.cause);\n  //         },\n  //         'ended': function (e) {\n  //             console.log('call ended with cause: ' + e.data.cause);\n  //         },\n  //         'confirmed': function (e) {\n  //             console.log('call confirmed');\n  //         }\n  //     };\n  //\n  //     let options = {\n  //         'eventHandlers': eventHandlers,\n  //         'mediaConstraints': {'audio': true, 'video': true}\n  //     };\n  //\n  //     const session = ua.call('712@admin', options);\n  //     console.log(\"sip\", ua.status);\n  // const onSipConnect = () => {\n  //     JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n  //     ua.on('registrationFailed', function (ev) {\n  //         alert('Registering on SIP server failed with error: ' + ev.cause);\n  //         configuration.uri = null;\n  //         configuration.password = null;\n  //     });\n  //     ua.on('newRTCSession', function (ev) {\n  //         let newSession = ev.session;\n  //         console.log(\"newSession\",newSession)\n  //         if (session) { // hangup any existing call\n  //             session.terminate();\n  //         }\n  //         let session = newSession;\n  //         let completeSession = function () {\n  //             session = null;\n  //\n  //         };\n  //         session.on('ended', completeSession);\n  //         session.on('failed', completeSession);\n  //         // session.on('accepted',updateUI);\n  //         session.on('confirmed', function () {\n  //             var localStream = session.connection.getLocalStreams()[0];\n  //             var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n  //             session.sendDTMF = function (tone) {\n  //                 dtmfSender.insertDTMF(tone);\n  //             };\n  //         });\n  //         session.on('addstream', function (e) {\n  //             // incomingCallAudio.pause();\n  //             remoteAudio.src = window.URL.createObjectURL(e.stream);\n  //         });\n  //         if (session.direction === 'incoming') {\n  //             // incomingCallAudio.play();\n  //         }\n  //         // updateUI();\n  //     });\n  //     ua.start();\n  // };\n\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"callControl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"to\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"toField\",\n    type: \"text\",\n    placeholder: \"Enter number here\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    onClick: register,\n    id: \"connectCall\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    className: \"fap fa-phone\",\n    icon: faPhone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }))));\n};\n\nexport default MakeCall;","map":{"version":3,"sources":["/home/paria/sandbox/projects/webfon-V2/webfonv2/src/components/call/make-call/index.js"],"names":["React","FontAwesomeIcon","faPhone","faSpinner","MakeCall","JsSIP","require","register","console","log","debug","enable","socket","RTC","configuration","sockets","uri","authorization_user","password","connection_recovery_min_interval","display_name","ua","UA","start","on","e","alert","call","options","eventHandlers","data","cause"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPhone, faSpinner} from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./style.css\"\n\nconst MakeCall = () => {\n    let JsSIP = require('jssip');\n\n    const register = () => {\n        console.log('Registering to SIP')\n        JsSIP.debug.enable('JsSIP:*')\n        // const address = GLOBAL.jssip_server + ':' + GLOBAL.jssip_port\n        let socket = new JsSIP.RTC('http://77.104.116.187:5060')\n\n        const configuration = {\n            sockets: [socket],\n            uri: 'sip:704@admin',\n            authorization_user: '704',\n            password: '704704',\n            connection_recovery_min_interval: 3,\n            register: true,\n            display_name : \"paria\"\n        };\n        let ua = new JsSIP.UA(configuration);\n        ua.start();\n        // cb(ua)\n        ua.on(\"registered\", function (e) {\n            console.log(\"registered\")\n        });\n        ua.on(\"unregistered\", function (e) {\n            console.log(\"registered\")\n        });\n        ua.on('registrationFailed', function (e) {\n            alert(\"registrationFailed\")\n        });\n\n        /*------WebSocket connection events-----*/\n\n        ua.on('connected', function (e) {\n            console.log(\"connect\")\n            ua.call('sip:712@admin', options);\n\n        });\n        ua.on('connecting', function (e) {\n            console.log(\"connecting\")\n        });\n        ua.on('disconnected', function (e) {\n            console.log(\"disconnected\")\n        });\n        /*------WebSocket connection events-----*/\n\n        // Register callbacks to desired call events\n        let eventHandlers = {\n            'progress': function(e) {\n                console.log('call is in progress');\n            },\n            'failed': function(e) {\n                console.log('call failed with cause: '+ e.data.cause);\n            },\n            'ended': function(e) {\n                console.log('call ended with cause: '+ e.data.cause);\n            },\n            'confirmed': function(e) {\n                console.log('call confirmed');\n            }\n        };\n\n        let options = {\n            'eventHandlers'    : eventHandlers,\n            'mediaConstraints' : { 'audio': true, 'video': true }\n        };\n\n    };\n\n    // const socket = new JsSIP.WebSocketInterface('ws://77.104.116.187:7000/');\n    // let configuration = {\n    //     'uri': 'sip:704@admin', // FILL SIP URI HERE like sip:sip-user@your-domain.bwapp.bwsip.io\n    //     'password': '704704', // FILL PASSWORD HERE,\n    //     'sockets': [socket]\n    // };\n    // const ua = new JsSIP.UA(configuration);\n    //\n    // const incomingCallAudio = new window.Audio('http://code.bandwidth.com/media/incoming_alert.mp3');\n    // incomingCallAudio.loop = true;\n    // const remoteAudio = new window.Audio();\n    // remoteAudio.autoplay = true;\n    //\n    // const callOptions = {\n    //     mediaConstraints: {audio: true, video: false}\n    // };\n    // console.log('ua', ua);\n    // // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    // console.log(ua._status)\n    /*------New incoming or outgoing call event-----*/\n\n    // ua.on('newRTCSession', function (e) {\n    //     console.log(\"newRTCSession\")\n    //\n    // });\n    /*------New incoming or outgoing call event-----*/\n\n\n    /*------SIP registration events-----*/\n\n    /*--------SIP registration events-----------*/\n\n    // ua.start();\n    // JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n\n// Register callbacks to desired call events\n//     const eventHandlers = {\n//         'progress': function (e) {\n//             console.log('call is in progress');\n//         },\n//         'failed': function (e) {\n//             console.log('call failed with cause: ' + e.data.cause);\n//         },\n//         'ended': function (e) {\n//             console.log('call ended with cause: ' + e.data.cause);\n//         },\n//         'confirmed': function (e) {\n//             console.log('call confirmed');\n//         }\n//     };\n//\n//     let options = {\n//         'eventHandlers': eventHandlers,\n//         'mediaConstraints': {'audio': true, 'video': true}\n//     };\n//\n//     const session = ua.call('712@admin', options);\n//     console.log(\"sip\", ua.status);\n\n    // const onSipConnect = () => {\n    //     JsSIP.debug.enable('JsSIP:*'); // more detailed debug output\n    //     ua.on('registrationFailed', function (ev) {\n    //         alert('Registering on SIP server failed with error: ' + ev.cause);\n    //         configuration.uri = null;\n    //         configuration.password = null;\n    //     });\n    //     ua.on('newRTCSession', function (ev) {\n    //         let newSession = ev.session;\n    //         console.log(\"newSession\",newSession)\n    //         if (session) { // hangup any existing call\n    //             session.terminate();\n    //         }\n    //         let session = newSession;\n    //         let completeSession = function () {\n    //             session = null;\n    //\n    //         };\n    //         session.on('ended', completeSession);\n    //         session.on('failed', completeSession);\n    //         // session.on('accepted',updateUI);\n    //         session.on('confirmed', function () {\n    //             var localStream = session.connection.getLocalStreams()[0];\n    //             var dtmfSender = session.connection.createDTMFSender(localStream.getAudioTracks()[0])\n    //             session.sendDTMF = function (tone) {\n    //                 dtmfSender.insertDTMF(tone);\n    //             };\n    //         });\n    //         session.on('addstream', function (e) {\n    //             // incomingCallAudio.pause();\n    //             remoteAudio.src = window.URL.createObjectURL(e.stream);\n    //         });\n    //         if (session.direction === 'incoming') {\n    //             // incomingCallAudio.play();\n    //         }\n    //         // updateUI();\n    //     });\n    //     ua.start();\n    // };\n    return (\n\n        <React.Fragment>\n            <div id=\"callControl\">\n                <div id=\"to\">\n                    <input id=\"toField\" type=\"text\" placeholder=\"Enter number here\"/>\n                </div>\n                <button onClick={register} id=\"connectCall\">\n                    <FontAwesomeIcon className=\"fap fa-phone\"\n                                     icon={faPhone}/>\n\n                </button>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default MakeCall;\n"]},"metadata":{},"sourceType":"module"}