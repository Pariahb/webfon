{"ast":null,"code":"const JsSIP_C = require('./Constants');\n\nconst SIPMessage = require('./SIPMessage');\n\nconst Utils = require('./Utils');\n\nconst debug = require('debug')('JsSIP:sanityCheck'); // Checks for requests and responses.\n\n\nconst all = [minimumHeaders]; // Checks for requests.\n\nconst requests = [rfc3261_8_2_2_1, rfc3261_16_3_4, rfc3261_18_3_request, rfc3261_8_2_2_2]; // Checks for responses.\n\nconst responses = [rfc3261_8_1_3_3, rfc3261_18_3_response]; // local variables.\n\nlet message;\nlet ua;\nlet transport;\n\nmodule.exports = (m, u, t) => {\n  message = m;\n  ua = u;\n  transport = t;\n\n  for (const check of all) {\n    if (check() === false) {\n      return false;\n    }\n  }\n\n  if (message instanceof SIPMessage.IncomingRequest) {\n    for (const check of requests) {\n      if (check() === false) {\n        return false;\n      }\n    }\n  } else if (message instanceof SIPMessage.IncomingResponse) {\n    for (const check of responses) {\n      if (check() === false) {\n        return false;\n      }\n    }\n  } // Everything is OK.\n\n\n  return true;\n};\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at jssip_id, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n// Sanity Check functions for requests.\n\n\nfunction rfc3261_8_2_2_1() {\n  if (message.s('to').uri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if (!message.to_tag) {\n    if (message.call_id.substr(0, 5) === ua.configuration.jssip_id) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  const len = Utils.str_utf8_length(message.body);\n  const contentLength = message.getHeader('content-length');\n\n  if (len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  const fromTag = message.from_tag;\n  const call_id = message.call_id;\n  const cseq = message.cseq;\n  let tr; // Accept any in-dialog request.\n\n  if (message.to_tag) {\n    return;\n  } // INVITE request.\n\n\n  if (message.method === JsSIP_C.INVITE) {\n    // If the branch matches the key of any IST then assume it is a retransmission\n    // and ignore the INVITE.\n    // TODO: we should reply the last response.\n    if (ua._transactions.ist[message.via_branch]) {\n      return false;\n    } // Otherwise check whether it is a merged request.\n    else {\n        for (const transaction in ua._transactions.ist) {\n          if (Object.prototype.hasOwnProperty.call(ua._transactions.ist, transaction)) {\n            tr = ua._transactions.ist[transaction];\n\n            if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n              reply(482);\n              return false;\n            }\n          }\n        }\n      }\n  } // Non INVITE request.\n  // If the branch matches the key of any NIST then assume it is a retransmission\n  // and ignore the request.\n  // TODO: we should reply the last response.\n  else if (ua._transactions.nist[message.via_branch]) {\n      return false;\n    } // Otherwise check whether it is a merged request.\n    else {\n        for (const transaction in ua._transactions.nist) {\n          if (Object.prototype.hasOwnProperty.call(ua._transactions.nist, transaction)) {\n            tr = ua._transactions.nist[transaction];\n\n            if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n              reply(482);\n              return false;\n            }\n          }\n        }\n      }\n} // Sanity Check functions for responses.\n\n\nfunction rfc3261_8_1_3_3() {\n  if (message.getHeaders('via').length > 1) {\n    debug('more than one Via header field present in the response, dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  const len = Utils.str_utf8_length(message.body),\n        contentLength = message.getHeader('content-length');\n\n  if (len < contentLength) {\n    debug('message body length is lower than the value in Content-Length header field, dropping the response');\n    return false;\n  }\n} // Sanity Check functions for requests and responses.\n\n\nfunction minimumHeaders() {\n  const mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'];\n\n  for (const header of mandatoryHeaders) {\n    if (!message.hasHeader(header)) {\n      debug(\"missing mandatory header field : \".concat(header, \", dropping the response\"));\n      return false;\n    }\n  }\n} // Reply.\n\n\nfunction reply(status_code) {\n  const vias = message.getHeaders('via');\n  let to;\n  let response = \"SIP/2.0 \".concat(status_code, \" \").concat(JsSIP_C.REASON_PHRASE[status_code], \"\\r\\n\");\n\n  for (const via of vias) {\n    response += \"Via: \".concat(via, \"\\r\\n\");\n  }\n\n  to = message.getHeader('To');\n\n  if (!message.to_tag) {\n    to += \";tag=\".concat(Utils.newTag());\n  }\n\n  response += \"To: \".concat(to, \"\\r\\n\");\n  response += \"From: \".concat(message.getHeader('From'), \"\\r\\n\");\n  response += \"Call-ID: \".concat(message.call_id, \"\\r\\n\");\n  response += \"CSeq: \".concat(message.cseq, \" \").concat(message.method, \"\\r\\n\");\n  response += '\\r\\n';\n  transport.send(response);\n}","map":null,"metadata":{},"sourceType":"script"}