{"ast":null,"code":"var grammar = require('./grammar'); // customized util.format - discards excess arguments and can void middle ones\n\n\nvar formatRegExp = /%[sdv%]/g;\n\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n\n    var arg = args[i];\n    i += 1;\n\n    switch (x) {\n      case '%%':\n        return '%';\n\n      case '%s':\n        return String(arg);\n\n      case '%d':\n        return Number(arg);\n\n      case '%v':\n        return '';\n    }\n  }); // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;\n  var args = [type + '=' + str];\n\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      } else {\n        // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  } else {\n    args.push(location[obj.name]);\n  }\n\n  return format.apply(null, args);\n}; // RFC specified order\n// TODO: extend this with all the rest\n\n\nvar defaultOuterOrder = ['v', 'o', 's', 'i', 'u', 'e', 'p', 'c', 'b', 't', 'r', 'z', 'a'];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\nmodule.exports = function (session, opts) {\n  opts = opts || {}; // ensure certain properties exist\n\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = []; // loop through outerOrder for matching properties on session\n\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      } else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  }); // then for each media line, follow the innerOrder\n\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        } else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n  return sdp.join('\\r\\n') + '\\r\\n';\n};","map":null,"metadata":{},"sourceType":"script"}