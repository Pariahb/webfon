{"ast":null,"code":"import { getBatch } from './batch'; // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\nconst CLEARED = null;\nconst nullListeners = {\n  notify() {}\n\n};\n\nfunction createListenerCollection() {\n  const batch = getBatch(); // the current/next pattern is copied from redux's createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n\n  let current = [];\n  let next = [];\n  return {\n    clear() {\n      next = CLEARED;\n      current = CLEARED;\n    },\n\n    notify() {\n      const listeners = current = next;\n      batch(() => {\n        for (let i = 0; i < listeners.length; i++) {\n          listeners[i]();\n        }\n      });\n    },\n\n    get() {\n      return next;\n    },\n\n    subscribe(listener) {\n      let isSubscribed = true;\n      if (next === current) next = current.slice();\n      next.push(listener);\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return;\n        isSubscribed = false;\n        if (next === current) next = current.slice();\n        next.splice(next.indexOf(listener), 1);\n      };\n    }\n\n  };\n}\n\nexport default class Subscription {\n  constructor(store, parentSub) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);\n  }\n\n  addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  }\n\n  notifyNestedSubs() {\n    this.listeners.notify();\n  }\n\n  handleChangeWrapper() {\n    if (this.onStateChange) {\n      this.onStateChange();\n    }\n  }\n\n  isSubscribed() {\n    return Boolean(this.unsubscribe);\n  }\n\n  trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);\n      this.listeners = createListenerCollection();\n    }\n  }\n\n  tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}